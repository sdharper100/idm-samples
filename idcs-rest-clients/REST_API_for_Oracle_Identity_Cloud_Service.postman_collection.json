{
	"info": {
		"_postman_id": "9ba7c93e-35e3-98d5-28ec-677e9167a3f3",
		"name": "REST API for Oracle Identity Cloud Service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": ".well-known",
			"description": "",
			"item": [
				{
					"name": "Retrieve IDCS Discovery Doc",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{HOST}}/.well-known/idcs-configuration",
							"host": [
								"{{HOST}}"
							],
							"path": [
								".well-known",
								"idcs-configuration"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve OpenID Discovery Doc",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{HOST}}/.well-known/openid-configuration",
							"host": [
								"{{HOST}}"
							],
							"path": [
								".well-known",
								"openid-configuration"
							]
						}
					},
					"response": []
				},
				{
					"name": "HTTP Options",
					"request": {
						"method": "OPTIONS",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{HOST}}/.well-known/openid-configuration",
							"host": [
								"{{HOST}}"
							],
							"path": [
								".well-known",
								"openid-configuration"
							]
						},
						"description": " Provides a list of allowed HTTP methods for the resource in the \n<b>Access-Control-Allow-Methods</b> header."
					},
					"response": []
				},
				{
					"name": "HTTP Options",
					"request": {
						"method": "OPTIONS",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{HOST}}/.well-known/idcs-configuration",
							"host": [
								"{{HOST}}"
							],
							"path": [
								".well-known",
								"idcs-configuration"
							]
						},
						"description": " Provides a list of allowed HTTP methods for the resource in the \n<b>Access-Control-Allow-Methods</b> header."
					},
					"response": []
				}
			]
		},
		{
			"name": "Apps",
			"description": "Each App represents a customer's access to an application or service for which Oracle Identity Cloud Service provides runtime services. The App entity provides a \"single pane of glass\" (speaking technically, a converged representation) through which administrators can view or manage everything that Oracle Identity Cloud Service knows about a particular application or service.\n\nIn Oracle Identity Cloud Service, each App is represented once and has a number of optional facets, each of which describes a particular aspect of behavior. For example, an App may act as an OAuthClient, as an OAuthResource, and as an AppIDUser. If the App is a LoginTarget, this means that Oracle Identity Cloud Service can log a User into that App automatically.",
			"item": [
				{
					"name": "Create",
					"description": "",
					"item": [
						{
							"name": "Create an application with a webtier policy",
							"description": null,
							"item": [
								{
									"name": "Step 1 - Create a confidential client app",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"App2\",\r\n  \"displayName\": \"App2\",\r\n  \"description\": \"Custom Application\",\r\n  \"basedOnTemplate\": {\r\n    \"value\": \"CustomWebAppTemplateId\"\r\n  },\r\n  \"isOAuthClient\": true,\r\n  \"redirectUris\": [\"https://%hostid%/cloudgate/v1/oauth2/callback\"],\r\n  \"logoutUri\": \"https://%hostid%/cloudgate/v1/oauth2/logout\",\r\n  \"postLogoutRedirectUris\": [\r\n  ],\r\n  \"clientType\": \"confidential\",\r\n  \"allowedGrants\": [\r\n    \"authorization_code\",\r\n    \"client_credentials\"\r\n  ],\r\n  \"idcsAppRoles\": [\r\n    \"Cloud Gate\"\r\n  ],\r\n  \"allowedScopes\": [\r\n  ],\r\n  \"active\": true,\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:App\"\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Apps",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Apps"
											]
										},
										"description": "Create a confidential client application for use with a webtier policy."
									},
									"response": []
								},
								{
									"name": "Step 2 - Update an application with a webtier policy",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schemas\":[ \"urn:ietf:params:scim:api:messages:2.0:PatchOp\" ],\r\n  \"Operations\":[\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"isWebTierPolicy\",\r\n      \"value\": true\r\n    },\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"urn:ietf:params:scim:schemas:oracle:idcs:extension:webTierPolicy:App:webTierPolicyJson\",\r\n      \"value\": \"{\\r\\n  \\\"cloudgatePolicy\\\": {\\r\\n    \\\"version\\\"              : \\\"2.6\\\",\\r\\n    \\\"requireSecureCookies\\\" : true,\\r\\n    \\\"webtierPolicy\\\"        : [\\r\\n      {\\r\\n        \\\"policyName\\\"       : \\\"default\\\",\\r\\n        \\\"resourceFilters\\\"  : [\\r\\n            {\\r\\n                \\\"comment\\\"   : \\\"Public Filter\\\",\\r\\n                \\\"type\\\"      : \\\"regex\\\",\\r\\n                \\\"filter\\\"    : \\\".*\\\",\\r\\n                \\\"method\\\"    : \\\"public\\\"\\r\\n            }\\r\\n        ]\\r\\n      }\\r\\n    ]\\r\\n  }\\r\\n}\"\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Apps/{{APP_ID}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Apps",
												"{{APP_ID}}"
											]
										},
										"description": "This is an example request that shows what a properly escaped WebTier Policy looks like in the request payload. \n\nOnce you have constructed your Web Tier Policy, you need to escape it before uploading it to Oracle Identity Cloud Service. At this time, you need to manually do this using a JSON-escaping website such as:\n\nhttps://www.freeformatter.com/javascript-escape.html\n\nCopy the output from the website and use it in the request payload for the \"value\" attribute."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Create a confidential client app",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\"urn:ietf:params:scim:schemas:oracle:idcs:App\"],\r\n  \"basedOnTemplate\": { \"value\": \"CustomWebAppTemplateId\" },\r\n  \"displayName\": \"Test Confidential Client Application\",\r\n  \"description\": \"Confidential client application for testing purposes\",\r\n  \"clientType\": \"confidential\",\r\n  \"isOAuthClient\": true,\r\n  \"allowedGrants\": [\"authorization_code\",\"client_credentials\",\"password\",\"refresh_token\",\"urn:ietf:params:oauth:grant-type:jwt-bearer\"],\r\n  \"redirectUris\": [\"https://www.myapp.com/callback\"],\r\n  \"logoutUri\": \"https://www.myapp.com/logout\",\r\n  \"postLogoutRedirectUris\": [\"https://www.myapp.com/\"]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Apps",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Apps"
									]
								},
								"description": "Create a confidential client application.\n\nAlso provided as an additional example is how to create a confidential client app for use with a webtier policy.\n"
							},
							"response": []
						},
						{
							"name": "Create a resource server app",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\"urn:ietf:params:scim:schemas:oracle:idcs:App\"],\r\n  \"basedOnTemplate\": { \"value\": \"CustomWebAppTemplateId\" },\r\n  \"displayName\": \"Test Resource Server Application\",\r\n  \"description\": \"Resource Server application for testing purposes\",\r\n  \"isOAuthResource\": true,\r\n  \"accessTokenExpiry\": 3600,\r\n  \"refreshTokenExpiry\": 604800,\r\n  \"allUrlSchemesAllowed\": false,\r\n  \"audience\": \"https://api.rserver.com\",\r\n  \"scopes\": [\r\n    {\r\n      \"value\": \"/mysettings\",\r\n      \"fqs\": \"https://api.rserver.com/mysettings\",\r\n      \"requiresConsent\": true,\r\n      \"description\": \"Get information about your preferences\"\r\n    },{\r\n      \"value\": \"/post\",\r\n      \"fqs\": \"https://api.rserver.com/post\",\r\n      \"requiresConsent\": true,\r\n      \"description\": \"Post on your behalf\"\r\n    },{\r\n      \"value\": \"/myprofile\",\r\n      \"fqs\": \"https://api.rserver.com/myprofile\",\r\n      \"requiresConsent\": false,\r\n      \"description\": \"Access your profile information\"\r\n    }]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Apps",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Apps"
									]
								},
								"description": "Create a resource server app"
							},
							"response": []
						},
						{
							"name": "Create a client and resource server app",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\"urn:ietf:params:scim:schemas:oracle:idcs:App\"],\r\n  \"basedOnTemplate\": { \"value\": \"CustomWebAppTemplateId\" },\r\n  \"displayName\": \"Test Client and Resource Server\",\r\n  \"description\": \"Client and Resource server application for testing purposes\",\r\n  \"clientType\": \"confidential\",\r\n  \"isOAuthClient\": true,\r\n  \"allowedGrants\": [\"authorization_code\",\"client_credentials\"],\r\n  \"redirectUris\": [\"https://www.mytestapp.com/callback\"],\r\n  \"logoutUri\": \"https://www.mytestapp.com/logout\",\r\n  \"postLogoutRedirectUris\": [\"https://www.mytestapp.com/\"],\r\n  \"isOAuthResource\": true,\r\n  \"accessTokenExpiry\": 3600,\r\n  \"refreshTokenExpiry\": 604800,\r\n  \"allUrlSchemesAllowed\": false,\r\n  \"audience\": \"https://api.mytestapp.com\",\r\n  \"scopes\": [\r\n    {\r\n      \"value\": \"/mysettings\",\r\n      \"fqs\": \"https://api.mytestapp.com/mysettings\",\r\n      \"requiresConsent\": true,\r\n      \"description\": \"Get information about your preferences\"\r\n    },{\r\n      \"value\": \"/post\",\r\n      \"fqs\": \"https://api.mytestapp.com/post\",\r\n      \"requiresConsent\": true,\r\n      \"description\": \"Post on your behalf\"\r\n    },{\r\n      \"value\": \"/myprofile\",\r\n      \"fqs\": \"https://api.mytestapp.com/myprofile\",\r\n      \"requiresConsent\": false,\r\n      \"description\": \"Access your profile information\"\r\n    }]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Apps",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Apps"
									]
								},
								"description": "Create a client and resource server application"
							},
							"response": []
						},
						{
							"name": "Create a SAML app",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\"urn:ietf:params:scim:schemas:oracle:idcs:App\"],\r\n  \"basedOnTemplate\": { \"value\": \"CustomWebAppTemplateId\" },\r\n  \"displayName\": \"Test SAML Application\",\r\n  \"description\": \"SAML application for testing purposes\",\r\n  \"clientType\": \"trusted\",\r\n  \"isOAuthClient\": true,\r\n  \"allowedGrants\": [\"authorization_code\",\"client_credentials\",\"password\",\"refresh_token\",\"urn:ietf:params:oauth:grant-type:jwt-bearer\"],\r\n  \"redirectUris\": [\"https://www.myapp.com/callback\"],\r\n  \"logoutUri\": \"https://www.myapp.com/logout\",\r\n  \"postLogoutRedirectUris\": [\"https://www.myapp.com/\"]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Apps",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Apps"
									]
								},
								"description": "An OAuth client application is an HTTP client that can acquire, and then use an access token. There are three types of OAuth client applications that you can create: Confidential, Trusted, and Public. Both the confidential and trusted client apps are specified by using CustomWebAppTemplateId as the value for the basedOnTemplate attribute. \r\n\r\nNote: If you are using the optional name attribute in your request, be sure to use only alphanumeric characters and the underscore ( _ ) character in the value. "
							},
							"response": []
						},
						{
							"name": "Create a public client app",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\"urn:ietf:params:scim:schemas:oracle:idcs:App\"],\r\n  \"basedOnTemplate\": { \"value\": \"CustomBrowserMobileTemplateId\" },\r\n  \"displayName\": \"Test Public Client Application\",\r\n  \"description\": \"Public client application for testing purposes\",\r\n  \"clientType\": \"public\",\r\n  \"isOAuthClient\": true,\r\n  \"allowedGrants\": [\"authorization_code\",\"implicit\"],\r\n  \"redirectUris\": [\"https://www.myapp.com/callback\"],\r\n  \"logoutUri\": \"https://www.myapp.com/logout\",\r\n  \"postLogoutRedirectUris\": [\"https://www.myapp.com/\"]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Apps",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Apps"
									]
								},
								"description": "An OAuth client application is an HTTP client that can acquire, and then use an access token. There are three types of OAuth client applications that you can create: Confidential, Trusted, and Public.\n\nThe public client app is specified by using CustomBrowserMobileTemplateId as the value for the basedOnTemplate attribute. "
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete",
					"description": "",
					"item": [
						{
							"name": "Delete an app",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Apps/{{appid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Apps",
										"{{appid}}"
									]
								},
								"description": "Deleting an application"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Lifecycle",
					"description": "",
					"item": [
						{
							"name": "Activate application",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"active\": true,\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:AppStatusChanger\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/AppStatusChanger/{{appid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"AppStatusChanger",
										"{{appid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Regenerate client_secret",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/scim+json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayName\": \" IDCS Portal\",\r\n  \"description\": \"Custom portal application for IDCS\",\r\n  \"isOAuthClient\": true,\r\n  \"redirectUris\": [\"https://www.google.co.in/\"],\r\n  \"logoutUri\": \"https://www.google.co.in/\",\r\n  \"postLogoutRedirectUris\": [\"https://www.google.co.in/\"],\r\n  \"clientType\": \"confidential\",\r\n  \"allowedGrants\": [\"authorization_code\"],\r\n  \"allowedScopes\": [{\r\n      \"fqs\": \"www.idcs.com/scope1\"\r\n    }],\r\n  \"isOAuthResource\": true,\r\n  \"accessTokenExpiry\": 10000,\r\n  \"refreshTokenExpiry\": 10001,\r\n  \"audience\": \"www.idcs.com\",\r\n  \"scopes\": [{\r\n      \"value\": \"/scope1\"\r\n    }, {\r\n      \"value\": \"/scope2\"\r\n    }],\r\n  \"basedOnTemplate\": {\r\n    \"value\": \"CustomWebAppTemplateId\"\r\n  },\r\n  \"active\": true,\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:App\"\r\n  ],\r\n  \"isLoginTarget\": true,\r\n  \"landingPageUrl\": \"https://www.oracle.com/idcs\",\r\n  \"loginMechanism\": \"OIDC\"\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/AppClientSecretRegenerator/{{appid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"AppClientSecretRegenerator",
										"{{appid}}"
									]
								},
								"description": "Regenerating the OAuth Client secret"
							},
							"response": []
						},
						{
							"name": "Deactivate application",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"active\": false,\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:AppStatusChanger\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/AppStatusChanger/{{appid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"AppStatusChanger",
										"{{appid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add allowed scope to application",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\r\n  ],\r\n  \"Operations\": [{\r\n    \"op\": \"add\",\r\n    \"path\": \"allowedScopes\",\r\n    \"value\": [{ \"fqs\": \"https://api.mytestapp.com/myprofile\" }]\r\n   }]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Apps/{{appid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Apps",
										"{{appid}}"
									]
								},
								"description": "Add a new allowed scope to the application"
							},
							"response": []
						},
						{
							"name": "Remove allowed grant from application",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\r\n  ],\r\n  \"Operations\": [{\r\n    \"op\": \"remove\",\r\n    \"path\": \"allowedGrants[value eq \\\"refresh_token\\\"]\"\r\n   }]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Apps/{{appid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Apps",
										"{{appid}}"
									]
								},
								"description": "Remove an allowed grant from the application"
							},
							"response": []
						},
						{
							"name": "Add allowed grant to application",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\r\n  ],\r\n  \"Operations\": [{\r\n    \"op\": \"add\",\r\n    \"path\": \"allowedGrants\",\r\n    \"value\": [\"refresh_token\"]\r\n   }]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Apps/{{appid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Apps",
										"{{appid}}"
									]
								},
								"description": "Add a new allowed grant to the application"
							},
							"response": []
						},
						{
							"name": "Remove allowed scope from application",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\r\n  ],\r\n  \"Operations\": [{\r\n    \"op\": \"remove\",\r\n    \"path\": \"allowedScopes[fqs ew \\\"/myprofile\\\"]\"\r\n   }]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Apps/{{appid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Apps",
										"{{appid}}"
									]
								},
								"description": "Remove an allowed scope from the application"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Modify",
					"description": "",
					"item": [
						{
							"name": "Update app (single attribute)",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\r\n  ],\r\n  \"Operations\": [{\r\n      \"op\": \"replace\",\r\n      \"path\": \"description\",\r\n      \"value\": \"Client and Resource Server application used for testing the REST APIs\"\r\n    }]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Apps/{{appid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Apps",
										"{{appid}}"
									]
								},
								"description": "Update the App with existing details"
							},
							"response": []
						},
						{
							"name": "Update app (multiple attributes)",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\r\n  ],\r\n  \"Operations\": [{\r\n      \"op\": \"replace\",\r\n      \"path\": \"description\",\r\n      \"value\": \"Cli and Res app for tests\"\r\n    }, {\r\n      \"op\": \"replace\",\r\n      \"path\": \"displayName\",\r\n      \"value\": \"Test Cli plus Res app\"\r\n    }]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Apps/{{appid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Apps",
										"{{appid}}"
									]
								},
								"description": "Update the App with existing details"
							},
							"response": []
						},
						{
							"name": "Update app (add new scope)",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\r\n  ],\r\n  \"Operations\": [{\r\n      \"op\": \"add\",\r\n      \"path\": \"scopes\",\r\n      \"value\": [{\r\n          \"value\": \"/myreports\",\r\n          \"requiresConsent\": true,\r\n          \"description\": \"Access your reports\"\r\n        }]\r\n    }]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Apps/{{appid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Apps",
										"{{appid}}"
									]
								},
								"description": "Update the App with a new app scope"
							},
							"response": []
						},
						{
							"name": "Update app (modify existing scope)",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\r\n  ],\r\n  \"Operations\": [{\r\n      \"op\": \"replace\",\r\n      \"path\": \"scopes[value sw \\\"/myreports\\\"]\",\r\n      \"value\": [{\r\n          \"value\": \"/myreports\",\r\n          \"requiresConsent\": false,\r\n          \"description\": \"Access your performance reports\"\r\n        }]\r\n    }]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Apps/{{appid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Apps",
										"{{appid}}"
									]
								},
								"description": "Update an existing scope"
							},
							"response": []
						},
						{
							"name": "Update app (remove existing scope)",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\r\n  ],\r\n  \"Operations\": [{\r\n      \"op\": \"remove\",\r\n      \"path\": \"scopes[value sw \\\"/myreports\\\"]\"\r\n    }]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Apps/{{appid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Apps",
										"{{appid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Replace an app",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"allowOffline\": false,\r\n  \"isOAuthResource\": true,\r\n  \"clientType\": \"trusted\",\r\n  \"logoutUri\": \"https://www.idcs.com/idcs/logout\",\r\n  \"accessTokenExpiry\": 10000,\r\n  \"displayName\": \"IDCS Portal\",\r\n  \"landingPageUrl\": \"https://www.idcs.com/idcs\",\r\n  \"loginMechanism\": \"OIDC\",\r\n  \"active\": false,\r\n  \"description\": \"Custom portal application for IDCS\",\r\n  \"refreshTokenExpiry\": 10001,\r\n  \"allUrlSchemesAllowed\": false,\r\n  \"isLoginTarget\": true,\r\n  \"audience\": \"www.idcs.com\",\r\n  \"isOAuthClient\": true,\r\n  \"migrated\": false,\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:App\"\r\n  ],\r\n  \"basedOnTemplate\": {\r\n    \"value\": \"CustomWebAppTemplateId\"\r\n  },\r\n  \"allowedGrants\": [\r\n    \"authorization_code\"\r\n  ],\r\n  \"redirectUris\": [\r\n    \"https://www.idcs.com/idcs/login\"\r\n  ],\r\n  \"allowedScopes\": [{\r\n      \"fqs\": \"www.idcs.com/scope1\"\r\n    }, {\r\n      \"fqs\": \"www.idcs.com/scope4\"\r\n    }],\r\n  \"postLogoutRedirectUris\": [\r\n    \"https://www.idcs.com/idcs/post_logout\"\r\n  ],\r\n  \"scopes\": [{\r\n      \"value\": \"/scope1\"\r\n    }, {\r\n      \"value\": \"/scope4\"\r\n    }]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Apps/{{appid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Apps",
										"{{appid}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Search",
					"description": "",
					"item": [
						{
							"name": "Search for Apps",
							"description": "",
							"item": [
								{
									"name": "Search all apps",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Apps",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Apps"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search all apps (with result pagination)",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Apps?count=5&startIndex=0&sortBy=displayName",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Apps"
											],
											"query": [
												{
													"key": "count",
													"value": "5"
												},
												{
													"key": "startIndex",
													"value": "0"
												},
												{
													"key": "sortBy",
													"value": "displayName"
												}
											]
										},
										"description": "count = number of entries retrieved\nstartIndex = index for search result\nsortBy = order results by a specific attribute"
									},
									"response": []
								},
								{
									"name": "Search all apps (with a specific allowed grant)",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/scim+json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"displayName\": \" IDCS Portal\",\r\n  \"description\": \"Custom portal application for Oracle Identity Cloud Service\",\r\n  \"isOAuthClient\": true,\r\n  \"redirectUris\": [\"https://www.google.co.in/\"],\r\n  \"logoutUri\": \"https://www.google.co.in/\",\r\n  \"postLogoutRedirectUris\": [\"https://www.google.co.in/\"],\r\n  \"clientType\": \"confidential\",\r\n  \"allowedGrants\": [\"authorization_code\"],\r\n  \"allowedScopes\": [{\r\n      \"fqs\": \"www.idcs.com/scope1\"\r\n    }],\r\n  \"isOAuthResource\": true,\r\n  \"accessTokenExpiry\": 10000,\r\n  \"refreshTokenExpiry\": 10001,\r\n  \"audience\": \"www.idcs.com\",\r\n  \"scopes\": [{\r\n      \"value\": \"/scope1\"\r\n    }, {\r\n      \"value\": \"/scope2\"\r\n    }],\r\n  \"basedOnTemplate\": {\r\n    \"value\": \"CustomWebAppTemplateId\"\r\n  },\r\n  \"active\": true,\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:App\"\r\n  ],\r\n  \"isLoginTarget\": true,\r\n  \"landingPageUrl\": \"https://www.oracle.com/idcs\",\r\n  \"loginMechanism\": \"OIDC\"\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Apps?attributes=displayName,allowedGrants&filter=allowedGrants co \"authorization_code\"",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Apps"
											],
											"query": [
												{
													"key": "attributes",
													"value": "displayName,allowedGrants"
												},
												{
													"key": "filter",
													"value": "allowedGrants co \"authorization_code\""
												}
											]
										},
										"description": "Getting the application details"
									},
									"response": []
								},
								{
									"name": "Search for a specific app (return allowed grants)",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/scim+json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"displayName\": \" IDCS Portal\",\r\n  \"description\": \"Custom portal application for IDCS\",\r\n  \"isOAuthClient\": true,\r\n  \"redirectUris\": [\"https://www.google.co.in/\"],\r\n  \"logoutUri\": \"https://www.google.co.in/\",\r\n  \"postLogoutRedirectUris\": [\"https://www.google.co.in/\"],\r\n  \"clientType\": \"confidential\",\r\n  \"allowedGrants\": [\"authorization_code\"],\r\n  \"allowedScopes\": [{\r\n      \"fqs\": \"www.idcs.com/scope1\"\r\n    }],\r\n  \"isOAuthResource\": true,\r\n  \"accessTokenExpiry\": 10000,\r\n  \"refreshTokenExpiry\": 10001,\r\n  \"audience\": \"www.idcs.com\",\r\n  \"scopes\": [{\r\n      \"value\": \"/scope1\"\r\n    }, {\r\n      \"value\": \"/scope2\"\r\n    }],\r\n  \"basedOnTemplate\": {\r\n    \"value\": \"CustomWebAppTemplateId\"\r\n  },\r\n  \"active\": true,\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:App\"\r\n  ],\r\n  \"isLoginTarget\": true,\r\n  \"landingPageUrl\": \"https://www.oracle.com/idcs\",\r\n  \"loginMechanism\": \"OIDC\"\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Apps/{{appid}}?attributes=allowedGrants",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Apps",
												"{{appid}}"
											],
											"query": [
												{
													"key": "attributes",
													"value": "allowedGrants"
												}
											]
										},
										"description": "Getting the application details"
									},
									"response": []
								},
								{
									"name": "Search all apps (with a specific allowed scope)",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"displayName\": \" IDCS Portal\",\r\n  \"description\": \"Custom portal application for Oracle Identity Cloud Service\",\r\n  \"isOAuthClient\": true,\r\n  \"redirectUris\": [\"https://www.google.co.in/\"],\r\n  \"logoutUri\": \"https://www.google.co.in/\",\r\n  \"postLogoutRedirectUris\": [\"https://www.google.co.in/\"],\r\n  \"clientType\": \"confidential\",\r\n  \"allowedGrants\": [\"authorization_code\"],\r\n  \"allowedScopes\": [{\r\n      \"fqs\": \"www.idcs.com/scope1\"\r\n    }],\r\n  \"isOAuthResource\": true,\r\n  \"accessTokenExpiry\": 10000,\r\n  \"refreshTokenExpiry\": 10001,\r\n  \"audience\": \"www.idcs.com\",\r\n  \"scopes\": [{\r\n      \"value\": \"/scope1\"\r\n    }, {\r\n      \"value\": \"/scope2\"\r\n    }],\r\n  \"basedOnTemplate\": {\r\n    \"value\": \"CustomWebAppTemplateId\"\r\n  },\r\n  \"active\": true,\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:App\"\r\n  ],\r\n  \"isLoginTarget\": true,\r\n  \"landingPageUrl\": \"https://www.oracle.com/idcs\",\r\n  \"loginMechanism\": \"OIDC\"\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Apps?attributes=displayName,allowedScopes&filter=allowedScopes.fqs co \"scope\"",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Apps"
											],
											"query": [
												{
													"key": "attributes",
													"value": "displayName,allowedScopes"
												},
												{
													"key": "filter",
													"value": "allowedScopes.fqs co \"scope\""
												}
											]
										},
										"description": "Getting the application details"
									},
									"response": []
								},
								{
									"name": "Search all apps (with search criteria)",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Apps?filter=displayName co \"Test\"",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Apps"
											],
											"query": [
												{
													"key": "filter",
													"value": "displayName co \"Test\""
												}
											]
										},
										"description": "filter = add a filter criteria to the search using attributes, values, and operators"
									},
									"response": []
								},
								{
									"name": "Search all apps (client id and client secret)",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Apps?attributes=displayName,active,name,clientSecret,id",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Apps"
											],
											"query": [
												{
													"key": "attributes",
													"value": "displayName,active,name,clientSecret,id"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search all apps (return specific attributes)",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Apps?attributes=displayName,active",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Apps"
											],
											"query": [
												{
													"key": "attributes",
													"value": "displayName,active"
												}
											]
										},
										"description": "attributes = comma separated list of values retrieved in a search"
									},
									"response": []
								},
								{
									"name": "Search for a specific app (return allowed scopes)",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/scim+json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"displayName\": \" IDCS Portal\",\r\n  \"description\": \"Custom portal application for IDCS\",\r\n  \"isOAuthClient\": true,\r\n  \"redirectUris\": [\"https://www.google.co.in/\"],\r\n  \"logoutUri\": \"https://www.google.co.in/\",\r\n  \"postLogoutRedirectUris\": [\"https://www.google.co.in/\"],\r\n  \"clientType\": \"confidential\",\r\n  \"allowedGrants\": [\"authorization_code\"],\r\n  \"allowedScopes\": [{\r\n      \"fqs\": \"www.idcs.com/scope1\"\r\n    }],\r\n  \"isOAuthResource\": true,\r\n  \"accessTokenExpiry\": 10000,\r\n  \"refreshTokenExpiry\": 10001,\r\n  \"audience\": \"www.idcs.com\",\r\n  \"scopes\": [{\r\n      \"value\": \"/scope1\"\r\n    }, {\r\n      \"value\": \"/scope2\"\r\n    }],\r\n  \"basedOnTemplate\": {\r\n    \"value\": \"CustomWebAppTemplateId\"\r\n  },\r\n  \"active\": true,\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:App\"\r\n  ],\r\n  \"isLoginTarget\": true,\r\n  \"landingPageUrl\": \"https://www.oracle.com/idcs\",\r\n  \"loginMechanism\": \"OIDC\"\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Apps/{{appid}}?attributes=allowedScopes",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Apps",
												"{{appid}}"
											],
											"query": [
												{
													"key": "attributes",
													"value": "allowedScopes"
												}
											]
										},
										"description": "Getting the application details"
									},
									"response": []
								},
								{
									"name": "Search for a specific app (return application scopes)",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/scim+json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"displayName\": \" IDCS Portal\",\r\n  \"description\": \"Custom portal application for IDCS\",\r\n  \"isOAuthClient\": true,\r\n  \"redirectUris\": [\"https://www.google.co.in/\"],\r\n  \"logoutUri\": \"https://www.google.co.in/\",\r\n  \"postLogoutRedirectUris\": [\"https://www.google.co.in/\"],\r\n  \"clientType\": \"confidential\",\r\n  \"allowedGrants\": [\"authorization_code\"],\r\n  \"allowedScopes\": [{\r\n      \"fqs\": \"www.idcs.com/scope1\"\r\n    }],\r\n  \"isOAuthResource\": true,\r\n  \"accessTokenExpiry\": 10000,\r\n  \"refreshTokenExpiry\": 10001,\r\n  \"audience\": \"www.idcs.com\",\r\n  \"scopes\": [{\r\n      \"value\": \"/scope1\"\r\n    }, {\r\n      \"value\": \"/scope2\"\r\n    }],\r\n  \"basedOnTemplate\": {\r\n    \"value\": \"CustomWebAppTemplateId\"\r\n  },\r\n  \"active\": true,\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:App\"\r\n  ],\r\n  \"isLoginTarget\": true,\r\n  \"landingPageUrl\": \"https://www.oracle.com/idcs\",\r\n  \"loginMechanism\": \"OIDC\"\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Apps/{{appid}}?attributes=scopes",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Apps",
												"{{appid}}"
											],
											"query": [
												{
													"key": "attributes",
													"value": "scopes"
												}
											]
										},
										"description": "Getting the application details"
									},
									"response": []
								},
								{
									"name": "Search for a specific app (client id and client secret)",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Apps/{{appid}}?attributes=displayName,active,name,clientSecret,id",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Apps",
												"{{appid}}"
											],
											"query": [
												{
													"key": "attributes",
													"value": "displayName,active,name,clientSecret,id"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search for a specific app (return specific attributes)",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"displayName\": \" IDCS Portal\",\r\n  \"description\": \"Custom portal application for IDCS\",\r\n  \"isOAuthClient\": true,\r\n  \"redirectUris\": [\"https://www.google.co.in/\"],\r\n  \"logoutUri\": \"https://www.google.co.in/\",\r\n  \"postLogoutRedirectUris\": [\"https://www.google.co.in/\"],\r\n  \"clientType\": \"confidential\",\r\n  \"allowedGrants\": [\"authorization_code\"],\r\n  \"allowedScopes\": [{\r\n      \"fqs\": \"www.idcs.com/scope1\"\r\n    }],\r\n  \"isOAuthResource\": true,\r\n  \"accessTokenExpiry\": 10000,\r\n  \"refreshTokenExpiry\": 10001,\r\n  \"audience\": \"www.idcs.com\",\r\n  \"scopes\": [{\r\n      \"value\": \"/scope1\"\r\n    }, {\r\n      \"value\": \"/scope2\"\r\n    }],\r\n  \"basedOnTemplate\": {\r\n    \"value\": \"CustomWebAppTemplateId\"\r\n  },\r\n  \"active\": true,\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:App\"\r\n  ],\r\n  \"isLoginTarget\": true,\r\n  \"landingPageUrl\": \"https://www.oracle.com/idcs\",\r\n  \"loginMechanism\": \"OIDC\"\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Apps/{{appid}}?attributes=displayName,description",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Apps",
												"{{appid}}"
											],
											"query": [
												{
													"key": "attributes",
													"value": "displayName,description"
												}
											]
										},
										"description": "Getting the application details"
									},
									"response": []
								},
								{
									"name": "Search for a specific app",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"displayName\": \" IDCS Portal\",\r\n  \"description\": \"Custom portal application for IDCS\",\r\n  \"isOAuthClient\": true,\r\n  \"redirectUris\": [\"https://www.google.co.in/\"],\r\n  \"logoutUri\": \"https://www.google.co.in/\",\r\n  \"postLogoutRedirectUris\": [\"https://www.google.co.in/\"],\r\n  \"clientType\": \"confidential\",\r\n  \"allowedGrants\": [\"authorization_code\"],\r\n  \"allowedScopes\": [{\r\n      \"fqs\": \"www.idcs.com/scope1\"\r\n    }],\r\n  \"isOAuthResource\": true,\r\n  \"accessTokenExpiry\": 10000,\r\n  \"refreshTokenExpiry\": 10001,\r\n  \"audience\": \"www.idcs.com\",\r\n  \"scopes\": [{\r\n      \"value\": \"/scope1\"\r\n    }, {\r\n      \"value\": \"/scope2\"\r\n    }],\r\n  \"basedOnTemplate\": {\r\n    \"value\": \"CustomWebAppTemplateId\"\r\n  },\r\n  \"active\": true,\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:App\"\r\n  ],\r\n  \"isLoginTarget\": true,\r\n  \"landingPageUrl\": \"https://www.oracle.com/idcs\",\r\n  \"loginMechanism\": \"OIDC\"\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Apps/{{appid}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Apps",
												"{{appid}}"
											]
										},
										"description": "Getting the application details"
									},
									"response": []
								},
								{
									"name": "Search for apps with filters using POST",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schemas\": [ \"urn:ietf:params:scim:api:messages:2.0:SearchRequest\"],\r\n  \"attributes\": [\"displayName\", \"active\"],\r\n  \"filter\": \"displayName co \\\"test\\\"\",\r\n  \"sortBy\": \"displayName\",\r\n  \"startIndex\": 1,\r\n  \"count\": 10\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Apps/.search",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Apps",
												".search"
											]
										},
										"description": "Searching for the application details using POST"
									},
									"response": []
								},
								{
									"name": "Search for apps that have been granted a specific approle",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"User\",\r\n         \"value\": \"{{userID}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appID}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_USER\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Apps?filter=grantedAppRoles.value eq \"{{approleid}}\"",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Apps"
											],
											"query": [
												{
													"key": "filter",
													"value": "grantedAppRoles.value eq \"{{approleid}}\""
												}
											]
										},
										"description": "Search for Apps that have been granted a specific AppRole.\n\nExactly one App defines each AppRole, or each AppRole is specific to exactly on App.\n\n- Each AppRole refers to the App that defines it. The attribute app and the attribute 'displayName' are required.\n- The displayName of each AppRole is unique within the App that defines it. For example, an App can't define two AppRoles named \"Administrator\".\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Search for Grants",
							"description": "A Grant always specifies the App to be granted. A Grant may also specify an entitlement.\r\n\r\n- A Grant of a ManagedApp may specify as an entitlement any value of any attribute defined by the schema for an account in that App).\r\n\r\n- One special case of an entitlement is membership in an AppRole defined by that App.\r\n\r\n-------\r\nThere are two ways to query Grants of Apps:\r\n\r\n- by searching /Grants directly: filter=app.value eq \"<idOfApp>\"\r\n\r\n- As a convenience, App exposes a grants attribute. AppManager computes the values of the grants attribute for a particular App by searching /Grants to find Grants of that App. The grants attribute contains the key information about each Grant, but not all of the information.\r\n\r\n--------\r\nQuerying Grants to Apps\r\n\r\nA Grant that specifies as grantee a particular App (and usually a particular AppRole defined by that App) allows that grantee App (Client) to access the resources of the granted App. \r\n\r\n    - Oracle Identity Cloud Service supports currently only Grant-to-App of an AppRole defined by another App:\r\n        -An App needs membership in at least one AppRole defined by the server App in order to support legacy, AppID-based association.\r\n        -An App may need memberships in AppRoles defined by the server App in order to authorize access that OAuth trust enables.\r\n    - In theory, Oracle Identity Cloud Service could also support a Grant-to-App of another App that doesn't specify an AppRole defined by that other App.\r\n\r\nNote that fulfillment of a Grant-to-App doesn't record the grantee App as a member of the AppRole. Instead, fulfillment records the granted AppRole in the grantedAppRoles attribute of the grantee App.\r\n\r\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups.",
							"item": [
								{
									"name": "List grants of a specific app to any group",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Apps/{{appid}}?attributes=grants[granteeType eq \"Group\"]",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Apps",
												"{{appid}}"
											],
											"query": [
												{
													"key": "attributes",
													"value": "grants[granteeType eq \"Group\"]"
												}
											]
										},
										"description": "There are two ways to do this:\n\n1. Request the \"grants\" attribute of the app\n2. Query Grants yourself\n\nIf you request the \"grants\" attribute of the App, it contains the essential data: the ID of the Grant, the ID of the grantee, the type of the grantee, the grantMechanism, and so on.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
									},
									"response": []
								},
								{
									"name": "List grants of a specific app to any user",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Apps/{{appid}}?attributes=grants[granteeType eq \"User\"]",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Apps",
												"{{appid}}"
											],
											"query": [
												{
													"key": "attributes",
													"value": "grants[granteeType eq \"User\"]"
												}
											]
										},
										"description": "There are two ways to do this:\n\n1. Request the \"grants\" attribute of the app\n2. Query Grants yourself\n\nIf you request the \"grants\" attribute of the App, it contains the essential data: the ID of the Grant, the ID of the grantee, the type of the grantee, the grantMechanism, and so on.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
									},
									"response": []
								},
								{
									"name": "List grants of a specific app",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Apps/{{appid}}?attributes=grants",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Apps",
												"{{appid}}"
											],
											"query": [
												{
													"key": "attributes",
													"value": "grants"
												}
											]
										},
										"description": "There are two ways to do this:\n\n1. Request the \"grants\" attribute of the app\n2. Query Grants yourself\n\nIf you request the \"grants\" attribute of the App, it contains the essential data: the ID of the Grant, the ID of the grantee, the type of the grantee, the grantMechanism, and so on.\n\nA Grant that specifies as grantee a particular App (and usually a particular AppRole defined by that App) allows that grantee App (Client) to access the resources of the granted App. \n\n- Oracle Identity Cloud Service supports currently only Grant-to-App of an AppRole defined by another App:\n\t- An App needs membership in at least one AppRole defined by the server App in order to support legacy, AppID-based association.\n\t- An App may need memberships in AppRoles defined by the server App to authorize access that OAuth trust enables.\n\nIn theory, Oracle Identity Cloud Service could also support a Grant-to-App of another App that doesn't specify an AppRole defined by that other App.\n\nNote that fulfillment of a Grant-to-App does not record the grantee App as a member of the AppRole.  Instead, fulfillment records the granted AppRole) in the grantedAppRoles attribute of the grantee App.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "237d214f-2171-4700-bf54-360389345d1e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "28db53b9-a166-47e6-9394-e32feb387b5d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Search an app for the WebTier Policy by appid",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Apps/{{appid}}?attributes=displayName,urn:ietf:params:scim:schemas:oracle:idcs:extension:webTierPolicy:App:webTierPolicyJson",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Apps",
										"{{appid}}"
									],
									"query": [
										{
											"key": "attributes",
											"value": "displayName,urn:ietf:params:scim:schemas:oracle:idcs:extension:webTierPolicy:App:webTierPolicyJson"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search an app for the WebTier Policy by app name",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Apps?filter=name+eq+%22{{app_name}}%22&attributes=displayName,urn:ietf:params:scim:schemas:oracle:idcs:extension:webTierPolicy:App:webTierPolicyJson",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Apps"
									],
									"query": [
										{
											"key": "filter",
											"value": "name+eq+%22{{app_name}}%22"
										},
										{
											"key": "attributes",
											"value": "displayName,urn:ietf:params:scim:schemas:oracle:idcs:extension:webTierPolicy:App:webTierPolicyJson"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search all apps that a specific user can access",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Users/{{userid}}?attributes=urn:ietf:params:scim:schemas:oracle:idcs:extension:user:User:accounts",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Users",
										"{{userid}}"
									],
									"query": [
										{
											"key": "attributes",
											"value": "urn:ietf:params:scim:schemas:oracle:idcs:extension:user:User:accounts"
										}
									]
								},
								"description": "Look at the \"accounts\" attribute of the User. This will list every account to which the User has access. appId is a sub-attribute in each value.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for users who have access to a specific app",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Apps/{{appid}}?attributes=accounts.ownerId&distinct=true",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Apps",
										"{{appid}}"
									],
									"query": [
										{
											"key": "attributes",
											"value": "accounts.ownerId"
										},
										{
											"key": "distinct",
											"value": "true"
										}
									]
								},
								"description": "To list from the App the Users who have access to that App, you must look at the App's \"accounts\" attribute. Each value of the \"accounts\" attribute has a subattribute called \"ownerId\" that is the ID of the Oracle Identity Cloud Service User.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for all clients with explicit access to a specific OAuthresource app",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"User\",\r\n         \"value\": \"{{userID}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appID}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_USER\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Apps?filter=allowedScopes.idOfDefiningApp eq \"{{oauthresourceappid}}\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Apps"
									],
									"query": [
										{
											"key": "filter",
											"value": "allowedScopes.idOfDefiningApp eq \"{{oauthresourceappid}}\""
										}
									]
								},
								"description": "Query for apps that have at least one value of allowed scopes defined by the specified OAuth Resource App.\n\nThis works via OAuth Resource when Trust Scope is explicit.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Client",
					"description": "Apps can be granted to other Apps?\r\n\r\nCurrently, only AppRoles can be granted to Apps. However, this gives the grantee-App access to the App that defines the AppRole. See \"Grants of AppRoles\" and \"Grants to Apps\" above.\r\n\r\nApps can access other Apps\r\n\r\nOracle Identity Cloud Service defines two ways in which an App can access another App:\r\n\r\n-via OAuth. This mechanism is preferred by Oracle Identity Cloud Service and within Oracle Public Cloud (OPC).  An OAuthClient App requests a token to access a particular OAuthResource App. Policies, together with attribute-values configured on the Client App, control the set of OAuthResource Apps to which a particular OAuthClient App can request access.\r\n\r\n- via legacy, AppID-based association. This mechanism is supported for backward compatibility with the older infrastructure of OPC. Shared Identity Management (SIM) associated a client service instance with a server service instance by adding the client as a member of a \"service-instance-specific enterprise-role\" defined by that server. The equivalent in Oracle Identity Cloud Service is to grant to the client App membership in an AppRole defined by the server App.  Having an AppRole defined by a Server App gives the client App the functional privilege to consume resources of that server App.\r\n\r\nApps can access other Apps via OAuth\r\n\r\nOriginally, all access via OAuth was configured explicitly – that is, based solely on the client's allowedScopes. Each value of the Client App's 'allowedScopes' attribute was a fully-qualified scope defined by a particular App that was configured as an OAuthResource. An OAuthClient App could obtain a token only for a subset of allowedScopes that referred to scopes defined by a particular OAuthResource App.\r\n\r\nTrustScope\r\n\r\nIn addition to supporting explicit allowedScopes, Oracle Identity Cloud Service OAuth also supports \"tag-based\" and \"account-based\" access. The value of the trustScope attribute indicates how Oracle Identity Cloud Service determines which (OAuthResourceServer) Apps an (OAuthClient) App can access:\r\n\r\n- trustScope:Explicit. The Client App can access only an OAuthResource App that defines one of the Client App's allowedScopes.\r\n- trustScope:Tags. The Client App can access any OAuthResource App that has a value of tags that matches a value of the Client's allowedTags attribute.\r\n- trustScope:Account. The Client App can access any OAuthResource App within the same Oracle Identity Cloud Service \"stripe\" or tenancy.\r\n\r\nApps can access other Apps via legacy, AppID-based association\r\n\r\nOracle Identity Cloud Service also supports a legacy access-mechanism in which the Client authenticates to the OPC infrastructure using its name (App.name) and password (App.clientSecret). Once authenticated, the grantedAppRoles of the client App allow it to access any server App that defines one of those AppRoles.  Note: the producing service-instance (server) decides at runtime exactly which privileges each of those grantedAppRoles confers on the consuming service (client).\r\n\r\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups.",
					"item": [
						{
							"name": "trustScope:Explicit",
							"description": "For App access via OAuth, the set of Apps that a Client can access depends on the value of 'trustScope'\n\nThe requests in this folder focus on Apps that have trustScope:Explicit.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups.",
							"item": [
								{
									"name": "Search for a list of all OAuth resource apps that a specific OAuth client has explicit access",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Apps/{{clientappid}}?attributes=allowedScopes.idOfDefiningApp&distinct=true",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Apps",
												"{{clientappid}}"
											],
											"query": [
												{
													"key": "attributes",
													"value": "allowedScopes.idOfDefiningApp"
												},
												{
													"key": "distinct",
													"value": "true"
												}
											]
										},
										"description": "Search for a list of all the OAuth Resource Apps to which a specific OAuth Client has explicit access.  You must request that Client's 'allowedScopes' attribute.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
									},
									"response": []
								},
								{
									"name": "Search for an OAuth client app's explicit access to a specific OAuth resource app",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Apps/{{clientappid}}?attributes=allowedScopes[idOfDefiningApp eq \"{{oauthresourceappid}}\"].idOfDefiningApp&distinct=true",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Apps",
												"{{clientappid}}"
											],
											"query": [
												{
													"key": "attributes",
													"value": "allowedScopes[idOfDefiningApp eq \"{{oauthresourceappid}}\"].idOfDefiningApp"
												},
												{
													"key": "distinct",
													"value": "true"
												}
											]
										},
										"description": "Search to see if an OAuth Client App has explicit access to a particular OAuth Resource App. You must restrict the requested values of the Client's 'allowedScopes' attribute.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f96bccb9-0fc2-45ca-86dc-2e5b0cbadc48",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "33b4dea5-cdc8-45ba-90d1-73a470d88acf",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "trustScope:Tags",
							"description": "For App access via OAuth, the set of Apps that a Client can access depends on the value of 'trustScope'.\n\nWhen an app has trustScope:Tags configured, the Client App has access to any OAuth Resource App with a value of \"tags\" that matches a value of the Client's 'allowedTags' attribute.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups.",
							"item": [
								{
									"name": "Step 1: Get allowed tags of client with trustscope:tags",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Apps/{{appid}}?attributes=allowedTags",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Apps",
												"{{appid}}"
											],
											"query": [
												{
													"key": "attributes",
													"value": "allowedTags"
												}
											]
										},
										"description": "Get all of the allowed tags of the client that specifies trustscope:tags.\n\nThe client's allowed tags matter only when the client's trustscope is tags.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
									},
									"response": []
								},
								{
									"name": "Step 2: Search for all OAuth resource apps to which an OAuth client app has tag-based access",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Apps?filter=(tags[key eq \"{{tag1key}}\" and value eq \"{{tag1value}}\"] or tags[key eq \"{{tag2key}}\" and value eq \"{{tag2value}}\"])",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Apps"
											],
											"query": [
												{
													"key": "filter",
													"value": "(tags[key eq \"{{tag1key}}\" and value eq \"{{tag1value}}\"] or tags[key eq \"{{tag2key}}\" and value eq \"{{tag2value}}\"])"
												}
											]
										},
										"description": "Search to see all the (OAuth Resource) Apps to which a particular (OAuth Client) App has tag-based access. You must request that Client's 'allowedTags' attribute, and then search for Apps that have at least one matching of 'tags' and that are enabled as OAuth Resources.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
									},
									"response": []
								},
								{
									"name": "Step 2B: Search for an OAuth client app's tag-based access to a specific OAuth resource app",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Apps?filter=id eq \"{{oauthresourceappid}}\" and (tags[key eq \"{{tag1key}}\" and value eq \"{{tag1value}}\"] or tags[key eq \"{{tag2key}}\" and value eq \"{{tag2value}}\"])",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Apps"
											],
											"query": [
												{
													"key": "filter",
													"value": "id eq \"{{oauthresourceappid}}\" and (tags[key eq \"{{tag1key}}\" and value eq \"{{tag1value}}\"] or tags[key eq \"{{tag2key}}\" and value eq \"{{tag2value}}\"])"
												}
											]
										},
										"description": "Search to see whether an OAuth Client App has tag-based access to a particular (OAuth Resource) App. You must add a filter-condition based on the ID of that OAuth Resource App.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e7410083-55ff-41e6-8945-d8ac9ae1db71",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "82d6a1e8-520f-40d2-890f-4d51c0bb5e71",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "trustScope:Account",
							"description": "For App access via OAuth, the set of Apps that a Client can access depends on the value of 'trustScope'.\n\nWhen an App has trustScope:Account defined, the Client App has access to any OAuth Resource App within the same Oracle Identity Cloud Service \"stripe\" or tenancy.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups.",
							"item": [
								{
									"name": "Search for a list of all OAuth resource apps that an OAuth client app has account-based access",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Apps?filter=isOAuthResource eq true",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Apps"
											],
											"query": [
												{
													"key": "filter",
													"value": "isOAuthResource eq true"
												}
											]
										},
										"description": "Search for a list of all (OAuth Resource) apps that an OAuth client app has account-based access Search for any App that is enabled as an OAuth Resource.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
									},
									"response": []
								},
								{
									"name": "Search for an oauthclient app's account-based access to a particular oauth resource app",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Apps/{{oauthresourceappid}}?attributes=isOAuthResource",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Apps",
												"{{oauthresourceappid}}"
											],
											"query": [
												{
													"key": "attributes",
													"value": "isOAuthResource"
												}
											]
										},
										"description": "Search to see if an OAuth Client App has account-based access to a particular OAuth Resource App. You must add a filter-condition based on the ID of that OAuth Resource App.\n\nIf the value is 'true', then the Client has access to that App via OAuth. If the value is 'false', then the Client can't access that App via OAuth.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "63d6d381-c2eb-419c-8052-4495aca9e854",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ffa089c0-198e-4606-8d34-cfbf1598332e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "grantedAppRoles",
							"description": "Apps can access other Apps via legacy, AppID-based association\r\n\r\nOracle Identity Cloud Service also supports a legacy access-mechanism in which the Client authenticates to the OPC infrastructure using its name (App.name) and password (App.clientSecret). Once authenticated, the grantedAppRoles of the client App allow it to access any server App that defines one of those AppRoles.\r\n\r\nNote: the producing service-instance (server) decides at runtime exactly which privileges each of those grantedAppRoles confers on the consuming service (client).\r\n\r\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups.",
							"item": [
								{
									"name": "Search for all of a client's approles",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Apps/{{appid}}?attributes=grantedAppRoles",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Apps",
												"{{appid}}"
											],
											"query": [
												{
													"key": "attributes",
													"value": "grantedAppRoles"
												}
											]
										},
										"description": "Get the AppRoles granted to a Client.\n\nEach value of 'grantedAppRoles' has the ID of the AppRole, its displayName, the parent App, and so on.\n\nExactly one App defines each AppRole.  Put differently, each AppRole is specific to exactly one App.\n\nEach AppRole refers to the App that defines it. The attribute 'app' and the attribute 'displayName' are required.\n\nThe displayName of each AppRole is unique within the App that defines it. For example, an App cannot define two AppRoles named \"Administrator\".\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
									},
									"response": []
								},
								{
									"name": "Search for all of a client's approles for a specific app",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Apps/{{appid}}?attributes=grantedAppRoles[appId eq \"{{appidthatdefinedtheapprole}}\"]",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Apps",
												"{{appid}}"
											],
											"query": [
												{
													"key": "attributes",
													"value": "grantedAppRoles[appId eq \"{{appidthatdefinedtheapprole}}\"]"
												}
											]
										},
										"description": "Get all of a client's AppRoles for a specific App.\n\nThe AppRoles granted to each App are stored on the App in the 'grantedAppRoles' attribute:\n\n- Each value of 'grantedAppRoles' has the ID of the AppRole, its displayName, the parent App, and so forth.\n\nIn order to request only the values of the 'grantedAppRoles' attribute that pertain to a specific App, you would want to restrict the values for that attribute.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
									},
									"response": []
								},
								{
									"name": "Search for a client's access to a specific approle",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Apps/{{clientappid}}?attributes=grantedAppRoles[value eq \"{{approleid}}\"]",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Apps",
												"{{clientappid}}"
											],
											"query": [
												{
													"key": "attributes",
													"value": "grantedAppRoles[value eq \"{{approleid}}\"]"
												}
											]
										},
										"description": "Search to see if a Client app has access to a specific AppRole.\n\nThe AppRoles granted to each App are stored on the App in the 'grantedAppRoles' attribute.\n\nEach value of 'grantedAppRoles' has the ID of the AppRole, its displayName, the parent App, and so forth.\n\nIn order to request only the values of the 'grantedAppRoles' attribute that pertain to a specific App, you would want to restrict the values for that attribute.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
									},
									"response": []
								},
								{
									"name": "Search for a client's access to a specific approle using 'appId' and 'display'",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Apps/{{clientappid}}?attributes=grantedAppRoles[appId eq \"{{appidthatdefinedtheapprole}}\" and display eq \"{{approledisplayname}}\"]",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Apps",
												"{{clientappid}}"
											],
											"query": [
												{
													"key": "attributes",
													"value": "grantedAppRoles[appId eq \"{{appidthatdefinedtheapprole}}\" and display eq \"{{approledisplayname}}\"]"
												}
											]
										},
										"description": "Search to see if a client has access to a specific AppRole restricting hte info using a combination of 'appId' and 'display'.\n\nThe AppRoles granted to each App are stored on the App in the 'grantedAppRoles' attribute:\n\nEach value of 'grantedAppRoles' has the ID of the AppRole, its displayName, the parent App, and so forth.\n\nIn order to request only the values of the 'grantedAppRoles' attribute that pertain to a specific App, you would want to restrict the values for that attribute.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
									},
									"response": []
								},
								{
									"name": "Search for a client's access to a specific server app",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Apps/{{clientappid}}?attributes=grantedAppRoles[appId eq \"{{serverappid}}\"].appId&distinct=true",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Apps",
												"{{clientappid}}"
											],
											"query": [
												{
													"key": "attributes",
													"value": "grantedAppRoles[appId eq \"{{serverappid}}\"].appId"
												},
												{
													"key": "distinct",
													"value": "true"
												}
											]
										},
										"description": "For access via AppID-based association, the Client App's 'grantedAppRoles' attribute determines the set of Apps the Client can access.\n\nSearch to see whether a Client App has access to a particular Server App.\n\nIf the response contains a value of the 'grantedAppRoles' attribute, the Client has access to it.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
									},
									"response": []
								},
								{
									"name": "Search for a distinct list of apps that a client can access using granted approles",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Apps/{{clientappid}}?attributes=grantedAppRoles.appId&distinct=true",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Apps",
												"{{clientappid}}"
											],
											"query": [
												{
													"key": "attributes",
													"value": "grantedAppRoles.appId"
												},
												{
													"key": "distinct",
													"value": "true"
												}
											]
										},
										"description": "For access via AppId-based association, the Client Apps 'grantedAppRoles' attribute determines the set of Apps the Client can access.\n\nTo list those Apps, request distinct values of 'grantedAppRoles.appId'\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4838cfa9-da88-49e1-80e6-6b9756ef80ae",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "061f508f-32f7-4035-ae7f-8ba247d9d9e0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5c36fc2f-654f-41f0-9552-57784d18d7c7",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f0d81d2f-9269-40fd-95e3-9339436a4fb9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Grants",
					"description": "Grants of Apps\nA Grant always specifies the App to be granted. A Grant may also specify an entitlement.\n\n- A Grant of a Managed App may specify as an entitlement any value of any attribute defined by the schema for an account in that App.\n- One special case of an entitlement is membership in an AppRole defined by that App.\n\nThere are two ways to query grants of Apps:\n\n- By searching /Grants directly, such as filter=app.value eq \"{{appid}}\"\n- As a convenience, App exposees a 'grants' attribute. AppManager computes the values of the 'grants' attribute for a particular App by searching /Grants to find Grants of that App. The 'grants' attribute contains the key information about each Grant, but not all of the information.\n\nGrants to Apps\n\nA Grant that specifies as grantee a particular App (and usually a particular AppRole defined by that App) allows that grantee App (Client) to access the resources of the granted App. \n\n- Oracle Identity Cloud Service supports currently only Grant-to-App of an AppRole defined by another App:\n\t-An App needs membership in at least one AppRole defined by the server App in order to support legacy, AppID-based association.\n\t-An App may need memberships in AppRoles defined by the server App in order to authorize access that OAuth trust enables.\n    -In theory, Oracle Identity Cloud Service could also support a Grant-to-App of another App that does not specify an AppRole defined by that other App.\n\nNote that fulfillment of a Grant-to-App does not record the grantee App as a member of the AppRole. Instead, fulfillment records the granted AppRole in the grantedAppRoles attribute of the grantee App.\n\nQuerying Grants to Apps\n\nThere are several ways to query Grants to Apps:\n\n- Query the /Grants endpoint directly with a filter such as:\n\tfilter=grantee.value eq \"{{appid}}\", or\n\tfilter=grantee[value eq \"{{appid}}\" and type eq \"App\"] (if you distrust the uniqueness of IDs)\n- To find grants of an AppRole to an App, use the grantedAppRoles attribute of App:\n\tFor a particular App, inspect the values of the grantedAppRoles attribute: \n\tAppManager persists the values of this attribute for a particular App.\n\tEach value of the grantedAppRoles attribute refers to an AppRole.\n- To find Apps that have a particular AppRole, search /Apps and filter on the values of grantedAppRoles:\n\tfilter=grantedAppRoles.value eq \"{{approleid}}\".\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups.",
					"item": [
						{
							"name": "Revoke an AppRole from a client",
							"description": "Revoke an AppRole from a client.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups.",
							"item": [
								{
									"name": "Step 1: Get all grants of the specified approle to the client",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"User\",\r\n         \"value\": \"{{userID}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appID}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_USER\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Grants?filter=grantee[value eq \"{{clientappid}}\" and type eq \"App\"] and entitlement[attributeName eq \"appRoles\" and attributeValue eq \"{{approleid}}\"]",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Grants"
											],
											"query": [
												{
													"key": "filter",
													"value": "grantee[value eq \"{{clientappid}}\" and type eq \"App\"] and entitlement[attributeName eq \"appRoles\" and attributeValue eq \"{{approleid}}\"]"
												}
											]
										},
										"description": "Get all direct Grants for a Client to obtain the IDs for the Grants that you want to revoke from the Client.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
									},
									"response": []
								},
								{
									"name": "Step 2: Delete each grant",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Grants/{{grantid}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Grants",
												"{{grantid}}"
											]
										},
										"description": "See https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "91f44eef-6318-408f-a2da-ba50b9565177",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "708a61f9-ca07-468a-9ae3-06dfb162cf26",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Grant an approle to an app",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"App\",\r\n         \"value\": \"{{clientappid}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appidthatdefinedtheapprole}}\"\r\n    },\r\n    \"entitlement\" : {\r\n        \"attributeName\": \"appRoles\",\r\n        \"attributeValue\": \"{{approleid}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_APP\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									]
								},
								"description": "Grants access to a specific AppRole for a specific App. You must specify the AppRole in the payload after \"app\" when granting an AppRole to an App.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for all grants of a specific app",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants?filter=app.value eq \"{{appid}}\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									],
									"query": [
										{
											"key": "filter",
											"value": "app.value eq \"{{appid}}\""
										}
									]
								},
								"description": "There are two ways to do this:\n\n1. Request the \"grants\" attribute of the app\n2. Query Grants yourself\n\nIf you request the \"grants\" attribute of the App, it contains the essential data: the ID of the Grant, the ID of the grantee, the type of the grantee, the grantMechanism, and so on.\n\n---\nA Grant that specifies as grantee a particular App (and usually a particular AppRole defined by that App) allows that grantee App (Client) to access the resources of the granted App. \n\n- Oracle Identity Cloud Service supports currently only Grant-to-App of an AppRole defined by another App:\n\n\t- An App needs membership in at least one AppRole defined by the server App in order to support legacy, AppID-based association.\n\t- An App may need memberships in AppRoles defined by the server App in order to authorize access that OAuth trust enables.\n       \nIn theory, Oracle Identity Cloud Service could also support a Grant-to-App of another App that does not specify an AppRole defined by that other App.\n\nNote that fulfillment of a Grant-to-App does not record the grantee App as a member of the AppRole.  Instead, fulfillment records the granted AppRole) in the grantedAppRoles attribute of the grantee App.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for all grants of a specific app to any user",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants?filter=app.value eq \"{{appid}}\" and grantee.type eq \"User\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									],
									"query": [
										{
											"key": "filter",
											"value": "app.value eq \"{{appid}}\" and grantee.type eq \"User\""
										}
									]
								},
								"description": "There are two ways to do this:\n\n1. Request the \"grants\" attribute of the app\n2. Query Grants yourself\n\nQuerying Grants yourself using this query shows both direct and indirct Grants to Users because fulfillment expands any Grant to a Group into a Grant to each User who is a member of the Group.\n\n---\nA Grant that specifies as grantee a particular App (and usually a particular AppRole defined by that App) allows that grantee App (Client) to access the resources of the granted App. \n\n- Oracle Identity Cloud Service supports currently only Grant-to-App of an AppRole defined by another App:\n\n\t- An App needs membership in at least one AppRole defined by the server App in order to support legacy, AppID-based association.\n\t- An App may need memberships in AppRoles defined by the server App in order to authorize access that OAuth trust enables.\n       \nIn theory, Oracle Identity Cloud Service could also support a Grant-to-App of another App that does not specify an AppRole defined by that other App.\n\nNote that fulfillment of a Grant-to-App does not record the grantee App as a member of the AppRole.  Instead, fulfillment records the granted AppRole) in the grantedAppRoles attribute of the grantee App.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for all grants of a specific approle to a specific app",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"User\",\r\n         \"value\": \"{{userID}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appID}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_USER\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants?filter=grantee[value eq \"{{clientappid}}\" and type eq \"App\"] and entitlement[attributeName eq \"appRoles\" and attributeValue eq \"{{approleid}}\"]",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									],
									"query": [
										{
											"key": "filter",
											"value": "grantee[value eq \"{{clientappid}}\" and type eq \"App\"] and entitlement[attributeName eq \"appRoles\" and attributeValue eq \"{{approleid}}\"]"
										}
									]
								},
								"description": "Search to see if a client was granted a specific AppRole. Because we want details of the grant, we must query Grants to that Client (App).\n\n---\nA Grant that specifies as grantee a particular App (and usually a particular AppRole defined by that App) allows that grantee App (Client) to access the resources of the granted App. \n\n- Oracle Identity Cloud Service supports currently only Grant-to-App of an AppRole defined by another App:\n\n\t- An App needs membership in at least one AppRole defined by the server App in order to support legacy, AppID-based association.\n\t- An App may need memberships in AppRoles defined by the server App in order to authorize access that OAuth trust enables.\n       \nIn theory, Oracle Identity Cloud Service could also support a Grant-to-App of another App that does not specify an AppRole defined by that other App.\n\nNote that fulfillment of a Grant-to-App does not record the grantee App as a member of the AppRole.  Instead, fulfillment records the granted AppRole) in the grantedAppRoles attribute of the grantee App.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for all grants of a specific app to any client app",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants?filter=grantee.type eq \"App\" and app.value eq \"{{appid}}\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									],
									"query": [
										{
											"key": "filter",
											"value": "grantee.type eq \"App\" and app.value eq \"{{appid}}\""
										}
									]
								},
								"description": "---\nA Grant that specifies as grantee a particular App (and usually a particular AppRole defined by that App) allows that grantee App (Client) to access the resources of the granted App. \n\n- Oracle Identity Cloud Service supports currently only Grant-to-App of an AppRole defined by another App:\n\n\t- An App needs membership in at least one AppRole defined by the server App in order to support legacy, AppID-based association.\n\t- An App may need memberships in AppRoles defined by the server App in order to authorize access that OAuth trust enables.\n       \nIn theory, Oracle Identity Cloud Service could also support a Grant-to-App of another App that does not specify an AppRole defined by that other App.\n\nNote that fulfillment of a Grant-to-App does not record the grantee App as a member of the AppRole.  Instead, fulfillment records the granted AppRole) in the grantedAppRoles attribute of the grantee App.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for all grants of a specific approle to any client app",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants?filter=grantee.type eq \"App\" and entitlement[attributeName eq \"appRoles\" and attributeValue eq \"{{approleid}}\"]",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									],
									"query": [
										{
											"key": "filter",
											"value": "grantee.type eq \"App\" and entitlement[attributeName eq \"appRoles\" and attributeValue eq \"{{approleid}}\"]"
										}
									]
								},
								"description": "---\nA Grant that specifies as grantee a particular App (and usually a particular AppRole defined by that App) allows that grantee App (Client) to access the resources of the granted App. \n\n- Oracle Identity Cloud Service supports currently only Grant-to-App of an AppRole defined by another App:\n\n\t- An App needs membership in at least one AppRole defined by the server App in order to support legacy, AppID-based association.\n\t- An App may need memberships in AppRoles defined by the server App in order to authorize access that OAuth trust enables.\n       \nIn theory, Oracle Identity Cloud Service could also support a Grant-to-App of another App that does not specify an AppRole defined by that other App.\n\nNote that fulfillment of a Grant-to-App does not record the grantee App as a member of the AppRole.  Instead, fulfillment records the granted AppRole) in the grantedAppRoles attribute of the grantee App.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for all grants of a specific app to any group",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants?filter=app.value eq \"{{appid}}\" and grantee.type eq \"Group\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									],
									"query": [
										{
											"key": "filter",
											"value": "app.value eq \"{{appid}}\" and grantee.type eq \"Group\""
										}
									]
								},
								"description": "There are two ways to do this:\n\n1. Request the \"grants\" attribute of the app\n2. Query Grants yourself\n\nQuerying Grants yourself using this query shows both direct and indirct Grants to Users because fulfillment expands any Grant to a Group into a Grant to each User who is a member of the Group.\n\n---\nA Grant that specifies as grantee a particular App (and usually a particular AppRole defined by that App) allows that grantee App (Client) to access the resources of the granted App. \n\n- Oracle Identity Cloud Service supports currently only Grant-to-App of an AppRole defined by another App:\n\n\t- An App needs membership in at least one AppRole defined by the server App in order to support legacy, AppID-based association.\n\t- An App may need memberships in AppRoles defined by the server App in order to authorize access that OAuth trust enables.\n       \nIn theory, Oracle Identity Cloud Service could also support a Grant-to-App of another App that does not specify an AppRole defined by that other App.\n\nNote that fulfillment of a Grant-to-App does not record the grantee App as a member of the AppRole.  Instead, fulfillment records the granted AppRole) in the grantedAppRoles attribute of the grantee App.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for all grants to a specific client app",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants?filter=grantee[value eq \"{{clientappid}}\" and type eq \"App\"]",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									],
									"query": [
										{
											"key": "filter",
											"value": "grantee[value eq \"{{clientappid}}\" and type eq \"App\"]"
										}
									]
								},
								"description": "There are two ways to do this:\n\n1. Request the \"grants\" attribute of the app\n2. Query Grants yourself\n\nIf you request the \"grants\" attribute of the App, it contains the essential data: the ID of the Grant, the ID of the grantee, the type of the grantee, the grantMechanism, and so on.\n\n---\nA Grant that specifies as grantee a particular App (and usually a particular AppRole defined by that App) allows that grantee App (Client) to access the resources of the granted App. \n\n- Oracle Identity Cloud Service supports currently only Grant-to-App of an AppRole defined by another App:\n\n\t- An App needs membership in at least one AppRole defined by the server App in order to support legacy, AppID-based association.\n\t- An App may need memberships in AppRoles defined by the server App in order to authorize access that OAuth trust enables.\n       \nIn theory, Oracle Identity Cloud Service could also support a Grant-to-App of another App that does not specify an AppRole defined by that other App.\n\nNote that fulfillment of a Grant-to-App does not record the grantee App as a member of the AppRole.  Instead, fulfillment records the granted AppRole) in the grantedAppRoles attribute of the grantee App.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "375d2034-fcef-4b92-b644-0a52171772f3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "103f6130-ab45-4c73-8e58-38773a5bd8cb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "695fb5c9-f361-45d4-b0a5-bfddc2f23533",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "24f141c0-b3ae-4162-9f2b-348536496e99",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "AppRoles",
			"description": "Any Oracle Identity Cloud Service App can define any number of AppRoles. Oracle Identity Cloud Service AppRoles are intended primarily for UnmanagedApps, but a ManagedApp can define AppRoles also. Each AppRole that an UnmanagedApp defines represents a particular job-function or a particular set of access-privileges within that App:\n\n- Oracle Identity Cloud Service maintains the members of each AppRole, but Oracle Identity Cloud Service doesn't know exactly what membership in that AppRole means.\n    \n- The target App, when accessed by a User, determines what privileges each of the User's AppRole-memberships confers.\n    \nAttributes. Each AppRole has several important characteristics:\n\n-(app): is defined by exactly one App.  This attribute is required. (Together with the value of displayName, the value of app uniquely identifies an AppRole.)\n-(displayName): has a user-friendly name that is unique only within that App. This attribute is required. -(Together with app, displayName uniquely identifies an AppRole.)\n-(members): has a list of Users and Groups to which the AppRole has been assigned. The default is null/empty.\n-(legacyGroupName): has a unique name to use when the AppRole is treated as Group for purposes of backward compatibility with Shared IDM (SIM). This is optional.\n-(adminRole): specifies whether membership in that AppRole confers administrative privilege within the App that defines the AppRole.  The default is false.\n-(availableToUsers): specifies whether the AppRole can be granted directly to an Oracle Identity Cloud Service User.  The default is true.\n-(availableToGroups): specifies whether the AppRole can be granted to an Oracle Identity Cloud Service Group. The default is true.\n-(availableToClients): specifies whether the AppRole can be granted directly to an Oracle Identity Cloud Service App. The default is true.\n\nMembership in an AppRole is an Entitlement. Membership in an AppRole confers access to (or confers some specific access-privilege within) the App that defines the AppRole.\n\nIn fact, membership in an AppRole is the only form of entitlement for an Unmanaged App. Beyond basic access, an UnmanagedApp can expose as entitlements only memberships in the Oracle Identity Cloud Service AppRoles that the UnmanagedApp defines:\n\n- Because an UnmanagedApp accepts the Oracle Identity Cloud Service User as a login-identity, there is no account (i.e., application-specific identity) to contain attribute-values that confer privilege. Instead, the Oracle Identity Cloud Service User's memberships in AppRoles of an App confer access to that App (and the App decides when accessed what privilege each membership actually confers).\n\nEach User lists its memberships in AppRoles.  The appRoles attribute of Oracle Identity Cloud Service User reports each User's memberships in Oracle Identity Cloud Service AppRoles.  (The values of this attribute are computed based on the values of each AppRole's members attribute that refer to that User.)  This is a useful convenience, since the Oracle Identity Cloud Service User's memberships in AppRoles are used to determine access-privileges, not only within IDCS but within any UnmanagedApp, including any OPCService App.\n\nOPCServices predefine AppRoles. An UnmanagedApp need not define any AppRole, but convention within Shared IDM dictates that an OPCService must define at least two AppRoles: one administrative role and one end-user role.  (Please see the sub-section \"OPCService App\" within the \"Concepts\" section above.  Please see also the sub-section entitled \"By isOPCService\" within the \"Taxonomy\" section below.)  Some OPCServices define more than two AppRoles.  The PSM blueprint for each service-type specifies the set of AppRoles that should be created automatically for each instance of that service that is provisioned. (Please see the sub-section entitled \"OPCServiceAppTemplate and PSM Blueprint\" within the \"Concepts\" section above.)\n\nAdministrators grant AppRoles. A customer's administrator can grant/revoke AppRoles to/from Users, Groups and other Apps.  (Please see the section entitled \"Grants\".)\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups.",
			"item": [
				{
					"name": "Search",
					"description": "There are two ways to query the AppRoles defined by a specific App:\n\n1. Look on the App. As a convenience, two attributes of App refer to the AppRoles defined by that App: userRoles and adminRoles.\n\tEach value of adminRoles refers to an AppRole defined by that App in which adminRole:true\n\tEach value of userRoles refers to an AppRole defined by that App in which adminRole: false\n2. Search AppRoles filtering on any attribute that refers to the defining App:\n\tfilter=app.value eq \"{{appid}}\"\n\tfilter-app.display eq \"{{displayNameofApp}}\"\n\tfilter=app.serviceInstanceIdentifier eq \"{{serviceInstanceIdentifierofApp}}\"\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups.",
					"item": [
						{
							"name": "Search all approles",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/AppRoles",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"AppRoles"
									]
								},
								"description": "Search for all AppRoles.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for all approles defined by a specific app",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/AppRoles?filter=app.value eq \"{{appid}}\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"AppRoles"
									],
									"query": [
										{
											"key": "filter",
											"value": "app.value eq \"{{appid}}\""
										}
									]
								},
								"description": "Get all AppRoles for a specific App.\n\n- App defines AppRoles.\n- App can be granted AppRoles.\n- When an App accesses another App, even as an OAuthClient, the client's grantedAppRoles determine the client's functional permissions to consume resources of the producing App.\n\nThere are two ways to query the AppRoles defined by a particular App:\n\n- Look on the App. As a convenience, two attributes of App refer to the AppRoles defined by that App: userRoles and adminRoles.\n    - attributes=\"userRoles,adminRoles\"\n    - Each value of adminRoles refers to an AppRole defined by that App in which adminRole:true.\n    - Each value of userRoles refers to an AppRole defined by that App in which adminRole:false.\n- Search AppRoles filtering on any attribute that refers to the defining App\n    - filter=app.value eq \"<idOfApp>\n    - filter=app.display eq \"<displayNameOfApp>\"\n    - filter=app.serviceInstanceIdentifier eq \"<serviceInstanceIdentifierOfApp>\"\n    - filter=app.name eq \"<oauthClientIdOfApp>\"\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for all admin approles defined by a specific app",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/AppRoles?filter=app.value eq \"{{appid}}\" and adminRole eq true",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"AppRoles"
									],
									"query": [
										{
											"key": "filter",
											"value": "app.value eq \"{{appid}}\" and adminRole eq true"
										}
									]
								},
								"description": "Get all admin AppRoles defined by a specific App.\n\n- App defines AppRoles.\n- App can be granted AppRoles.\n- When an App accesses another App, even as an OAuthClient, the client's grantedAppRoles determine the client's functional permissions to consume resources of the producing App.\n\nThere are two ways to query the AppRoles defined by a particular App:\n\n- Look on the App. As a convenience, two attributes of App refer to the AppRoles defined by that App: userRoles and adminRoles.\n    - attributes=\"userRoles,adminRoles\"\n    - Each value of adminRoles refers to an AppRole defined by that App in which adminRole:true.\n    - Each value of userRoles refers to an AppRole defined by that App in which adminRole:false.\n- Search AppRoles filtering on any attribute that refers to the defining App\n    - filter=app.value eq \"<idOfApp>\n    - filter=app.display eq \"<displayNameOfApp>\"\n    - filter=app.serviceInstanceIdentifier eq \"<serviceInstanceIdentifierOfApp>\"\n    - filter=app.name eq \"<oauthClientIdOfApp>\"\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for all user approles defind by a specific app",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/AppRoles?filter=app.value eq \"{{appid}}\" and adminRole eq false",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"AppRoles"
									],
									"query": [
										{
											"key": "filter",
											"value": "app.value eq \"{{appid}}\" and adminRole eq false"
										}
									]
								},
								"description": "Get all admin AppRoles defind by a specific App.\n\n- App defines AppRoles.\n- App can be granted AppRoles.\n- When an App accesses another App, even as an OAuthClient, the client's grantedAppRoles determine the client's functional permissions to consume resources of the producing App.\n\nThere are two ways to query the AppRoles defined by a particular App:\n\n- Look on the App. As a convenience, two attributes of App refer to the AppRoles defined by that App: userRoles and adminRoles.\n    - attributes=\"userRoles,adminRoles\"\n    - Each value of adminRoles refers to an AppRole defined by that App in which adminRole:true.\n    - Each value of userRoles refers to an AppRole defined by that App in which adminRole:false.\n- Search AppRoles filtering on any attribute that refers to the defining App\n    - filter=app.value eq \"<idOfApp>\n    - filter=app.display eq \"<displayNameOfApp>\"\n    - filter=app.serviceInstanceIdentifier eq \"<serviceInstanceIdentifierOfApp>\"\n    - filter=app.name eq \"<oauthClientIdOfApp>\"\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Get details of a specific approle",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/AppRoles/{{approleid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"AppRoles",
										"{{approleid}}"
									]
								},
								"description": "Get all details of a specific AppRole.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for all direct members of a specific approle",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/AppRoles/{{approleid}}?attributes=members",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"AppRoles",
										"{{approleid}}"
									],
									"query": [
										{
											"key": "attributes",
											"value": "members"
										}
									]
								},
								"description": "List all direct members of a specific AppRole (Users or Groups).\n\nAn App (and optionally any of the AppRoles it defines) can be granted to a User in two ways:\n\n- Directly, when the Grant specifies as grantee a particular User\n- Indirectly, when a Grant specifies as grantee a particular Group (of which the User is or becomes a member)\n\nGrants to Users directly\n\nWhen Grant specifies as grantee a particular User, that Grant doesn't depend on a User's group-memberships.\n\nOracle Identity Cloud Service records that User as having access:\n\n- As soon as the first Grant of an App is fulfilled, and\n- As long as at least one Grant of that App to that User exists.\n\nGrants to Groups\nA Grant that specifies as grantee a particular Group implies conditional access for each User member of that Group.\n\nWe call this an indirect grant to User, because the direct Grant-to-Group produces and maintains a Grant-to-User per member.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for all direct members of a specific approle that are users",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/AppRoles/{{approleid}}?attributes=members[type eq \"User\"]",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"AppRoles",
										"{{approleid}}"
									],
									"query": [
										{
											"key": "attributes",
											"value": "members[type eq \"User\"]"
										}
									]
								},
								"description": "List all direct members of a specific AppRole that are Users.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for all direct members of a specific approle that are groups",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/AppRoles/{{approleid}}?attributes=members[type eq \"Group\"]",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"AppRoles",
										"{{approleid}}"
									],
									"query": [
										{
											"key": "attributes",
											"value": "members[type eq \"Group\"]"
										}
									]
								},
								"description": "List all direct memebers of a specific AppRole that are Groups.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Is a specific group a direct member of a specific approle?",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/AppRoles/{{approleid}}?attributes=members[value eq \"{{groupid}}\" and type eq \"Group\"]",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"AppRoles",
										"{{approleid}}"
									],
									"query": [
										{
											"key": "attributes",
											"value": "members[value eq \"{{groupid}}\" and type eq \"Group\"]"
										}
									]
								},
								"description": "Search to see if a specific Group is a direct member of a specific AppRole.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for all approles that have a specific group as a direct member",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/AppRoles?filter=members[value eq \"{{groupid}}\" and type eq \"Group\"]",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"AppRoles"
									],
									"query": [
										{
											"key": "filter",
											"value": "members[value eq \"{{groupid}}\" and type eq \"Group\"]"
										}
									]
								},
								"description": "Search for AppRoles that a specific Group is a direct member.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Is a specific user a direct member of a specific approle?",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/AppRoles/{{approleid}}?attributes=members[value eq \"{{userid}}\" and type eq \"User\"]",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"AppRoles",
										"{{approleid}}"
									],
									"query": [
										{
											"key": "attributes",
											"value": "members[value eq \"{{userid}}\" and type eq \"User\"]"
										}
									]
								},
								"description": "Search to see if a specific User is a direct member of a specific AppRole.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for approles that a user is a direct member",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/AppRoles?filter=members[value eq \"{{userid}}\" and type eq \"User\"]",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"AppRoles"
									],
									"query": [
										{
											"key": "filter",
											"value": "members[value eq \"{{userid}}\" and type eq \"User\"]"
										}
									]
								},
								"description": "Search for AppRoles that a specific User is a direct member.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "044a0641-0ec0-4927-a2e6-7119bb021320",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "866fc418-3833-4858-b107-85328559a922",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Create",
					"description": "Request examples to create AppRoles for your Apps.",
					"item": [
						{
							"name": "Create an approle",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayName\": \"AR Admin Role\",\r\n  \"adminRole\": true,\r\n  \"description\": \"Admin Role of HR App\",\r\n  \"public\": false,\r\n  \"app\": {\r\n    \"value\": \"5935ab53557d407d9e3cfc4ec5586a30\"\r\n  },\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:AppRole\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/AppRoles",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"AppRoles"
									]
								},
								"description": "Create an AppRole. \n\nNote: The attribute \"isUnmanaged\" must be set to true when the App is created.\n\nThis attribue is immutable after the application is created.\n\nYou can't manage AppRoles for an App where \"isUnmanaged\" is set to false.\n\nAlso, the \"isManaged\" attribute can't be set to true when \"isUnmanaged\" is also set to true. A validation error occurs.\n"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Modify",
					"description": "",
					"item": [
						{
							"name": "Update an AppRole",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\r\n  ],\r\n  \"Operations\": [\r\n  \t{\r\n      \"op\": \"replace\",\r\n      \"path\": \"description\",\r\n      \"value\": \"The Admin AppRole for the Human Resources Portal\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/AppRoles/{{appRoleID}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"AppRoles",
										"{{appRoleID}}"
									]
								},
								"description": "Update an attribute for the AppRole.\n\nNote: The attribute \"isUnmanaged\" must be set to true when the App is created.\n\nThis attribue is immutable after the application is created.\n\nYou can't manage AppRoles for an App where \"isUnmanaged\" is set to false.\n\nAlso, the \"isManaged\" attribute can't be set to true when \"isUnmanaged\" is also set to true. A validation error occurs.\n"
							},
							"response": []
						},
						{
							"name": "Delete a custom approle",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/AppRoles/{{appRoleID}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"AppRoles",
										"{{appRoleID}}"
									]
								},
								"description": "Delete a custom AppRole. \n\nYou can't delete a seeded AppRole: AppServices creates these with 'idcsPreventedOperations:[update, replace, delete]'."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Grants",
					"description": "A Grant says that someone (the grantor) says that someone (a grantee) should have something (access to an App), and optionally an entitlement within that App.\r\n\r\n- The grantor is typically an Administrator (but could also be some component of the system).\r\n- The grantee is typically a User, but could also be a Group or another App.\r\n- The granted App may be accompanied by an entitlement defined by that App.\r\n  - In general, an entitlement can be any specific value of any specific attribute of the App-specific identity.\r\n  (A ManagedApp has its own identity repository, so it defines the attributes for its own identities.)\r\n  - One special case of an entitlement is membership in an AppRole defined by the App.\r\n    (Granting an AppRole defined by the App necessarily grants access to the App.)\r\n\r\n\r\nAn administrator can grant (give) or revoke (take away) access to an App (either basic access or a specific entitlement within an App) to/from Users, Groups and other Apps:\r\n\r\n-Creating a Grant gives the specified App-Entitlement to the specified grantee (unless the grantee already has that App-Entitlement, in which case the Grant is redundant).\r\n\r\n-Deleting a Grant removes the specified App-Entitlement from the specified grantee (unless another Grant gives that same App-Entitlement to that same grantee).\r\n\r\nEach Grant records an administrator's decision to give a particular App (or a particular entitlement of a particular App) to a particular User or Group or App.\r\n\r\n-If the grantee is a User, then that User will have access to that App.  We call this a direct Grant.\r\n-If the grantee is a Group, then each User who is a member of that Group will have access to that App.  We call this an indirect Grant.\r\n-If the grantee is an App, that that grantee (App) will have access to the (granted) App.  This is used in service-associations, for example. (Note: A grant to an App is always direct, because an App can't be a member of a Group.)\r\n\r\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups.",
					"item": [
						{
							"name": "Revoke an AppRole from a Client",
							"description": "Revoke an AppRole from a Client.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups.",
							"item": [
								{
									"name": "Step 1: Get all grants of the specified approle to the client",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"User\",\r\n         \"value\": \"{{userID}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appID}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_USER\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Grants?filter=grantee[value eq \"{{clientappid}}\" and type eq \"App\"] and entitlement[attributeName eq \"appRoles\" and attributeValue eq \"{{approleid}}\"]",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Grants"
											],
											"query": [
												{
													"key": "filter",
													"value": "grantee[value eq \"{{clientappid}}\" and type eq \"App\"] and entitlement[attributeName eq \"appRoles\" and attributeValue eq \"{{approleid}}\"]"
												}
											]
										},
										"description": "Get all direct Grants for a Client to obtain the IDs for the Grants that you want to revoke from the Client.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
									},
									"response": []
								},
								{
									"name": "Step 2: Delete each grant",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Grants/{{grantid}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Grants",
												"{{grantid}}"
											]
										},
										"description": "See https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "91f44eef-6318-408f-a2da-ba50b9565177",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "708a61f9-ca07-468a-9ae3-06dfb162cf26",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Search all grants of a specific approle",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants?filter=entitlement[attributeName eq \"appRoles\" and attributeValue eq \"{{approleid}}\"] ",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									],
									"query": [
										{
											"key": "filter",
											"value": "entitlement[attributeName eq \"appRoles\" and attributeValue eq \"{{approleid}}\"] "
										}
									]
								},
								"description": "A Grant of an AppRole specifies as the granted 'app' the App that defines the AppRole, and specifies the AppRole as an entitlement.\n\nThere is only one way to query grants of AppRoles:\n\n    by searching /Grants directly, e.g.,:\n        To search for Grants of a particular AppRole, filter on entitlement:\n            filter=entitlement[attributeName eq \"appRoles\" and value eq \"<idOfAppRole>\"]\n        To search for Grants of any AppRole defined by a particular App:\n            filter=app.value eq \"<idOfApp>\" and entitlement.attributeName eq \"appRoles\"\n        To search for Grants of any of several particular AppRoles:\n            filter=entitlement[attributeName eq \"appRoles\" and (value eq \"<idOfAppRole1>\" or value eq \"<idOfAppRole2>\"... or value eq \"<idOfAppRoleN>\")]\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search all grants of a specific approle to any user",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants?filter=entitlement[attributeName eq \"appRoles\" and attributeValue eq \"{{approleid}}\"] ",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									],
									"query": [
										{
											"key": "filter",
											"value": "entitlement[attributeName eq \"appRoles\" and attributeValue eq \"{{approleid}}\"] "
										}
									]
								},
								"description": "A Grant of an AppRole specifies as the granted 'app' the App that defines the AppRole, and specifies the AppRole as an entitlement.\n\nThere is only one way to query grants of AppRoles:\n\n    by searching /Grants directly, e.g.,:\n        To search for Grants of a particular AppRole, filter on entitlement:\n            filter=entitlement[attributeName eq \"appRoles\" and value eq \"<idOfAppRole>\"]\n        To search for Grants of any AppRole defined by a particular App:\n            filter=app.value eq \"<idOfApp>\" and entitlement.attributeName eq \"appRoles\"\n        To search for Grants of any of several particular AppRoles:\n            filter=entitlement[attributeName eq \"appRoles\" and (value eq \"<idOfAppRole1>\" or value eq \"<idOfAppRole2>\"... or value eq \"<idOfAppRoleN>\")]\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search all grants of a specific approle to any group",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants?filter=entitlement[attributeName eq \"appRoles\" and attributeValue eq \"{{approleid}}\"] and grantee.type eq \"Group\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									],
									"query": [
										{
											"key": "filter",
											"value": "entitlement[attributeName eq \"appRoles\" and attributeValue eq \"{{approleid}}\"] and grantee.type eq \"Group\""
										}
									]
								},
								"description": "A Grant of an AppRole specifies as the granted 'app' the App that defines the AppRole, and specifies the AppRole as an entitlement.\n\nThere is only one way to query grants of AppRoles:\n\n    by searching /Grants directly, e.g.,:\n        To search for Grants of a particular AppRole, filter on entitlement:\n            filter=entitlement[attributeName eq \"appRoles\" and value eq \"<idOfAppRole>\"]\n        To search for Grants of any AppRole defined by a particular App:\n            filter=app.value eq \"<idOfApp>\" and entitlement.attributeName eq \"appRoles\"\n        To search for Grants of any of several particular AppRoles:\n            filter=entitlement[attributeName eq \"appRoles\" and (value eq \"<idOfAppRole1>\" or value eq \"<idOfAppRole2>\"... or value eq \"<idOfAppRoleN>\")]\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Grant an approle to an app",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"App\",\r\n         \"value\": \"{{clientappid}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appid}}\"\r\n    },\r\n    \"entitlement\" : {\r\n        \"attributeName\": \"appRoles\",\r\n        \"attributeValue\": \"{{approleid}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_APP\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									]
								},
								"description": "Grants access to a specific AppRole for a specific App. You must specify the AppRole in the payload after \"app\" when granting an AppRole to an App.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2a5c6e5f-c870-4140-a9d1-db7438d5c013",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1ab686fc-6479-4da1-900b-a2d2983d4ced",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "fdb6b579-7c90-4a0e-b184-1a1d3776cdd5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7f55185e-7dab-4e36-b443-e04e4bc6f61d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Audit Events",
			"description": "Creating requests for Audit events",
			"item": [
				{
					"name": "Search all audit events",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{HOST}}/admin/v1/AuditEvents?filter=actorName sw \"adm\"",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"admin",
								"v1",
								"AuditEvents"
							],
							"query": [
								{
									"key": "filter",
									"value": "actorName sw \"adm\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search all audit events using POST",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"schemas\": [\r\n\t\t\"urn:ietf:params:scim:api:messages:2.0:SearchRequest\"\r\n\t],\r\n\t\"attributes\": [\r\n\t\t\"actorName\"\r\n\t],\r\n\t\"filter\": \"actorName sw \\\"admin\\\"\",\r\n\t\"startIndex\": 1,\r\n\t\"count\": 5\r\n}"
						},
						"url": {
							"raw": "{{HOST}}/admin/v1/AuditEvents/.search",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"admin",
								"v1",
								"AuditEvents",
								".search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search all audit events by date range",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{HOST}}/admin/v1/AuditEvents?sortBy=timestamp&sortOrder=descending&filter=timestamp ge \"2017-07-18T00:00:00Z\" and timestamp le \"2017-07-19T00:00:00Z\"",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"admin",
								"v1",
								"AuditEvents"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "timestamp"
								},
								{
									"key": "sortOrder",
									"value": "descending"
								},
								{
									"key": "filter",
									"value": "timestamp ge \"2017-07-18T00:00:00Z\" and timestamp le \"2017-07-19T00:00:00Z\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search all audit events to obtain total number of records",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{HOST}}/admin/v1/AuditEvents?sortBy=timestamp&sortOrder=descending&filter=timestamp ge \"2017-07-18T00:00:00Z\" and timestamp le \"2017-07-19T00:00:00Z\"&count=0",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"admin",
								"v1",
								"AuditEvents"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "timestamp"
								},
								{
									"key": "sortOrder",
									"value": "descending"
								},
								{
									"key": "filter",
									"value": "timestamp ge \"2017-07-18T00:00:00Z\" and timestamp le \"2017-07-19T00:00:00Z\""
								},
								{
									"key": "count",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search all audit events using the count parameter",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{HOST}}/admin/v1/AuditEvents?sortBy=timestamp&sortOrder=descending&filter=timestamp ge \"2017-07-18T00:00:00Z\" and timestamp le \"2017-07-19T00:00:00Z\"&count=4",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"admin",
								"v1",
								"AuditEvents"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "timestamp"
								},
								{
									"key": "sortOrder",
									"value": "descending"
								},
								{
									"key": "filter",
									"value": "timestamp ge \"2017-07-18T00:00:00Z\" and timestamp le \"2017-07-19T00:00:00Z\""
								},
								{
									"key": "count",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search all audit events using the startIndex parameter",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{HOST}}/admin/v1/AuditEvents?sortBy=timestamp&sortOrder=descending&filter=timestamp ge \"2017-07-18T00:00:00Z\" and timestamp le \"2017-07-19T00:00:00Z\"&startIndex=4",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"admin",
								"v1",
								"AuditEvents"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "timestamp"
								},
								{
									"key": "sortOrder",
									"value": "descending"
								},
								{
									"key": "filter",
									"value": "timestamp ge \"2017-07-18T00:00:00Z\" and timestamp le \"2017-07-19T00:00:00Z\""
								},
								{
									"key": "startIndex",
									"value": "4"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Bulk",
			"description": "",
			"item": [
				{
					"name": "Import & Export AppRoles",
					"description": "",
					"item": [
						{
							"name": "Schedule a job - export AppRoles - resource specific",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Cache-Control",
										"value": "no-cache"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\"urn:ietf:params:scim:schemas:oracle:idcs:JobSchedule\"],\r\n  \"jobType\": \"AppRoleExport\",\r\n  \"runNow\": true,\r\n  \"parameters\": [\r\n    {\r\n      \"name\": \"exportFormat\",\r\n      \"value\": \"CSV\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/job/v1/JobSchedules",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"job",
										"v1",
										"JobSchedules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Schedule a Job - export AppRoles - generic",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Cache-Control",
										"value": "no-cache"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\"urn:ietf:params:scim:schemas:oracle:idcs:JobSchedule\"],\r\n  \"jobType\": \"Export\",\r\n  \"runNow\": true,\r\n  \"parameters\": [\r\n    {\r\n      \"name\": \"exportFormat\",\r\n      \"value\": \"CSV\"\r\n    },\r\n    {\r\n      \"name\": \"resourceType\",\r\n      \"value\": \"AppRole\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/job/v1/JobSchedules",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"job",
										"v1",
										"JobSchedules"
									]
								}
							},
							"response": []
						},
						{
							"name": "View the export job details",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/job/v1/JobHistories?filter=jobScheduleid eq \"{{jobScheduleid}}\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"job",
										"v1",
										"JobHistories"
									],
									"query": [
										{
											"key": "filter",
											"value": "jobScheduleid eq \"{{jobScheduleid}}\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "View the export job report",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/job/v1/JobReports?filter=historyId eq \"{{historyId}}\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"job",
										"v1",
										"JobReports"
									],
									"query": [
										{
											"key": "filter",
											"value": "historyId eq \"{{historyId}}\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify export job success - AppRoles",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									},
									{
										"key": "Cache-Control",
										"value": "no-cache"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/storage/v1/Files?fileName=files/export/201706230520/{{filename}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"storage",
										"v1",
										"Files"
									],
									"query": [
										{
											"key": "fileName",
											"value": "files/export/201706230520/{{filename}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Import a file to storage",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									},
									{
										"key": "Cache-Control",
										"value": "no-cache"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "contentType",
											"value": "text/csv",
											"description": "",
											"type": "text"
										},
										{
											"key": "file",
											"description": "",
											"type": "file",
											"src": "AppRoleMembership.csv",
											"value": ""
										},
										{
											"key": "fileName",
											"value": "AppRoleMembershipImp1.csv",
											"description": "",
											"type": "text"
										},
										{
											"key": "isPublic",
											"value": "false",
											"description": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{HOST}}/storage/v1/Files",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"storage",
										"v1",
										"Files"
									]
								}
							},
							"response": []
						},
						{
							"name": "Schedule a job - import bulk AppRoles - resource specific",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Cache-Control",
										"value": "no-cache"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"schemas\": [\r\n     \"urn:ietf:params:scim:schemas:oracle:idcs:JobSchedule\"\r\n   ],\r\n  \"jobType\": \"AppRoleImport\",\r\n   \"runNow\": true,\r\n   \"parameters\": [\r\n    {\r\n      \"name\": \"fileLocation\",\r\n      \"value\": \"files/201707052216/AppRoleMembershipImp1.csv\"\r\n     },\r\n    {\r\n       \"name\": \"fileType\",\r\n       \"value\": \"csv\"\r\n     },\r\n     {\r\n     \t\"name\" : \"appDisplayName\",\r\n     \t\"value\" : \"MyApp\"\r\n     }\r\n     ]\r\n }"
								},
								"url": {
									"raw": "{{HOST}}/job/v1/JobSchedules",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"job",
										"v1",
										"JobSchedules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Schedule a job - import bulk AppRoles - generic",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Cache-Control",
										"value": "no-cache"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:JobSchedule\"\r\n  ],\r\n  \"jobType\": \"Import\",\r\n  \"runNow\": true,\r\n  \"parameters\": [\r\n    {\r\n      \"name\": \"fileLocation\",\r\n      \"value\": \"files/201707052222/AppRoleMembershipImp1.csv\"\r\n    },\r\n    {\r\n      \"name\": \"fileType\",\r\n      \"value\": \"csv\"\r\n    },\r\n    {\r\n      \"name\": \"resourceType\",\r\n      \"value\": \"Grant\"\r\n    },\r\n    {\r\n       \"name\": \"appDisplayName\",\r\n       \"value\": \"MyApp\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/job/v1/JobSchedules",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"job",
										"v1",
										"JobSchedules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify job success - AppRoles",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/job/v1/JobHistories?filter=jobScheduleid eq \"{{jobScheduleid}}\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"job",
										"v1",
										"JobHistories"
									],
									"query": [
										{
											"key": "filter",
											"value": "jobScheduleid eq \"{{jobScheduleid}}\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Review the job report",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Cache-Control",
										"value": "no-cache"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/job/v1/JobReports?filter=historyId eq \"{{historyId}}\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"job",
										"v1",
										"JobReports"
									],
									"query": [
										{
											"key": "filter",
											"value": "historyId eq \"{{historyId}}\""
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Import & Export Groups",
					"description": "",
					"item": [
						{
							"name": "Schedule a job - export bulk groups - resource specific",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/scim+json"
									},
									{
										"key": "Cache-Control",
										"value": "no-cache"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\"urn:ietf:params:scim:schemas:oracle:idcs:JobSchedule\"],\r\n  \"jobType\": \"GroupExport\",\r\n  \"runNow\": true,\r\n  \"parameters\": [\r\n    {\r\n      \"name\": \"exportFormat\",\r\n      \"value\": \"CSV\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/job/v1/JobSchedules",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"job",
										"v1",
										"JobSchedules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Schedule a job - export bulk groups - generic",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/scim+json"
									},
									{
										"key": "Cache-Control",
										"value": "no-cache"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\"urn:ietf:params:scim:schemas:oracle:idcs:JobSchedule\"],\r\n  \"jobType\": \"Export\",\r\n  \"runNow\": true,\r\n  \"parameters\": [\r\n    {\r\n      \"name\": \"exportFormat\",\r\n      \"value\": \"CSV\"\r\n    },\r\n    {\r\n      \"name\": \"resourceType\",\r\n      \"value\": \"Group\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/job/v1/JobSchedules",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"job",
										"v1",
										"JobSchedules"
									]
								}
							},
							"response": []
						},
						{
							"name": "View the export job details",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/job/v1/JobHistories?filter=jobScheduleid eq \"{{jobScheduleid}}\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"job",
										"v1",
										"JobHistories"
									],
									"query": [
										{
											"key": "filter",
											"value": "jobScheduleid eq \"{{jobScheduleid}}\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "View the export job report",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/job/v1/JobReports?filter=historyId eq \"{{historyId}}\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"job",
										"v1",
										"JobReports"
									],
									"query": [
										{
											"key": "filter",
											"value": "historyId eq \"{{historyId}}\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify export job success - groups",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									},
									{
										"key": "Cache-Control",
										"value": "no-cache"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/storage/v1/Files?fileName=files/export/201706230532/{{filename}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"storage",
										"v1",
										"Files"
									],
									"query": [
										{
											"key": "fileName",
											"value": "files/export/201706230532/{{filename}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Import a file to storage",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									},
									{
										"key": "Cache-Control",
										"value": "no-cache"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "contentType",
											"value": "text/csv",
											"description": "",
											"type": "text"
										},
										{
											"key": "file",
											"description": "",
											"type": "file",
											"src": "Users.csv",
											"value": ""
										},
										{
											"key": "fileName",
											"value": "Groups.csv",
											"description": "",
											"type": "text"
										},
										{
											"key": "isPublic",
											"value": "false",
											"description": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{HOST}}/storage/v1/Files",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"storage",
										"v1",
										"Files"
									]
								}
							},
							"response": []
						},
						{
							"name": "Schedule a job - import bulk groups - resource specific",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Cache-Control",
										"value": "no-cache"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"schemas\": [\r\n     \"urn:ietf:params:scim:schemas:oracle:idcs:JobSchedule\"\r\n   ],\r\n  \"jobType\": \"GroupImport\",\r\n   \"runNow\": true,\r\n   \"parameters\": [\r\n    {\r\n      \"name\": \"fileLocation\",\r\n      \"value\": \"files/201706280818/Groups.csv\"\r\n     },\r\n    {\r\n       \"name\": \"fileType\",\r\n       \"value\": \"csv\"\r\n     }\r\n   ]\r\n }"
								},
								"url": {
									"raw": "{{HOST}}/job/v1/JobSchedules",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"job",
										"v1",
										"JobSchedules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Schedule a job - import bulk groups - generic",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Cache-Control",
										"value": "no-cache"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:JobSchedule\"\r\n  ],\r\n  \"jobType\": \"Import\",\r\n  \"runNow\": true,\r\n  \"parameters\": [\r\n    {\r\n      \"name\": \"fileLocation\",\r\n      \"value\": \"files/201706281244/Groups.csv\"\r\n    },\r\n    {\r\n      \"name\": \"fileType\",\r\n      \"value\": \"csv\"\r\n    },\r\n    {\r\n      \"name\": \"resourceType\",\r\n      \"value\": \"Group\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/job/v1/JobSchedules",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"job",
										"v1",
										"JobSchedules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify job success - groups",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/job/v1/JobHistories?filter=jobScheduleid eq \"{{jobScheduleid}}\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"job",
										"v1",
										"JobHistories"
									],
									"query": [
										{
											"key": "filter",
											"value": "jobScheduleid eq \"{{jobScheduleid}}\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Review the job report",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Cache-Control",
										"value": "no-cache"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/job/v1/JobReports?filter=historyId eq \"{{historyId}}\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"job",
										"v1",
										"JobReports"
									],
									"query": [
										{
											"key": "filter",
											"value": "historyId eq \"{{historyId}}\""
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Import & Export Users",
					"description": "",
					"item": [
						{
							"name": "Schedule a job - export bulk users - resource specific",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/scim+json"
									},
									{
										"key": "Cache-Control",
										"value": "no-cache"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\"urn:ietf:params:scim:schemas:oracle:idcs:JobSchedule\"],\r\n  \"jobType\": \"UserExport\",\r\n  \"runNow\": true,\r\n  \"parameters\": [\r\n    {\r\n      \"name\": \"exportFormat\",\r\n      \"value\": \"CSV\"\r\n    },\r\n    {\r\n      \"name\": \"attributesToExclude\",\r\n      \"value\": \"userName, profileUrl\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/job/v1/JobSchedules",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"job",
										"v1",
										"JobSchedules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Schedule a job - export bulk users - generic",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/scim+json"
									},
									{
										"key": "Cache-Control",
										"value": "no-cache"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\"urn:ietf:params:scim:schemas:oracle:idcs:JobSchedule\"],\r\n  \"jobType\": \"Export\",\r\n  \"runNow\": true,\r\n  \"parameters\": [\r\n    {\r\n      \"name\": \"exportFormat\",\r\n      \"value\": \"CSV\"\r\n    },\r\n    {\r\n      \"name\": \"attributesToExclude\",\r\n      \"value\": \"userName, profileUrl\"\r\n    },\r\n    {\r\n      \"name\": \"resourceType\",\r\n      \"value\": \"User\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/job/v1/JobSchedules",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"job",
										"v1",
										"JobSchedules"
									]
								}
							},
							"response": []
						},
						{
							"name": "View the export job details",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/job/v1/JobHistories?filter=jobScheduleid eq \"{{jobScheduleid}}\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"job",
										"v1",
										"JobHistories"
									],
									"query": [
										{
											"key": "filter",
											"value": "jobScheduleid eq \"{{jobScheduleid}}\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "View the export job report",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/job/v1/JobReports?filter=historyId eq \"{{historyId}}\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"job",
										"v1",
										"JobReports"
									],
									"query": [
										{
											"key": "filter",
											"value": "historyId eq \"{{historyId}}\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify export job success - users",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									},
									{
										"key": "Cache-Control",
										"value": "no-cache"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/storage/v1/Files?fileName=files/export/201706281256/{{filename}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"storage",
										"v1",
										"Files"
									],
									"query": [
										{
											"key": "fileName",
											"value": "files/export/201706281256/{{filename}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Import a file to storage",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									},
									{
										"key": "Cache-Control",
										"value": "no-cache"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "contentType",
											"value": "text/csv",
											"description": "",
											"type": "text"
										},
										{
											"key": "file",
											"description": "",
											"type": "file",
											"src": "Users.csv",
											"value": ""
										},
										{
											"key": "fileName",
											"value": "Users.csv",
											"description": "",
											"type": "text"
										},
										{
											"key": "isPublic",
											"value": "false",
											"description": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{HOST}}/storage/v1/Files",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"storage",
										"v1",
										"Files"
									]
								}
							},
							"response": []
						},
						{
							"name": "Schedule a job - import bulk users - resource specific",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Cache-Control",
										"value": "no-cache"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"schemas\": [\r\n     \"urn:ietf:params:scim:schemas:oracle:idcs:JobSchedule\"\r\n   ],\r\n  \"jobType\": \"UserImport\",\r\n   \"runNow\": true,\r\n   \"parameters\": [\r\n    {\r\n      \"name\": \"fileLocation\",\r\n      \"value\": \"files/201706280803/Users.csv\"\r\n     },\r\n    {\r\n       \"name\": \"fileType\",\r\n       \"value\": \"csv\"\r\n     }\r\n   ]\r\n }"
								},
								"url": {
									"raw": "{{HOST}}/job/v1/JobSchedules",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"job",
										"v1",
										"JobSchedules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Schedule a job - import bulk users - generic",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Cache-Control",
										"value": "no-cache"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:JobSchedule\"\r\n  ],\r\n  \"jobType\": \"Import\",\r\n  \"runNow\": true,\r\n  \"parameters\": [\r\n    {\r\n      \"name\": \"fileLocation\",\r\n      \"value\": \"files/201706281234/Users.csv\"\r\n    },\r\n    {\r\n      \"name\": \"fileType\",\r\n      \"value\": \"csv\"\r\n    },\r\n    {\r\n      \"name\": \"resourceType\",\r\n      \"value\": \"User\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/job/v1/JobSchedules",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"job",
										"v1",
										"JobSchedules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify job success - users",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/job/v1/JobHistories?filter=jobScheduleid eq \"{{jobScheduleid}}\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"job",
										"v1",
										"JobHistories"
									],
									"query": [
										{
											"key": "filter",
											"value": "jobScheduleid eq \"{{jobScheduleid}}\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Review the job report",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Cache-Control",
										"value": "no-cache"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/job/v1/JobReports?filter=historyId eq \"{{historyId}}\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"job",
										"v1",
										"JobReports"
									],
									"query": [
										{
											"key": "filter",
											"value": "historyId eq \"{{historyId}}\""
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Create users and groups in bulk",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:api:messages:2.0:BulkRequest\"\r\n  ],\r\n  \"Operations\": [\r\n    {\r\n      \"method\": \"POST\",\r\n      \"path\": \"/Users\",\r\n      \"bulkId\": \"id_user1\",\r\n      \"data\": {\r\n\t    \"schemas\": [\r\n\t      \"urn:ietf:params:scim:schemas:core:2.0:User\"\r\n\t    ],\r\n\t    \"name\": {\r\n\t  \t  \"givenName\": \"Xavier\",\r\n\t\t  \"familyName\": \"Hanel\"\r\n\t    },\r\n\t\t\"userName\": \"xhanel@example.com\",\r\n\t\t\"title\": \"Security Officer\",\r\n\t\t\"emails\": [\r\n\t\t  {\r\n\t\t    \"value\": \"xhanel@example.com\",\r\n\t\t    \"type\": \"work\",\r\n\t\t    \"primary\": true\r\n\t\t  },\r\n\t\t  {\r\n\t\t    \"value\": \"xhanel@example.com\",\r\n\t\t    \"primary\": false,\r\n\t\t    \"type\": \"recovery\"\r\n\t\t  }\r\n\t\t]\r\n      }\r\n    },\r\n    {\r\n      \"method\": \"POST\",\r\n      \"path\": \"/Users\",\r\n      \"bulkId\": \"id_user3\",\r\n      \"data\": {\r\n\t    \"schemas\": [\r\n\t      \"urn:ietf:params:scim:schemas:core:2.0:User\"\r\n\t    ],\r\n\t    \"name\": {\r\n\t  \t  \"givenName\": \"Ferdinand\",\r\n\t\t  \"familyName\": \"Redmilson\"\r\n\t    },\r\n\t\t\"userName\": \"fredmilson@example.com\",\r\n\t\t\"title\": \"GRC Reviewer\",\r\n\t\t\"emails\": [\r\n\t\t  {\r\n\t\t    \"value\": \"fredmilson@example.com\",\r\n\t\t    \"type\": \"work\",\r\n\t\t    \"primary\": true\r\n\t\t  },\r\n\t\t  {\r\n\t\t    \"value\": \"fredmilson@example.com\",\r\n\t\t    \"primary\": false,\r\n\t\t    \"type\": \"recovery\"\r\n\t\t  }\r\n\t\t]\r\n      }\r\n    },\r\n    {\r\n      \"method\": \"POST\",\r\n      \"path\": \"/Users\",\r\n      \"bulkId\": \"id_user2\",\r\n      \"data\": {\r\n\t    \"schemas\": [\r\n\t      \"urn:ietf:params:scim:schemas:core:2.0:User\"\r\n\t    ],\r\n\t    \"name\": {\r\n\t  \t  \"givenName\": \"Alfred\",\r\n\t\t  \"familyName\": \"Ahmlek\"\r\n\t    },\r\n\t\t\"userName\": \"aahmlek@example.com\",\r\n\t\t\"title\": \"Security Engineer\",\r\n\t\t\"emails\": [\r\n\t\t  {\r\n\t\t    \"value\": \"aahmlek@example.com\",\r\n\t\t    \"type\": \"work\",\r\n\t\t    \"primary\": true\r\n\t\t  },\r\n\t\t  {\r\n\t\t    \"value\": \"aahmlek@example.com\",\r\n\t\t    \"primary\": false,\r\n\t\t    \"type\": \"recovery\"\r\n\t\t  }\r\n\t\t]\r\n      }\r\n    },\r\n    {\r\n      \"method\": \"POST\",\r\n      \"path\": \"/Groups\",\r\n      \"bulkId\": \"id_group1\",\r\n      \"data\": {\r\n        \"schemas\": [\r\n          \"urn:ietf:params:scim:schemas:core:2.0:Group\",\r\n          \"urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group\",\r\n          \"urn:ietf:params:scim:schemas:extension:custom:2.0:Group\"\r\n        ],\r\n        \"displayname\": \"Security Team\",\r\n        \"urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group\": {\r\n          \"creationMechanism\": \"api\",\r\n          \"description\": \"Group with security employees.\"\r\n        },\r\n        \"members\": [\r\n          {\r\n            \"value\": \"bulkId:id_user1\",\r\n            \"type\": \"User\"\r\n          },\r\n          {\r\n            \"value\": \"bulkId:id_user2\",\r\n            \"type\": \"User\"\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    {\r\n      \"method\": \"POST\",\r\n      \"path\": \"/Groups\",\r\n      \"bulkId\": \"id_group2\",\r\n      \"data\": {\r\n        \"schemas\": [\r\n          \"urn:ietf:params:scim:schemas:core:2.0:Group\",\r\n          \"urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group\",\r\n          \"urn:ietf:params:scim:schemas:extension:custom:2.0:Group\"\r\n        ],\r\n        \"displayname\": \"Compliance Team\",\r\n        \"urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group\": {\r\n          \"creationMechanism\": \"api\",\r\n          \"description\": \"Group with security compliance employees.\"\r\n        },\r\n        \"members\": [\r\n          {\r\n            \"value\": \"bulkId:id_user1\",\r\n            \"type\": \"User\"\r\n          },\r\n          {\r\n            \"value\": \"bulkId:id_user2\",\r\n            \"type\": \"User\"\r\n          },\r\n          {\r\n            \"value\": \"bulkId:id_user3\",\r\n            \"type\": \"User\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{HOST}}/admin/v1/Bulk",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"admin",
								"v1",
								"Bulk"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete users and groups in bulk",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:api:messages:2.0:BulkRequest\"\r\n  ],\r\n  \"Operations\": [\r\n    {\r\n      \"method\": \"DELETE\",\r\n      \"path\": \"/Groups/{{groupid}}\"\r\n    },\r\n    {\r\n      \"method\": \"DELETE\",\r\n      \"path\": \"/Users/{{userid}}\"\r\n    }\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{HOST}}/admin/v1/Bulk",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"admin",
								"v1",
								"Bulk"
							]
						}
					},
					"response": []
				},
				{
					"name": "Modify users and groups in bulk",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:api:messages:2.0:BulkRequest\"\r\n  ],\r\n  \"Operations\": [\r\n     {\r\n      \"method\": \"PATCH\",\r\n      \"path\": \"/Groups/{{groupid}}\",\r\n      \"data\": {\r\n        \"schemas\": [\r\n          \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\r\n        ],\r\n        \"Operations\": [\r\n          {\r\n            \"op\": \"replace\",\r\n            \"path\": \"displayName\",\r\n            \"value\": \"New Group Name\"\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    {\r\n      \"method\": \"PATCH\",\r\n      \"path\": \"/Users/{{userid}}\",\r\n      \"data\": {\r\n        \"schemas\": [\r\n\t      \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\r\n\t    ],\r\n\t    \"Operations\": [\r\n\t      {\r\n\t        \"op\": \"replace\",\r\n\t        \"path\": \"phoneNumbers\",\r\n\t        \"value\": [\r\n\t          {\r\n\t            \"value\": \"666-666-1111\",\r\n\t            \"type\": \"home\"\r\n\t          }\r\n\t        ]\r\n\t      }\r\n\t    ]\r\n      }\r\n    }\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{HOST}}/admin/v1/Bulk",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"admin",
								"v1",
								"Bulk"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset user's password in bulk (random value)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:BulkUserPasswordResetter\"\r\n  ],\r\n  \"userIds\": [\r\n    \"{{userid}}\",\r\n    \"{{userid2}}\"\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{HOST}}/admin/v1/BulkUserPasswordResetter",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"admin",
								"v1",
								"BulkUserPasswordResetter"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset user's password in bulk (known value)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"schemas\": [\r\n\t\t\"urn:ietf:params:scim:schemas:oracle:idcs:BulkUserPasswordChanger\"\r\n\t],\r\n\t\"userIds\": [\r\n\t\t\"{{userid}}\",\r\n\t\t\"{{userid2}}\"\r\n\t],\r\n\t\"password\": \"Welcome1\"\r\n}"
						},
						"url": {
							"raw": "{{HOST}}/admin/v1/BulkUserPasswordChanger",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"admin",
								"v1",
								"BulkUserPasswordChanger"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create users and reset passwords in bulk",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:api:messages:2.0:BulkRequest\"\r\n  ],\r\n  \"Operations\": [\r\n    {\r\n      \"method\": \"POST\",\r\n      \"path\": \"/Users\",\r\n      \"bulkId\": \"id_user1\",\r\n      \"data\": {\r\n\t    \"schemas\": [\r\n\t      \"urn:ietf:params:scim:schemas:core:2.0:User\"\r\n\t    ],\r\n\t    \"name\": {\r\n\t  \t  \"givenName\": \"Simone\",\r\n\t\t  \"familyName\": \"Morrison\"\r\n\t    },\r\n\t\t\"userName\": \"smorrison@example.com\",\r\n\t\t\"title\": \"Finance Director\",\r\n\t\t\"emails\": [\r\n\t\t  {\r\n\t\t    \"value\": \"smorrison@example.com\",\r\n\t\t    \"type\": \"work\",\r\n\t\t    \"primary\": true\r\n\t\t  },\r\n\t\t  {\r\n\t\t    \"value\": \"smorrison@example.com\",\r\n\t\t    \"primary\": false,\r\n\t\t    \"type\": \"recovery\"\r\n\t\t  }\r\n\t\t]\r\n      }\r\n    },\r\n    {\r\n      \"method\": \"POST\",\r\n      \"path\": \"/Users\",\r\n      \"bulkId\": \"id_user2\",\r\n      \"data\": {\r\n\t    \"schemas\": [\r\n\t      \"urn:ietf:params:scim:schemas:core:2.0:User\"\r\n\t    ],\r\n\t    \"name\": {\r\n\t  \t  \"givenName\": \"Rebecca\",\r\n\t\t  \"familyName\": \"Holt\"\r\n\t    },\r\n\t\t\"userName\": \"rholt@example.com\",\r\n\t\t\"title\": \"Marketing Analyst\",\r\n\t\t\"emails\": [\r\n\t\t  {\r\n\t\t    \"value\": \"rholt@example.com\",\r\n\t\t    \"type\": \"work\",\r\n\t\t    \"primary\": true\r\n\t\t  },\r\n\t\t  {\r\n\t\t    \"value\": \"rholt@example.com\",\r\n\t\t    \"primary\": false,\r\n\t\t    \"type\": \"recovery\"\r\n\t\t  }\r\n\t\t]\r\n      }\r\n    },\r\n    {\r\n\t  \"method\": \"POST\",\r\n\t  \"path\": \"/BulkUserPasswordChanger\",\r\n\t  \"bulkId\": \"pw_change\",\r\n\t  \"data\": {\r\n\t    \"schemas\": [\r\n\t\t  \"urn:ietf:params:scim:schemas:oracle:idcs:BulkUserPasswordChanger\"\r\n\t\t],\r\n\t\t\"userIds\": [\r\n\t\t  \"bulkId:id_user1\",\r\n\t\t  \"bulkId:id_user2\"\r\n\t\t ],\r\n\t\t \"password\": \"Welcome1\"\r\n\t  }\r\n    }\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{HOST}}/admin/v1/Bulk",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"admin",
								"v1",
								"Bulk"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create users, groups, and apps in bulk",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:api:messages:2.0:BulkRequest\"\r\n  ],\r\n  \"Operations\": [\r\n    {\r\n      \"method\": \"POST\",\r\n      \"path\": \"/Users\",\r\n      \"bulkId\": \"id_user1\",\r\n      \"data\": {\r\n\t    \"schemas\": [\r\n\t      \"urn:ietf:params:scim:schemas:core:2.0:User\"\r\n\t    ],\r\n\t    \"name\": {\r\n\t  \t  \"givenName\": \"Xavier\",\r\n\t\t  \"familyName\": \"Hanel\"\r\n\t    },\r\n\t\t\"userName\": \"xhanel@example.com\",\r\n\t\t\"title\": \"Security Officer\",\r\n\t\t\"emails\": [\r\n\t\t  {\r\n\t\t    \"value\": \"xhanel@example.com\",\r\n\t\t    \"type\": \"work\",\r\n\t\t    \"primary\": true\r\n\t\t  },\r\n\t\t  {\r\n\t\t    \"value\": \"xhanel@example.com\",\r\n\t\t    \"primary\": false,\r\n\t\t    \"type\": \"recovery\"\r\n\t\t  }\r\n\t\t]\r\n      }\r\n    },\r\n    {\r\n      \"method\": \"POST\",\r\n      \"path\": \"/Users\",\r\n      \"bulkId\": \"id_user2\",\r\n      \"data\": {\r\n\t    \"schemas\": [\r\n\t      \"urn:ietf:params:scim:schemas:core:2.0:User\"\r\n\t    ],\r\n\t    \"name\": {\r\n\t  \t  \"givenName\": \"Alfred\",\r\n\t\t  \"familyName\": \"Ahmlek\"\r\n\t    },\r\n\t\t\"userName\": \"aahmlek@example.com\",\r\n\t\t\"title\": \"Security Engineer\",\r\n\t\t\"emails\": [\r\n\t\t  {\r\n\t\t    \"value\": \"aahmlek@example.com\",\r\n\t\t    \"type\": \"work\",\r\n\t\t    \"primary\": true\r\n\t\t  },\r\n\t\t  {\r\n\t\t    \"value\": \"aahmlek@example.com\",\r\n\t\t    \"primary\": false,\r\n\t\t    \"type\": \"recovery\"\r\n\t\t  }\r\n\t\t]\r\n      }\r\n    },\r\n    {\r\n      \"method\": \"POST\",\r\n      \"path\": \"/Users\",\r\n      \"bulkId\": \"id_user3\",\r\n      \"data\": {\r\n\t    \"schemas\": [\r\n\t      \"urn:ietf:params:scim:schemas:core:2.0:User\"\r\n\t    ],\r\n\t    \"name\": {\r\n\t  \t  \"givenName\": \"Ferdinand\",\r\n\t\t  \"familyName\": \"Redmilson\"\r\n\t    },\r\n\t\t\"userName\": \"fredmilson@example.com\",\r\n\t\t\"title\": \"GRC Reviewer\",\r\n\t\t\"emails\": [\r\n\t\t  {\r\n\t\t    \"value\": \"fredmilson@example.com\",\r\n\t\t    \"type\": \"work\",\r\n\t\t    \"primary\": true\r\n\t\t  },\r\n\t\t  {\r\n\t\t    \"value\": \"fredmilson@example.com\",\r\n\t\t    \"primary\": false,\r\n\t\t    \"type\": \"recovery\"\r\n\t\t  }\r\n\t\t]\r\n      }\r\n    },\r\n    {\r\n      \"method\": \"POST\",\r\n      \"path\": \"/Groups\",\r\n      \"bulkId\": \"id_group1\",\r\n      \"data\": {\r\n        \"schemas\": [\r\n          \"urn:ietf:params:scim:schemas:core:2.0:Group\",\r\n          \"urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group\",\r\n          \"urn:ietf:params:scim:schemas:extension:custom:2.0:Group\"\r\n        ],\r\n        \"displayname\": \"Security Team\",\r\n        \"urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group\": {\r\n          \"creationMechanism\": \"api\",\r\n          \"description\": \"Group with security employees.\"\r\n        },\r\n        \"members\": [\r\n          {\r\n            \"value\": \"bulkId:id_user1\",\r\n            \"type\": \"User\"\r\n          },\r\n          {\r\n            \"value\": \"bulkId:id_user2\",\r\n            \"type\": \"User\"\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    {\r\n      \"method\": \"POST\",\r\n      \"path\": \"/Groups\",\r\n      \"bulkId\": \"id_group2\",\r\n      \"data\": {\r\n        \"schemas\": [\r\n          \"urn:ietf:params:scim:schemas:core:2.0:Group\",\r\n          \"urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group\",\r\n          \"urn:ietf:params:scim:schemas:extension:custom:2.0:Group\"\r\n        ],\r\n        \"displayname\": \"Compliance Team\",\r\n        \"urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group\": {\r\n          \"creationMechanism\": \"api\",\r\n          \"description\": \"Group with security compliance employees.\"\r\n        },\r\n        \"members\": [\r\n          {\r\n            \"value\": \"bulkId:id_user1\",\r\n            \"type\": \"User\"\r\n          },\r\n          {\r\n            \"value\": \"bulkId:id_user2\",\r\n            \"type\": \"User\"\r\n          },\r\n          {\r\n            \"value\": \"bulkId:id_user3\",\r\n            \"type\": \"User\"\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    {\r\n      \"method\": \"POST\",\r\n      \"path\": \"/Apps\",\r\n      \"bulkId\": \"id_apps1\",\r\n      \"data\": {\r\n\t\t  \"schemas\": [\"urn:ietf:params:scim:schemas:oracle:idcs:App\"],\r\n\t\t  \"basedOnTemplate\": { \"value\": \"CustomWebAppTemplateId\" },\r\n\t\t  \"displayName\": \"Security Portal\",\r\n\t\t  \"description\": \"Portal for security teams\",\r\n\t\t  \"clientType\": \"confidential\",\r\n\t\t  \"isOAuthClient\": true,\r\n\t\t  \"allowedGrants\": [\"authorization_code\",\"client_credentials\"],\r\n\t\t  \"redirectUris\": [\"https://www.mysecapp.com/callback\"],\r\n\t\t  \"logoutUri\": \"https://www.mysecapp.com/logout\",\r\n\t\t  \"postLogoutRedirectUris\": [\"https://www.mysecapp.com/\"],\r\n\t\t  \"isOAuthResource\": true,\r\n\t\t  \"accessTokenExpiry\": 3600,\r\n\t\t  \"refreshTokenExpiry\": 604800,\r\n\t\t  \"allUrlSchemesAllowed\": false,\r\n\t\t  \"audience\": \"https://api.mysecapp.com\",\r\n\t\t  \"scopes\": [\r\n\t\t\t{\r\n\t\t\t  \"value\": \"/mysettings\",\r\n\t\t\t  \"fqs\": \"https://api.mysecapp.com/mysettings\",\r\n\t\t\t  \"requiresConsent\": true,\r\n\t\t\t  \"description\": \"Get information your security clearance\"\r\n\t\t\t},{\r\n\t\t\t  \"value\": \"/alert\",\r\n\t\t\t  \"fqs\": \"https://api.mysecapp.com/alert\",\r\n\t\t\t  \"requiresConsent\": true,\r\n\t\t\t  \"description\": \"Post an alert for the security team\"\r\n\t\t\t},{\r\n\t\t\t  \"value\": \"/myprofile\",\r\n\t\t\t  \"fqs\": \"https://api.mysecapp.com/myprofile\",\r\n\t\t\t  \"requiresConsent\": false,\r\n\t\t\t  \"description\": \"Access your security profile\"\r\n\t\t\t}]\r\n\t\t}\r\n    }\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{HOST}}/admin/v1/Bulk",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"admin",
								"v1",
								"Bulk"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Grants",
			"description": "A Grant says that someone (the grantor) says that someone (a grantee) should have something (access to an App), and optionally an entitlement within that App.\r\n\r\n- The grantor is typically an Administrator (but could also be some component of the system).\r\n- The grantee is typically a User, but could also be a Group or another App.\r\n- The granted App may be accompanied by an entitlement defined by that App.\r\n\t- In general, an entitlement can be any specific value of any specific attribute of the App-specific identity.\r\n\t(A ManagedApp has its own identity repository, so it defines the attributes for its own identities.)\r\n\t- One special case of an entitlement is membership in an AppRole defined by the App.\r\n    (Granting an AppRole defined by the App necessarily grants access to the App.)\r\n\r\n\r\nAn administrator can grant (give) or revoke (take away) access to an App (either basic access or a specific entitlement within an App) to/from Users, Groups and other Apps:\r\n\r\n-Creating a Grant gives the specified App-Entitlement to the specified grantee (unless the grantee already has that App-Entitlement, in which case the Grant is redundant).\r\n\r\n-Deleting a Grant removes the specified App-Entitlement from the specified grantee (unless another Grant gives that same App-Entitlement to that same grantee).\r\n\r\nEach Grant records an administrator's decision to give a particular App (or a particular entitlement of a particular App) to a particular User or Group or App.\r\n\r\n-If the grantee is a User, then that User will have access to that App.  We call this a direct Grant.\r\n-If the grantee is a Group, then each User who is a member of that Group will have access to that App.  We call this an indirect Grant.\r\n-If the grantee is an App, that that grantee (App) will have access to the (granted) App.  This is used in service-associations, for example. (Note: A grant to an App is always direct, because an App can't be a member of a Group.)\r\n\r\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups.",
			"item": [
				{
					"name": "Apps",
					"description": "Grants of Apps\nA Grant always specifies the App to be granted. A Grant may also specify an entitlement.\n\n- A Grant of a Managed App may specify as an entitlement any value of any attribute defined by the schema for an account in that App.\n- One special case of an entitlement is membership in an AppRole defined by that App.\n\nThere are two ways to query grants of Apps:\n\n- By searching /Grants directly, such as filter=app.value eq \"{{appid}}\"\n- As a convenience, App exposees a 'grants' attribute. AppManager computes the values of the 'grants' attribute for a particular App by searching /Grants to find Grants of that App. The 'grants' attribute contains the key information about each Grant, but not all of the information.\n\nGrants to Apps\n\nA Grant that specifies as grantee a particular App (and usually a particular AppRole defined by that App) allows that grantee App (Client) to access the resources of the granted App. \n\n- Oracle Identity Cloud Service supports currently only Grant-to-App of an AppRole defined by another App:\n\t-An App needs membership in at least one AppRole defined by the server App in order to support legacy, AppID-based association.\n\t-An App may need memberships in AppRoles defined by the server App in order to authorize access that OAuth trust enables.\n    -In theory, Oracle Identity Cloud Service could also support a Grant-to-App of another App that does not specify an AppRole defined by that other App.\n\nNote that fulfillment of a Grant-to-App does not record the grantee App as a member of the AppRole. Instead, fulfillment records the granted AppRole in the grantedAppRoles attribute of the grantee App.\n\nQuerying Grants to Apps\n\nThere are several ways to query Grants to Apps:\n\n- Query the /Grants endpoint directly with a filter such as:\n\tfilter=grantee.value eq \"{{appid}}\", or\n\tfilter=grantee[value eq \"{{appid}}\" and type eq \"App\"] (if you distrust the uniqueness of IDs)\n- To find grants of an AppRole to an App, use the grantedAppRoles attribute of App:\n\tFor a particular App, inspect the values of the grantedAppRoles attribute: \n\tAppManager persists the values of this attribute for a particular App.\n\tEach value of the grantedAppRoles attribute refers to an AppRole.\n- To find Apps that have a particular AppRole, search /Apps and filter on the values of grantedAppRoles:\n\tfilter=grantedAppRoles.value eq \"{{approleid}}\".\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups.",
					"item": [
						{
							"name": "Revoke an AppRole from a client",
							"description": "Revoke an AppRole from a client.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups.",
							"item": [
								{
									"name": "Step 1: Get all grants of the specified approle to the client",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"User\",\r\n         \"value\": \"{{userID}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appID}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_USER\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Grants?filter=grantee[value eq \"{{clientappid}}\" and type eq \"App\"] and entitlement[attributeName eq \"appRoles\" and attributeValue eq \"{{approleid}}\"]",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Grants"
											],
											"query": [
												{
													"key": "filter",
													"value": "grantee[value eq \"{{clientappid}}\" and type eq \"App\"] and entitlement[attributeName eq \"appRoles\" and attributeValue eq \"{{approleid}}\"]"
												}
											]
										},
										"description": "Get all direct Grants for a Client to obtain the IDs for the Grants that you want to revoke from the Client.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
									},
									"response": []
								},
								{
									"name": "Step 2: Delete each grant",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Grants/{{grantid}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Grants",
												"{{grantid}}"
											]
										},
										"description": "See https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "91f44eef-6318-408f-a2da-ba50b9565177",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "708a61f9-ca07-468a-9ae3-06dfb162cf26",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Grant an approle to an app",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"App\",\r\n         \"value\": \"{{clientappid}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appidthatdefinedtheapprole}}\"\r\n    },\r\n    \"entitlement\" : {\r\n        \"attributeName\": \"appRoles\",\r\n        \"attributeValue\": \"{{approleid}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_APP\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									]
								},
								"description": "Grants access to a specific AppRole for a specific App. You must specify the AppRole in the payload after \"app\" when granting an AppRole to an App.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for all grants of a specific app",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants?filter=app.value eq \"{{appid}}\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									],
									"query": [
										{
											"key": "filter",
											"value": "app.value eq \"{{appid}}\""
										}
									]
								},
								"description": "There are two ways to do this:\n\n1. Request the \"grants\" attribute of the app\n2. Query Grants yourself\n\nIf you request the \"grants\" attribute of the App, it contains the essential data: the ID of the Grant, the ID of the grantee, the type of the grantee, the grantMechanism, and so on.\n\n---\nA Grant that specifies as grantee a particular App (and usually a particular AppRole defined by that App) allows that grantee App (Client) to access the resources of the granted App. \n\n- Oracle Identity Cloud Service supports currently only Grant-to-App of an AppRole defined by another App:\n\n\t- An App needs membership in at least one AppRole defined by the server App in order to support legacy, AppID-based association.\n\t- An App may need memberships in AppRoles defined by the server App in order to authorize access that OAuth trust enables.\n       \nIn theory, Oracle Identity Cloud Service could also support a Grant-to-App of another App that does not specify an AppRole defined by that other App.\n\nNote that fulfillment of a Grant-to-App does not record the grantee App as a member of the AppRole.  Instead, fulfillment records the granted AppRole) in the grantedAppRoles attribute of the grantee App.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for all grants of a specific app to any user",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants?filter=app.value eq \"{{appid}}\" and grantee.type eq \"User\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									],
									"query": [
										{
											"key": "filter",
											"value": "app.value eq \"{{appid}}\" and grantee.type eq \"User\""
										}
									]
								},
								"description": "There are two ways to do this:\n\n1. Request the \"grants\" attribute of the app\n2. Query Grants yourself\n\nQuerying Grants yourself using this query shows both direct and indirct Grants to Users because fulfillment expands any Grant to a Group into a Grant to each User who is a member of the Group.\n\n---\nA Grant that specifies as grantee a particular App (and usually a particular AppRole defined by that App) allows that grantee App (Client) to access the resources of the granted App. \n\n- Oracle Identity Cloud Service supports currently only Grant-to-App of an AppRole defined by another App:\n\n\t- An App needs membership in at least one AppRole defined by the server App in order to support legacy, AppID-based association.\n\t- An App may need memberships in AppRoles defined by the server App in order to authorize access that OAuth trust enables.\n       \nIn theory, Oracle Identity Cloud Service could also support a Grant-to-App of another App that does not specify an AppRole defined by that other App.\n\nNote that fulfillment of a Grant-to-App does not record the grantee App as a member of the AppRole.  Instead, fulfillment records the granted AppRole) in the grantedAppRoles attribute of the grantee App.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for all grants of a specific approle to a specific app",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"User\",\r\n         \"value\": \"{{userID}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appID}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_USER\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants?filter=grantee[value eq \"{{clientappid}}\" and type eq \"App\"] and entitlement[attributeName eq \"appRoles\" and attributeValue eq \"{{approleid}}\"]",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									],
									"query": [
										{
											"key": "filter",
											"value": "grantee[value eq \"{{clientappid}}\" and type eq \"App\"] and entitlement[attributeName eq \"appRoles\" and attributeValue eq \"{{approleid}}\"]"
										}
									]
								},
								"description": "Search to see if a client was granted a specific AppRole. Because we want details of the grant, we must query Grants to that Client (App).\n\n---\nA Grant that specifies as grantee a particular App (and usually a particular AppRole defined by that App) allows that grantee App (Client) to access the resources of the granted App. \n\n- Oracle Identity Cloud Service supports currently only Grant-to-App of an AppRole defined by another App:\n\n\t- An App needs membership in at least one AppRole defined by the server App in order to support legacy, AppID-based association.\n\t- An App may need memberships in AppRoles defined by the server App in order to authorize access that OAuth trust enables.\n       \nIn theory, Oracle Identity Cloud Service could also support a Grant-to-App of another App that does not specify an AppRole defined by that other App.\n\nNote that fulfillment of a Grant-to-App does not record the grantee App as a member of the AppRole.  Instead, fulfillment records the granted AppRole) in the grantedAppRoles attribute of the grantee App.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for all grants of a specific app to any client app",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants?filter=grantee.type eq \"App\" and app.value eq \"{{appid}}\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									],
									"query": [
										{
											"key": "filter",
											"value": "grantee.type eq \"App\" and app.value eq \"{{appid}}\""
										}
									]
								},
								"description": "---\nA Grant that specifies as grantee a particular App (and usually a particular AppRole defined by that App) allows that grantee App (Client) to access the resources of the granted App. \n\n- Oracle Identity Cloud Service supports currently only Grant-to-App of an AppRole defined by another App:\n\n\t- An App needs membership in at least one AppRole defined by the server App in order to support legacy, AppID-based association.\n\t- An App may need memberships in AppRoles defined by the server App in order to authorize access that OAuth trust enables.\n       \nIn theory, Oracle Identity Cloud Service could also support a Grant-to-App of another App that does not specify an AppRole defined by that other App.\n\nNote that fulfillment of a Grant-to-App does not record the grantee App as a member of the AppRole.  Instead, fulfillment records the granted AppRole) in the grantedAppRoles attribute of the grantee App.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for all grants of a specific approle to any client app",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants?filter=grantee.type eq \"App\" and entitlement[attributeName eq \"appRoles\" and attributeValue eq \"{{approleid}}\"]",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									],
									"query": [
										{
											"key": "filter",
											"value": "grantee.type eq \"App\" and entitlement[attributeName eq \"appRoles\" and attributeValue eq \"{{approleid}}\"]"
										}
									]
								},
								"description": "---\nA Grant that specifies as grantee a particular App (and usually a particular AppRole defined by that App) allows that grantee App (Client) to access the resources of the granted App. \n\n- Oracle Identity Cloud Service supports currently only Grant-to-App of an AppRole defined by another App:\n\n\t- An App needs membership in at least one AppRole defined by the server App in order to support legacy, AppID-based association.\n\t- An App may need memberships in AppRoles defined by the server App in order to authorize access that OAuth trust enables.\n       \nIn theory, Oracle Identity Cloud Service could also support a Grant-to-App of another App that does not specify an AppRole defined by that other App.\n\nNote that fulfillment of a Grant-to-App does not record the grantee App as a member of the AppRole.  Instead, fulfillment records the granted AppRole) in the grantedAppRoles attribute of the grantee App.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for all grants of a specific app to any group",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants?filter=app.value eq \"{{appid}}\" and grantee.type eq \"Group\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									],
									"query": [
										{
											"key": "filter",
											"value": "app.value eq \"{{appid}}\" and grantee.type eq \"Group\""
										}
									]
								},
								"description": "There are two ways to do this:\n\n1. Request the \"grants\" attribute of the app\n2. Query Grants yourself\n\nQuerying Grants yourself using this query shows both direct and indirct Grants to Users because fulfillment expands any Grant to a Group into a Grant to each User who is a member of the Group.\n\n---\nA Grant that specifies as grantee a particular App (and usually a particular AppRole defined by that App) allows that grantee App (Client) to access the resources of the granted App. \n\n- Oracle Identity Cloud Service supports currently only Grant-to-App of an AppRole defined by another App:\n\n\t- An App needs membership in at least one AppRole defined by the server App in order to support legacy, AppID-based association.\n\t- An App may need memberships in AppRoles defined by the server App in order to authorize access that OAuth trust enables.\n       \nIn theory, Oracle Identity Cloud Service could also support a Grant-to-App of another App that does not specify an AppRole defined by that other App.\n\nNote that fulfillment of a Grant-to-App does not record the grantee App as a member of the AppRole.  Instead, fulfillment records the granted AppRole) in the grantedAppRoles attribute of the grantee App.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for all grants to a specific client app",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants?filter=grantee[value eq \"{{clientappid}}\" and type eq \"App\"]",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									],
									"query": [
										{
											"key": "filter",
											"value": "grantee[value eq \"{{clientappid}}\" and type eq \"App\"]"
										}
									]
								},
								"description": "There are two ways to do this:\n\n1. Request the \"grants\" attribute of the app\n2. Query Grants yourself\n\nIf you request the \"grants\" attribute of the App, it contains the essential data: the ID of the Grant, the ID of the grantee, the type of the grantee, the grantMechanism, and so on.\n\n---\nA Grant that specifies as grantee a particular App (and usually a particular AppRole defined by that App) allows that grantee App (Client) to access the resources of the granted App. \n\n- Oracle Identity Cloud Service supports currently only Grant-to-App of an AppRole defined by another App:\n\n\t- An App needs membership in at least one AppRole defined by the server App in order to support legacy, AppID-based association.\n\t- An App may need memberships in AppRoles defined by the server App in order to authorize access that OAuth trust enables.\n       \nIn theory, Oracle Identity Cloud Service could also support a Grant-to-App of another App that does not specify an AppRole defined by that other App.\n\nNote that fulfillment of a Grant-to-App does not record the grantee App as a member of the AppRole.  Instead, fulfillment records the granted AppRole) in the grantedAppRoles attribute of the grantee App.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "375d2034-fcef-4b92-b644-0a52171772f3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "103f6130-ab45-4c73-8e58-38773a5bd8cb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "AppRoles",
					"description": "A Grant says that someone (the grantor) says that someone (a grantee) should have something (access to an App), and optionally an entitlement within that App.\r\n\r\n- The grantor is typically an Administrator (but could also be some component of the system).\r\n- The grantee is typically a User, but could also be a Group or another App.\r\n- The granted App may be accompanied by an entitlement defined by that App.\r\n  - In general, an entitlement can be any specific value of any specific attribute of the App-specific identity.\r\n  (A ManagedApp has its own identity repository, so it defines the attributes for its own identities.)\r\n  - One special case of an entitlement is membership in an AppRole defined by the App.\r\n    (Granting an AppRole defined by the App necessarily grants access to the App.)\r\n\r\n\r\nAn administrator can grant (give) or revoke (take away) access to an App (either basic access or a specific entitlement within an App) to/from Users, Groups and other Apps:\r\n\r\n-Creating a Grant gives the specified App-Entitlement to the specified grantee (unless the grantee already has that App-Entitlement, in which case the Grant is redundant).\r\n\r\n-Deleting a Grant removes the specified App-Entitlement from the specified grantee (unless another Grant gives that same App-Entitlement to that same grantee).\r\n\r\nEach Grant records an administrator's decision to give a particular App (or a particular entitlement of a particular App) to a particular User or Group or App.\r\n\r\n-If the grantee is a User, then that User will have access to that App.  We call this a direct Grant.\r\n-If the grantee is a Group, then each User who is a member of that Group will have access to that App.  We call this an indirect Grant.\r\n-If the grantee is an App, that that grantee (App) will have access to the (granted) App.  This is used in service-associations, for example. (Note: A grant to an App is always direct, because an App can't be a member of a Group.)\r\n\r\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups.",
					"item": [
						{
							"name": "Revoke an AppRole from a Client",
							"description": "Revoke an AppRole from a Client.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups.",
							"item": [
								{
									"name": "Step 1: Get all grants of the specified approle to the client",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"User\",\r\n         \"value\": \"{{userID}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appID}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_USER\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Grants?filter=grantee[value eq \"{{clientappid}}\" and type eq \"App\"] and entitlement[attributeName eq \"appRoles\" and attributeValue eq \"{{approleid}}\"]",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Grants"
											],
											"query": [
												{
													"key": "filter",
													"value": "grantee[value eq \"{{clientappid}}\" and type eq \"App\"] and entitlement[attributeName eq \"appRoles\" and attributeValue eq \"{{approleid}}\"]"
												}
											]
										},
										"description": "Get all direct Grants for a Client to obtain the IDs for the Grants that you want to revoke from the Client.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
									},
									"response": []
								},
								{
									"name": "Step 2: Delete each grant",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Grants/{{grantid}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Grants",
												"{{grantid}}"
											]
										},
										"description": "See https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "91f44eef-6318-408f-a2da-ba50b9565177",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "708a61f9-ca07-468a-9ae3-06dfb162cf26",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Search all grants of a specific approle",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants?filter=entitlement[attributeName eq \"appRoles\" and attributeValue eq \"{{approleid}}\"] ",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									],
									"query": [
										{
											"key": "filter",
											"value": "entitlement[attributeName eq \"appRoles\" and attributeValue eq \"{{approleid}}\"] "
										}
									]
								},
								"description": "A Grant of an AppRole specifies as the granted 'app' the App that defines the AppRole, and specifies the AppRole as an entitlement.\n\nThere is only one way to query grants of AppRoles:\n\n    by searching /Grants directly, e.g.,:\n        To search for Grants of a particular AppRole, filter on entitlement:\n            filter=entitlement[attributeName eq \"appRoles\" and value eq \"<idOfAppRole>\"]\n        To search for Grants of any AppRole defined by a particular App:\n            filter=app.value eq \"<idOfApp>\" and entitlement.attributeName eq \"appRoles\"\n        To search for Grants of any of several particular AppRoles:\n            filter=entitlement[attributeName eq \"appRoles\" and (value eq \"<idOfAppRole1>\" or value eq \"<idOfAppRole2>\"... or value eq \"<idOfAppRoleN>\")]\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search all grants of a specific approle to any user",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants?filter=entitlement[attributeName eq \"appRoles\" and attributeValue eq \"{{approleid}}\"] ",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									],
									"query": [
										{
											"key": "filter",
											"value": "entitlement[attributeName eq \"appRoles\" and attributeValue eq \"{{approleid}}\"] "
										}
									]
								},
								"description": "A Grant of an AppRole specifies as the granted 'app' the App that defines the AppRole, and specifies the AppRole as an entitlement.\n\nThere is only one way to query grants of AppRoles:\n\n    by searching /Grants directly, e.g.,:\n        To search for Grants of a particular AppRole, filter on entitlement:\n            filter=entitlement[attributeName eq \"appRoles\" and value eq \"<idOfAppRole>\"]\n        To search for Grants of any AppRole defined by a particular App:\n            filter=app.value eq \"<idOfApp>\" and entitlement.attributeName eq \"appRoles\"\n        To search for Grants of any of several particular AppRoles:\n            filter=entitlement[attributeName eq \"appRoles\" and (value eq \"<idOfAppRole1>\" or value eq \"<idOfAppRole2>\"... or value eq \"<idOfAppRoleN>\")]\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search all grants of a specific approle to any group",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants?filter=entitlement[attributeName eq \"appRoles\" and attributeValue eq \"{{approleid}}\"] and grantee.type eq \"Group\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									],
									"query": [
										{
											"key": "filter",
											"value": "entitlement[attributeName eq \"appRoles\" and attributeValue eq \"{{approleid}}\"] and grantee.type eq \"Group\""
										}
									]
								},
								"description": "A Grant of an AppRole specifies as the granted 'app' the App that defines the AppRole, and specifies the AppRole as an entitlement.\n\nThere is only one way to query grants of AppRoles:\n\n    by searching /Grants directly, e.g.,:\n        To search for Grants of a particular AppRole, filter on entitlement:\n            filter=entitlement[attributeName eq \"appRoles\" and value eq \"<idOfAppRole>\"]\n        To search for Grants of any AppRole defined by a particular App:\n            filter=app.value eq \"<idOfApp>\" and entitlement.attributeName eq \"appRoles\"\n        To search for Grants of any of several particular AppRoles:\n            filter=entitlement[attributeName eq \"appRoles\" and (value eq \"<idOfAppRole1>\" or value eq \"<idOfAppRole2>\"... or value eq \"<idOfAppRoleN>\")]\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Grant an approle to an app",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"App\",\r\n         \"value\": \"{{clientappid}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appid}}\"\r\n    },\r\n    \"entitlement\" : {\r\n        \"attributeName\": \"appRoles\",\r\n        \"attributeValue\": \"{{approleid}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_APP\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									]
								},
								"description": "Grants access to a specific AppRole for a specific App. You must specify the AppRole in the payload after \"app\" when granting an AppRole to an App.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2a5c6e5f-c870-4140-a9d1-db7438d5c013",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1ab686fc-6479-4da1-900b-a2d2983d4ced",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Groups",
					"description": "Granting anything to a Group grants it implicitly (and indirectly) to each User who is a member of that Group.\r\n\r\n    - The system fulfills (enacts) a Grant to a Group by expanding the Grant-to-Group into a Grant-to-User for each User who is a member of that Group.\r\n    - The system also creates (and deletes) Grants-to-User as members are added to (and removed from) the grantee Group.\r\n\r\nNote that the Group itself has no access to an App. Only the Users who are members of that Group can have access.\r\n\r\nA Grant that specifies as grantee a particular Group implies conditional access for each User member of that Group.  We call this an indirect Grant to User, because the direct Grant-to-Group produces and maintains a Grant-to-User per member.\r\n\r\nFulfillment of Grant to Group\r\n\r\nFulfillment of a Grant of a ManagedApp to a Group doesn't require an Identity Connector Framework Connector (ICF).\r\n\r\n- Oracle Identity Cloud Service fulfills a Grant-to-Group by \"expanding\" it into a Grant-to-User for each User who is a member of that Group.\r\n- As members are added to (or removed from) the Group, Oracle Identity Cloud Service creates (or deletes) a Grant-to-User for each member.\r\n\r\nFulfillment of a Grant of an UnmanagedApp to a Group would be handled in the same way (by expanding it to a Grant-to-User for each member), unless that Grant of an UnmanagedApp specifies an AppRole.\r\n\r\nFulfillment of Grant of an AppRole to a Group doesn't expand the Grant-to-Group into a Grant-to-User for each member (although technically fulfillment could do this). Because Oracle Identity Cloud Service maintains internally the members of each AppRole, fulfillment simply adds that Group as a member of the AppRole. \r\n\r\nTechnically, this is far more efficient than adding each member of the Group as a member of the AppRole. If that Group is already a member of that AppRole, this is a NO-OP.\r\n\r\nNote: The values of the appRoles attribute of User are computed so as to indicate that the User has an indirect membership in the AppRole.\r\n\r\nQuerying Grants to Groups\r\n\r\nThere are two ways to query Grants to Groups:\r\n\r\n- Query the /Grants endpoint directly with a filter such as:\r\n\tfilter=grantee.value eq \"<idOfGroup>\", or\r\n\tfilter=grantee[value eq \"<idOfGroup>\" and type eq \"Group\"] (if you distrust the uniqueness of IDs)\r\n- For convenience, each Oracle Identity Cloud Service Group has a grants attribute. \r\n\tGroupManager computes the values of this attribute for a particular Group by querying Grants to that Group.\r\n\tThe grants attribute has the key information about each Grant to that Group, but not all of the information.\r\n\r\n-------\r\nA Grant says that someone (the grantor) says that someone (a grantee) should have something (access to an App, and optionally an entitlement within that App).\r\n\r\n- The grantor is typically an administrator (but could also be some component of the system).\r\n- The grantee is typically a User, but could also be a Group or another App.\r\n- The granted App may be accompanied by an entitlement defined by that App.\r\n\t- In general, an entitlement can be any specific value of any specific attribute of the App-specific identity.\r\n\t(A ManagedApp has its own identity-repository, so it defines the attributes for its own identities.)\r\n\t- One special case of an entitlement is membership in an AppRole defined by the App.\r\n    (Granting an AppRole defined by the App necessarily grants access to the App.)\r\n\r\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups.",
					"item": [
						{
							"name": "Revoke an AppRole from a Group",
							"description": "This is a two-step process:\n\n1. Search for the Grants of the AppRole to the Group.\n2. Revoke an AppRole from the Group.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups.",
							"item": [
								{
									"name": "Step 1: Get all grants of the approle to this group",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"User\",\r\n         \"value\": \"{{userID}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appID}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_USER\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Grants?filter=grantee[type eq \"Group\" and value eq \"{{groupid}}\"] and entitlement[attributeName=\"appRoles\" and attributeValue eq \"{{approleid}}\"]",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Grants"
											],
											"query": [
												{
													"key": "filter",
													"value": "grantee[type eq \"Group\" and value eq \"{{groupid}}\"] and entitlement[attributeName=\"appRoles\" and attributeValue eq \"{{approleid}}\"]"
												}
											]
										},
										"description": "Get all grants of the AppRole to this Group to obtain the Grant IDs that you need to remove."
									},
									"response": []
								},
								{
									"name": "Step 2: Delete each grant",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Grants/{{grantid}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Grants",
												"{{grantid}}"
											]
										},
										"description": "Delete the grant of the AppRole for the Group."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bcd422be-0a48-40dc-a866-e6aeaf0b4bb2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "30f72ac1-c996-4e97-ba7d-600d737712c4",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Revoke an Unmanaged App from a Group",
							"description": "This folder contains the requests required to revoke an Unmanaged App from a Group.\n\n1. Search for the Grants of the approle to the Group.\n2. Revoke an AppRole from the Group.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups.",
							"item": [
								{
									"name": "Step 1: Get the grants of the approle to this group",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"User\",\r\n         \"value\": \"{{userID}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appID}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_USER\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Grants?filter=grantee[value eq \"{{groupid}}\" and type eq \"Group\"]&entitlement[attributeName eq \"appRoles\"&attributeValue eq \"\n{{approlid}}\"]",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Grants"
											],
											"query": [
												{
													"key": "filter",
													"value": "grantee[value eq \"{{groupid}}\" and type eq \"Group\"]"
												},
												{
													"key": "entitlement[attributeName eq \"appRoles\"",
													"value": null
												},
												{
													"key": "attributeValue eq \"\n{{approlid}}\"]",
													"value": null
												}
											]
										},
										"description": "Search for grants of the approle to this group to get the grantID of the grant that you want to revoke for the group."
									},
									"response": []
								},
								{
									"name": "Step 2: Delete each grant",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Grants/{{grantid}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Grants",
												"{{grantid}}"
											]
										},
										"description": "Remove a grant, which removes the Group's access to the unmanaged App."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4de88ea9-c88e-4079-ab77-2dd9fe668d1a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "89614de8-8db8-4256-b604-017e6540aeb0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Revoke a Managed App from a Group",
							"description": "This folder contains the requests required to revoke a Managed App from a Group.\n\n1. Search for Grants of the specified App to this Group.\n2. Delete each matching Grant.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups.",
							"item": [
								{
									"name": "Step 1: Get grants for a group for a specific app",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"User\",\r\n         \"value\": \"{{userID}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appID}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_USER\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Grants?filter=grantee[type eq \"Group\" and value eq \"{{groupid}}\"] and app.value eq \"{{appid}}\"",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Grants"
											],
											"query": [
												{
													"key": "filter",
													"value": "grantee[type eq \"Group\" and value eq \"{{groupid}}\"] and app.value eq \"{{appid}}\""
												}
											]
										},
										"description": "Get grants for a group for a specific app to obtain the IDs for the grants that you want to revoke from the group."
									},
									"response": []
								},
								{
									"name": "Step 2: Delete each grant",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Grants/{{grantid}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Grants",
												"{{grantid}}"
											]
										},
										"description": "Delete access to a managed app for a specific group."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4de88ea9-c88e-4079-ab77-2dd9fe668d1a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "89614de8-8db8-4256-b604-017e6540aeb0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Grant an approle to a group",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"Group\",\r\n         \"value\": \"{{groupid}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appid}}\"\r\n    },\r\n    \"entitlement\" : {\r\n        \"attributeName\": \"appRoles\",\r\n        \"attributeValue\": \"{{approleid}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_GROUP\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									]
								},
								"description": "A Grant of an AppRole specifies as the granted App the App that defines the AppRole, and specifies the AppRole as an entitlement. You must specify the AppRole in the payload after \"app\" when granting an AppRole to a Group.\n\nA Grant that specifies as grantee a particular Group implies conditional access for each User member of that Group. We call this an indirect Grant to User, because the direct Grant-to-Group produces and maintains a Grant-to-User per member.\n\nFulfillment of a Grant of a ManagedApp to a Group doesn't require an Identity Connector Framework Connector (ICF).\n\n    Oracle Identity Cloud Service fulfills a Grant-to-Group by \"expanding\" it into a Grant-to-User for each User who is a member of that Group.\n    As members are added to (or removed from) the Group, Oracle Identity Cloud Service creates (or deletes) a Grant-to-User for each member.\n\nFulfillment of a Grant of an UnmanagedApp to a Group would be handled in the same way (by expanding it to a Grant-to-User for each member), unless that a Grant of an UnmanagedApp specifies an AppRole.\n\nFulfillment of Grant of an AppRole to a Group doesn't expand the Grant-to-Group into a Grant-to-User for each member (although technically fulfillment could do this).  Because Oracle Identity Cloud Service maintains internally the members of each AppRole, fulfillment simply adds that Group as a member of the AppRole. \n\nTechnically, this is far more efficient than adding each member of the Group as a member of the AppRole. If that Group is already a member of that AppRole, this is a NO-OP.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Grant a managed app to a group",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"Group\",\r\n         \"value\": \"{{groupid}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appid}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_GROUP\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									]
								},
								"description": "Groups don't have access to Apps. Groups have GRANTS of Apps.\nUsers who are members of a Group to which an App has been granted have access to the App. \n\nGrants access to a specific App for a specific Group.\n\nFulfillment of a Grant of a ManagedApp to a Group doesn't require an Identity Connector Framework Connector (ICF).\n\n    Oracle Identity Cloud Service fulfills a Grant-to-Group by \"expanding\" it into a Grant-to-User for each User who is a member of that Group.\n    As members are added to (or removed from) the Group, Oracle Identity Cloud Service creates (or deletes) a Grant-to-User for each member.\n\nFulfillment of a Grant of an UnmanagedApp to a Group would be handled in the same way (by expanding it to a Grant-to-User for each member), unless that a Grant of an UnmanagedApp specifies an AppRole.\n\nFulfillment of Grant of an AppRole to a Group doesn't expand the Grant-to-Group into a Grant-to-User for each member (although technically fulfillment could do this).  Because Oracle Identity Cloud Service maintains internally the members of each AppRole, fulfillment simply adds that Group as a member of the AppRole. \n\nTechnically, this is far more efficient than adding each member of the Group as a member of the AppRole. If that Group is already a member of that AppRole, this is a NO-OP.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Grant an unmanaged app to a group",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"Group\",\r\n         \"value\": \"{{groupid}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appid}}\"\r\n    },\r\n    \"entitlement\" : {\r\n        \"attributeName\": \"appRoles\",\r\n        \"attributeValue\": \"{{approleid}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_GROUP\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									]
								},
								"description": "Groups don't have access to Apps. Groups have GRANTS of Apps.\nUsers who are members of a Group to which an App has been granted have access to the App. \n\nFulfillment of a Grant of a ManagedApp to a Group doesn't require an Identity Connector Framework Connector (ICF).\n\n    Oracle Identity Cloud Service fulfills a Grant-to-Group by \"expanding\" it into a Grant-to-User for each User who is a member of that Group.\n    As members are added to (or removed from) the Group, Oracle Identity Cloud Service creates (or deletes) a Grant-to-User for each member.\n\nFulfillment of a Grant of an UnmanagedApp to a Group would be handled in the same way (by expanding it to a Grant-to-User for each member), unless that a Grant of an UnmanagedApp specifies an AppRole.\n\nFulfillment of Grant of an AppRole to a Group doesn't expand the Grant-to-Group into a Grant-to-User for each member (although technically fulfillment could do this).  Because Oracle Identity Cloud Service maintains internally the members of each AppRole, fulfillment simply adds that Group as a member of the AppRole. \n\nTechnically, this is far more efficient than adding each member of the Group as a member of the AppRole. If that Group is already a member of that AppRole, this is a NO-OP.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for grants of a specific app to groups",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants?filter=grantee.type eq \"Group\" and app.value eq \"{{appid}}\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									],
									"query": [
										{
											"key": "filter",
											"value": "grantee.type eq \"Group\" and app.value eq \"{{appid}}\""
										}
									]
								},
								"description": "Groups don't have access to Apps. Groups have GRANTS of Apps.\nUsers who are members of a Group to which an App has been granted have access to the App. \n\nThere are two ways to query Grants to Groups:\n\n- Query the /Grants endpoint directly with a filter such as:\n    - filter=grantee.value eq \"<idOfGroup>\", or\n    - filter=grantee[value eq \"<idOfGroup>\" and type eq \"Group\"] (if you distrust the uniqueness of IDs)\n- For convenience, each Oracle Identity Cloud Service Group has a grants attribute. \n    - GroupManager computes the values of this attribute for a particular Group by querying Grants to that Group.\n    - The grants attribute has the key information about each Grant to that Group, but not all of the information.\n        \nThis request is querying Grants.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Get a specific group returning all the grants to that group",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Groups/{{groupid}}?attributes=urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group:grants",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Groups",
										"{{groupid}}"
									],
									"query": [
										{
											"key": "attributes",
											"value": "urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group:grants"
										}
									]
								},
								"description": "Groups don't have access to Apps. Groups have GRANTS of Apps.\nUsers who are members of a Group to which an App has been granted have access to the App. \n\nSearch for the apps that a specific Group has access. Groups don't have an \"accounts\" attribute. Therefore, you can list the Apps that have been granted to this Group by requesting the \"groups\" attribute.\n\nThere are two ways to query Grants to Groups:\n\n- Query the /Grants endpoint directly with a filter such as:\n    - filter=grantee.value eq \"<idOfGroup>\", or\n    - filter=grantee[value eq \"<idOfGroup>\" and type eq \"Group\"] (if you distrust the uniqueness of IDs)\n- For convenience, each Oracle Identity Cloud Service Group has a grants attribute. \n    - GroupManager computes the values of this attribute for a particular Group by querying Grants to that Group.\n    - The grants attribute has the key information about each Grant to that Group, but not all of the information.\n        \nThis request is querying Grants.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for grants of specific approle to a specific group",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants?filter=grantee[type eq \"Group\" and value eq \"{{groupid}}\"] and entitlement[attributeName eq \"appRoles\" and attributeValue eq \"{{approleid}}\"]",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									],
									"query": [
										{
											"key": "filter",
											"value": "grantee[type eq \"Group\" and value eq \"{{groupid}}\"] and entitlement[attributeName eq \"appRoles\" and attributeValue eq \"{{approleid}}\"]"
										}
									]
								},
								"description": "Searches to see if a specific Group was granted a specific AppRole.\n\nJust like User, Group has a \"grants\" attribute. However, that will not tell you which AppRole was granted. You have to look into each Grant to tell that. Therefore, the best approach in this case is to just search Grants yourself. This provides more grant details.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for a specific group's grants of a specific app and any associated approles",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayName\": \"Employee\",\r\n  \"externalId\": \"123456\",\r\n  \"urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group\": {\r\n    \"creationMechanism\": \"api\",\r\n    \"description\": \"Employee Group\"\r\n  },\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:core:2.0:Group\",\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group\",\r\n    \"urn:ietf:params:scim:schemas:extension:custom:2.0:Group\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants?filter=grantee[value eq \"{{groupid}}\" and type eq \"Group\"] and app.value eq \"{{appid}}\"&attributes=entitlement[attributeName eq \"appRoles\"].attributeValue",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									],
									"query": [
										{
											"key": "filter",
											"value": "grantee[value eq \"{{groupid}}\" and type eq \"Group\"] and app.value eq \"{{appid}}\""
										},
										{
											"key": "attributes",
											"value": "entitlement[attributeName eq \"appRoles\"].attributeValue"
										}
									]
								},
								"description": "Groups don't have access to Apps. Groups have GRANTS of Apps.\r\nUsers who are members of a Group to which an App has been granted have access to the App. \r\n\r\nNote:\r\nIf the App is a ManagedApp, then there may be no AppRole at all.\r\n\r\nIf the App is an UnmanagedApp, then at least one AppRole would have been granted to the Group. The \"grants\" attribute of Group won't show you which AppRole was granted; for that you must query Grants.\r\n\r\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Get a specific group returning the distinct set of apps granted to the group",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Groups/{{groupid}}?attributes=urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group:grants.appId&distinct=true",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Groups",
										"{{groupid}}"
									],
									"query": [
										{
											"key": "attributes",
											"value": "urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group:grants.appId"
										},
										{
											"key": "distinct",
											"value": "true"
										}
									]
								},
								"description": "Groups don't have access to Apps. Groups have GRANTS of Apps.\nUsers who are members of a Group to which an App has been granted have access to the App. \n\nGet a list of the apps that a specific group has access to. Group doesn't have an \"accounts\" attribute. Therefore, you can list the Apps that have been granted to this Group by requesting the \"groups\" attribute.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for all groups that have grants of a specific app",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Groups?attributes=urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group:grants[appId eq \"{{appid}}\"]",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Groups"
									],
									"query": [
										{
											"key": "attributes",
											"value": "urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group:grants[appId eq \"{{appid}}\"]"
										}
									]
								},
								"description": "See https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ea32a967-5b6c-4d29-9432-af83991fbb63",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a50f8e4e-cb77-4e6b-b8bd-062e60fced59",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Users",
					"description": "There are two ways to query Grants to Users:\n- Query the /Grants endpoint directly with a filter:\n    filter=grantee.value eq \"<idOfUser>\", or\n    filter=grantee[value eq \"<idOfUser>\" and type eq \"User\"] (if you distrust the uniqueness of IDs)\n\n- Use the grants attribute for the Oracle Identity Cloud Service User\n    - UserManager computes the values of this attribute for a particular User by querying Grants to that User.\n    - The grants attribute has the key information about each Grant to that User, but not all of the information.\n\nIf you want to query only direct Grants to Users, then your search should filter out any Grants with the grantMechanism of \"GROUP_MEMBERSHIP\":\n\n\tfilter=grantee.value eq \"<idOfUser>\" and grantMechanism ne \"GROUP_MEMBERSHIP\", or\n\tfilter=grantee[value eq \"<idOfUser>\" and type eq \"User\"] and grantMechanism ne \"GROUP_MEMBERSHIP\"\n\nAn App (and optionally any of the AppRoles that it defines) can be granted to a User in two ways:\n\n- Directly: When the Grant specifies as grantee a particular User\n- Indirectly: When a Grant specifies as grantee a particular Group (of which the User is or becomes a member)\n\nGrants to Users Directly - When the Grant specifies as grantee a particular User, that Grant doesn't depend on a User's group memberships. The system fulfills (enacts) a Grant to a User by creating an AccountMgmtInfo resource that records the User's access to that App.\n\nIf the Grant specifies an AppRole, then fulfillment also adds the grantee-User as a member of the specified AppRole (unless that User is already a member of that AppRole).\n\nOracle Identity Cloud Service records that User as having access:\n\n- As soon as the first Grant of an App is fulfilled\n  and\n- As long as at least one Grant of that App to that User exists\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups.",
					"item": [
						{
							"name": "Revoke an AppRole from a User",
							"description": "Revoking direct grants is easy, but a user could also have indirect grants (by virtue of the User being a member of a Group to which the AppRole has been granted). \r\n\r\nIn such cases, you must decide whether to:\r\n\r\n1. Remove the User from the Group (which could revoke from that User other Apps granted to that Group)\r\n or\r\n2. Revoke the App from the Group (which would affect other members of that Group).\r\n\r\nRevoking direct grants of a specified AppRole from a specific User usually requires two steps:\r\n\r\n1. Find all direct Grants of that AppRole to that User.\r\n\r\n2. Delete each direct Grant.\r\n\r\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups.",
							"item": [
								{
									"name": "Step 1: Get all direct grants for a user",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"User\",\r\n         \"value\": \"{{userID}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appID}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_USER\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Grants?filter=grantee.value eq \"{{userid}}\" and entitlement[attributeName eq \"appRoles\" and attributeValue eq \"{{approleid}}\"]",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Grants"
											],
											"query": [
												{
													"key": "filter",
													"value": "grantee.value eq \"{{userid}}\" and entitlement[attributeName eq \"appRoles\" and attributeValue eq \"{{approleid}}\"]"
												}
											]
										},
										"description": "Get all direct Grants for a User to obtain the IDs for the Grants that you want to revoke from the User.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
									},
									"response": []
								},
								{
									"name": "Step 2: Delete a grant",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Grants/{{grantid}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Grants",
												"{{grantid}}"
											]
										},
										"description": "Caution: Deleting Grants is easy, but if the User obtained access to the App indirectly (via Grant-to-Group), then you must decide whether to:\r\n\r\nA) Revoke the App from each Group\r\n\r\nB) Remove the User from each Group\r\n\r\nEither approach has side effects:\r\n\r\nRevoking the App from a Group affects other members of that Group.\r\n\r\nRemoving the User from a Group revokes any other Apps that the User may have as a result of that Group membership.\r\n\r\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "08407b55-e75a-4ca0-8600-72ba4b50d1fe",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9af3c2b3-6af2-4e93-bb49-3e5ad17f13e0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Revoke a Managed App from a User",
							"description": "This folder contains the requests required to revoke a Managed App from a User.\n\nCaution: Deleting Grants is easy, but if the User obtained access to the App indirectly (via Grant-to-Group), then you must decide whether to:\n\nA) Revoke the App from each Group\n\nB) Remove the User from each Group\n\nEither approach has side effects:\n\nRevoking the App from a Group affects other members of that Group.\n\nRemoving the User from a Group revokes any other Apps that the User may have as a result of that Group membership.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups.",
							"item": [
								{
									"name": "Step 1: Get direct grants for a user for a specific app",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"User\",\r\n         \"value\": \"{{userID}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appID}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_USER\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Grants?filter=grantee[type eq \"User\" and value eq \"{{userid}}\"] and app eq \"{{appid}}\"",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Grants"
											],
											"query": [
												{
													"key": "filter",
													"value": "grantee[type eq \"User\" and value eq \"{{userid}}\"] and app eq \"{{appid}}\""
												}
											]
										},
										"description": "Get direct Grants for a User for a specific App to obtain the IDs for the Grants that you want to revoke from the User.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
									},
									"response": []
								},
								{
									"name": "Step 2: Delete a grant",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Grants/{{grantid}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Grants",
												"{{grantid}}"
											]
										},
										"description": "Caution: Deleting Grants is easy, but if the User obtained access to the App indirectly (via Grant-to-Group), then you must decide whether to:\r\n\r\nA) Revoke the App from each Group\r\n\r\nB) Remove the User from each Group\r\n\r\nEither approach has side effects:\r\n\r\nRevoking the App from a Group affects other members of that Group.\r\n\r\nRemoving the User from a Group revokes any other Apps that the User may have as a result of that Group membership.\r\n\r\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4de88ea9-c88e-4079-ab77-2dd9fe668d1a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "89614de8-8db8-4256-b604-017e6540aeb0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Grant a managed app to a user",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"User\",\r\n         \"value\": \"{{userid}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appid}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_USER\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									]
								},
								"description": "Grants access to a specific Managed App for a specific User.\n\nFulfillment of a Grant of a ManagedApp to a User uses an Identity Connector Framework Connector (ICF) to create an account in the identity repository of the ManagedApp.\n\nOnce the account is created, fulfillment fulfillment of a Grant-to-User records in /AccountMgmtInfos (AMI) the fact that a particular User has access to a particular App:\n\n- For an UnmanagedApp, which accepts the Oracle Identity Cloud Service User as a login identity, the AMI-entry has only \"shallow\" information, such as:\n        -a reference to the App\n        -a reference to the User\n        -whether that App is a favorite of that User\n- For a ManagedApp, which has its own identity-repository, the AMI-entry also has a \"deeper\" link:\n        -a reference to the dynamic resource that represents that User's account in that App\n        -the dynamic resource may also persist values of the attributes of that account, some of which may represent entitlements.\n\nOracle Identity Cloud Service maintains /AccountMgmtInfos internally. An external requester can't query /AccountMgmtInfos directly, but Oracle Identity Cloud Service offers several convenience views into AccountMgmtInfos:\n\n- Each App resource has an \"accounts\" attribute that queries AccountMgmtInfos for that particular App.\n- Each User resource has an \"accounts\" attribute that queries AccountMgmtInfos for that particular User.\n\n------\nA Grant says that someone (the grantor) says that someone (a grantee) should have something (access to an App, and optionally an entitlement within that App).\n\n- The grantor is typically an administrator (but could also be some component of the system).\n- The grantee is typically a User, but could also be a Group or another App.\n- The granted App may be accompanied by an entitlement defined by that App.\n\t- In general, an entitlement can be any specific value of any specific attribute of the App-specific identity.\n\t(A ManagedApp has its own identity-repository, so it defines the attributes for its own identities.)\n\t- One special case of an entitlement is membership in an AppRole defined by the App.\n    (Granting an AppRole defined by the App necessarily grants access to the App.)\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Grant an unmanaged app to a user",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"User\",\r\n         \"value\": \"{{userid}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appid}}\"\r\n    },\r\n    \"entitlement\" : {\r\n        \"attributeName\": \"appRoles\",\r\n        \"attributeValue\": \"{{approleid}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_USER\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									]
								},
								"description": "Grants access to a specific Managed App for a specific User.\n\nFulfillment of a Grant of a ManagedApp to a User uses an Identity Connector Framework Connector (ICF) to create an account in the identity repository of the ManagedApp.\n\nOnce the account is created, fulfillment fulfillment of a Grant-to-User records in /AccountMgmtInfos (AMI) the fact that a particular User has access to a particular App:\n\n- For an UnmanagedApp, which accepts the Oracle Identity Cloud Service User as a login identity, the AMI-entry has only \"shallow\" information, such as:\n        -a reference to the App\n        -a reference to the User\n        -whether that App is a favorite of that User\n- For a ManagedApp, which has its own identity-repository, the AMI-entry also has a \"deeper\" link:\n        -a reference to the dynamic resource that represents that User's account in that App\n        -the dynamic resource may also persist values of the attributes of that account, some of which may represent entitlements.\n\nOracle Identity Cloud Service maintains /AccountMgmtInfos internally. An external requester can't query /AccountMgmtInfos directly, but Oracle Identity Cloud Service offers several convenience views into AccountMgmtInfos:\n\n- Each App resource has an \"accounts\" attribute that queries AccountMgmtInfos for that particular App.\n- Each User resource has an \"accounts\" attribute that queries AccountMgmtInfos for that particular User.\n\n--------\nA Grant says that someone (the grantor) says that someone (a grantee) should have something (access to an App, and optionally an entitlement within that App).\n\n- The grantor is typically an administrator (but could also be some component of the system).\n- The grantee is typically a User, but could also be a Group or another App.\n- The granted App may be accompanied by an entitlement defined by that App.\n\t- In general, an entitlement can be any specific value of any specific attribute of the App-specific identity.\n\t(A ManagedApp has its own identity-repository, so it defines the attributes for its own identities.)\n\t- One special case of an entitlement is membership in an AppRole defined by the App.\n    (Granting an AppRole defined by the App necessarily grants access to the App.)\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Grant an approle to a user",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"User\",\r\n         \"value\": \"{{userid}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appid}}\"\r\n    },\r\n    \"entitlement\" : {\r\n        \"attributeName\": \"appRoles\",\r\n        \"attributeValue\": \"{{approleid}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_USER\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									]
								},
								"description": "A Grant of an AppRole specifies as the granted App the App that defines the AppRole, and specifies the AppRole as an entitlement. You must specify the AppRole in the payload after \"app\" when granting an AppRole to a user\n\nFulfillment of a Grant of an AppRole to a User doesn't require an Identity Connector Framework Connector (ICF). Because Oracle Identity Cloud Service maintains internally the members of each AppRole, fulfillment simply adds that User as a member of the AppRole. If that User is already a member of that AppRole, this is a NO-OP.\n\n--------\nA Grant says that someone (the grantor) says that someone (a grantee) should have something (access to an App, and optionally an entitlement within that App).\n\n- The grantor is typically an administrator (but could also be some component of the system).\n- The grantee is typically a User, but could also be a Group or another App.\n- The granted App may be accompanied by an entitlement defined by that App.\n\t- In general, an entitlement can be any specific value of any specific attribute of the App-specific identity.\n\t(A ManagedApp has its own identity-repository, so it defines the attributes for its own identities.)\n\t- One special case of an entitlement is membership in an AppRole defined by the App.\n    (Granting an AppRole defined by the App necessarily grants access to the App.)\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search grants to a specific user",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"User\",\r\n         \"value\": \"{{userID}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appID}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_USER\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants?filter=grantee[value eq \"{{userid}}\" and type eq \"User\"]",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									],
									"query": [
										{
											"key": "filter",
											"value": "grantee[value eq \"{{userid}}\" and type eq \"User\"]"
										}
									]
								},
								"description": "Brings back more details about each Grant, such as who created the grant or when the grant was created.\n\nThere are two ways to query Grants to Users:\n\n    Query the /Grants endpoint directly with a filter such as:\n        filter=grantee.value eq \"<idOfUser>\", or\n        filter=grantee[value eq \"<idOfUser>\" and type eq \"User\"] (if you distrust the uniqueness of IDs)\n    For convenience, each Oracle Identity Cloud Service User has a grants attribute: \n        UserManager computes the values of this attribute for a particular User by querying Grants to that User.\n        The grants attribute has the key information about each Grant to that User, but not all of the information.\n\nNOTE: If you want to query only direct Grants to Users, then your search should filter out any Grant with grantMechanism of \"GROUP_MEMBERSHIP\"\n\n    filter=grantee.value eq \"<idOfUser>\" and grantMechanism ne \"GROUP_MEMBERSHIP\", or\n    filter=grantee[value eq \"<idOfUser>\" and type eq \"User\"] and grantMechanism ne \"GROUP_MEMBERSHIP\"\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for grants of a specific app to a specific user",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"User\",\r\n         \"value\": \"{{userID}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appID}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_USER\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants?filter=grantee[type eq \"User\" and value eq \"{{userid}}\"] and app eq \"{{appid}}\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									],
									"query": [
										{
											"key": "filter",
											"value": "grantee[type eq \"User\" and value eq \"{{userid}}\"] and app eq \"{{appid}}\""
										}
									]
								},
								"description": "Brings back more details about each Grant, such as who created the grant or when the grant was created.\n\nThere are two ways to query Grants to Users:\n\n    Query the /Grants endpoint directly with a filter such as:\n        filter=grantee.value eq \"<idOfUser>\", or\n        filter=grantee[value eq \"<idOfUser>\" and type eq \"User\"] (if you distrust the uniqueness of IDs)\n    For convenience, each Oracle Identity Cloud Service User has a grants attribute: \n        UserManager computes the values of this attribute for a particular User by querying Grants to that User.\n        The grants attribute has the key information about each Grant to that User, but not all of the information.\n\nNOTE: If you want to query only direct Grants to Users, then your search should filter out any Grant with grantMechanism of \"GROUP_MEMBERSHIP\"\n\n    filter=grantee.value eq \"<idOfUser>\" and grantMechanism ne \"GROUP_MEMBERSHIP\", or\n    filter=grantee[value eq \"<idOfUser>\" and type eq \"User\"] and grantMechanism ne \"GROUP_MEMBERSHIP\"\n    \n------ \nA Grant says that someone (the grantor) says that someone (a grantee) should have something (access to an App, and optionally an entitlement within that App).\n\n- The grantor is typically an administrator (but could also be some component of the system).\n- The grantee is typically a User, but could also be a Group or another App.\n- The granted App may be accompanied by an entitlement defined by that App.\n\t- In general, an entitlement can be any specific value of any specific attribute of the App-specific identity.\n\t(A ManagedApp has its own identity-repository, so it defines the attributes for its own identities.)\n\t- One special case of an entitlement is membership in an AppRole defined by the App.\n    (Granting an AppRole defined by the App necessarily grants access to the App.)\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for all direct grants of a specific approle to a specific user",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"User\",\r\n         \"value\": \"{{userID}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appID}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_USER\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants?filter=grantee[value eq \"{{userid}}\" and type eq \"User\"] and entitlement[attributeName eq \"appRoles\" and attributeValue eq \"{{approleid}}\"]",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									],
									"query": [
										{
											"key": "filter",
											"value": "grantee[value eq \"{{userid}}\" and type eq \"User\"] and entitlement[attributeName eq \"appRoles\" and attributeValue eq \"{{approleid}}\"]"
										}
									]
								},
								"description": "List the direct Grants of a specific AppRole to a specific User.\n\nThere are two ways to query Grants to Users:\n\n    Query the /Grants endpoint directly with a filter such as:\n        filter=grantee.value eq \"<idOfUser>\", or\n        filter=grantee[value eq \"<idOfUser>\" and type eq \"User\"] (if you distrust the uniqueness of IDs)\n    For convenience, each Oracle Identity Cloud Service User has a grants attribute: \n        UserManager computes the values of this attribute for a particular User by querying Grants to that User.\n        The grants attribute has the key information about each Grant to that User, but not all of the information.\n\nNOTE: If you want to query only direct Grants to Users, then your search should filter out any Grant with grantMechanism of \"GROUP_MEMBERSHIP\"\n\n    filter=grantee.value eq \"<idOfUser>\" and grantMechanism ne \"GROUP_MEMBERSHIP\", or\n    filter=grantee[value eq \"<idOfUser>\" and type eq \"User\"] and grantMechanism ne \"GROUP_MEMBERSHIP\"\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for all direct grants of a specific app to any user",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants?filter=app.value eq \"{{appid}}\" and grantee.type eq \"User\" and grantMechanism ne \"GROUP_MEMBERSHIP\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									],
									"query": [
										{
											"key": "filter",
											"value": "app.value eq \"{{appid}}\" and grantee.type eq \"User\" and grantMechanism ne \"GROUP_MEMBERSHIP\""
										}
									]
								},
								"description": "There are two ways to query Grants to Users:\n\n    Query the /Grants endpoint directly with a filter such as:\n        filter=grantee.value eq \"<idOfUser>\", or\n        filter=grantee[value eq \"<idOfUser>\" and type eq \"User\"] (if you distrust the uniqueness of IDs)\n    For convenience, each Oracle Identity Cloud Service User has a grants attribute: \n        UserManager computes the values of this attribute for a particular User by querying Grants to that User.\n        The grants attribute has the key information about each Grant to that User, but not all of the information.\n\nNOTE: If you want to query only direct Grants to Users, then your search should filter out any Grant with grantMechanism of \"GROUP_MEMBERSHIP\"\n\n    filter=grantee.value eq \"<idOfUser>\" and grantMechanism ne \"GROUP_MEMBERSHIP\", or\n    filter=grantee[value eq \"<idOfUser>\" and type eq \"User\"] and grantMechanism ne \"GROUP_MEMBERSHIP\"\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for all indirect grants of a specific app to any user",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants?filter=app.value eq \"{{appid}}\" and grantee.type eq \"User\" and grantMechanism eq \"GROUP_MEMBERSHIP\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									],
									"query": [
										{
											"key": "filter",
											"value": "app.value eq \"{{appid}}\" and grantee.type eq \"User\" and grantMechanism eq \"GROUP_MEMBERSHIP\""
										}
									]
								},
								"description": "There are two ways to query Grants to Users:\n\n    Query the /Grants endpoint directly with a filter such as:\n        filter=grantee.value eq \"<idOfUser>\", or\n        filter=grantee[value eq \"<idOfUser>\" and type eq \"User\"] (if you distrust the uniqueness of IDs)\n    For convenience, each Oracle Identity Cloud Service User has a grants attribute: \n        UserManager computes the values of this attribute for a particular User by querying Grants to that User.\n        The grants attribute has the key information about each Grant to that User, but not all of the information.\n\nNOTE: If you want to query only direct Grants to Users, then your search should filter out any Grant with grantMechanism of \"GROUP_MEMBERSHIP\"\n\n    filter=grantee.value eq \"<idOfUser>\" and grantMechanism ne \"GROUP_MEMBERSHIP\", or\n    filter=grantee[value eq \"<idOfUser>\" and type eq \"User\"] and grantMechanism ne \"GROUP_MEMBERSHIP\"\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "List all grants for a specific user",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"User\",\r\n         \"value\": \"{{userID}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appID}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_USER\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Users/{{userid}}?attributes=urn:ietf:params:scim:schemas:oracle:idcs:extension:user:User:grants",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Users",
										"{{userid}}"
									],
									"query": [
										{
											"key": "attributes",
											"value": "urn:ietf:params:scim:schemas:oracle:idcs:extension:user:User:grants"
										}
									]
								},
								"description": "Get all Apps that a specific User has access to and for how many different reasons (grants) does the user have access to each.\n\nNote: To obtain additional details about each Grant (such as who created them or when), query /Grants. See the Grants Search folder for examples.\n\nA Grant says that someone (the grantor) says that someone (a grantee) should have something (access to an App, and optionally an entitlement within that App).\n\n- The grantor is typically an administrator (but could also be some component of the system).\n- The grantee is typically a User, but could also be a Group or another App.\n- The granted App may be accompanied by an entitlement defined by that App.\n\t- In general, an entitlement can be any specific value of any specific attribute of the App-specific identity.\n\t(A ManagedApp has its own identity-repository, so it defines the attributes for its own identities.)\n\t- One special case of an entitlement is membership in an AppRole defined by the App.\n    (Granting an AppRole defined by the App necessarily grants access to the App.)\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "List all grants of a specific app for a specific user",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"User\",\r\n         \"value\": \"{{userID}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appID}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_USER\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Users/{{userid}}?attributes=urn:ietf:params:scim:schemas:oracle:idcs:extension:user:User:grants[appId eq \"{{appid}}\"]",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Users",
										"{{userid}}"
									],
									"query": [
										{
											"key": "attributes",
											"value": "urn:ietf:params:scim:schemas:oracle:idcs:extension:user:User:grants[appId eq \"{{appid}}\"]"
										}
									]
								},
								"description": "The system fulfills (enacts) a Grant to a User by creating an AccountMgmtInfo resource that records the User's access to that App. \r\n\r\nIf the Grant specifies an AppRole, then fulfillment also adds the grantee User as a member of the specified AppRole (unless that User is already a member of that AppRole).\r\n\r\n-------\r\nA Grant says that someone (the grantor) says that someone (a grantee) should have something (access to an App, and optionally an entitlement within that App).\r\n\r\n- The grantor is typically an administrator (but could also be some component of the system).\r\n- The grantee is typically a User, but could also be a Group or another App.\r\n- The granted App may be accompanied by an entitlement defined by that App.\r\n\t- In general, an entitlement can be any specific value of any specific attribute of the App-specific identity.\r\n\t(A ManagedApp has its own identity-repository, so it defines the attributes for its own identities.)\r\n\t- One special case of an entitlement is membership in an AppRole defined by the App.\r\n    (Granting an AppRole defined by the App necessarily grants access to the App.)\r\n\r\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c10e3fc2-fee5-4f95-a986-75cd836a955f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c6e1b502-63bb-44a7-95ac-fd758def58a5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "6956a4cb-a5ef-4e4b-b2d7-aa1a9ffb8c35",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "bcc6c6f9-f206-4d90-91ea-d32ccc909036",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Groups",
			"description": "As an identity domain administrator or user administrator, you use Oracle Identity Cloud Service groups to manage the accounts of users to whom you want to grant access to Oracle applications or application roles.\r\n\r\nIn Oracle Identity Cloud Service, groups are the links between user accounts and applications. They contain privileges that you grant to users. Groups ease the administration of user privileges.\r\nUsing groups, you can:\r\n\r\n- Designate the applications and application roles that users can access through the Identity Cloud Service console\r\n\r\n- Assign users to the groups\r\n\r\n- Designate other Oracle Identity Cloud Service administrators to perform actions on groups:\r\n\r\n    - Assigning or removing members to or from the current group\r\n\r\n    - Modifying other characteristics of the group, such as the group description\r\n    \r\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups.",
			"item": [
				{
					"name": "Create",
					"description": "",
					"item": [
						{
							"name": "Create a group with members",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/scim+json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayName\": \"Contractors\",\r\n  \"externalId\": \"123456\",\r\n  \"urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group\": {\r\n    \"creationMechanism\": \"api\",\r\n    \"description\": \"Group with contractors\"\r\n  },\r\n  \"members\": [\r\n    {\r\n      \"value\": \"{{userid}}\",\r\n      \"type\": \"User\"\r\n    }\r\n  ],\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:core:2.0:Group\",\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group\",\r\n    \"urn:ietf:params:scim:schemas:extension:custom:2.0:Group\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Groups",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Groups"
									]
								},
								"description": "Creating a group with members"
							},
							"response": []
						},
						{
							"name": "Create a group without members",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayName\": \"Example Name\",\r\n  \"externalId\": \"123456\",\r\n  \"urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group\": {\r\n    \"creationMechanism\": \"api\",\r\n    \"description\": \"Example Description\"\r\n  },\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:core:2.0:Group\",\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group\",\r\n    \"urn:ietf:params:scim:schemas:extension:custom:2.0:Group\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Groups",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Groups"
									]
								},
								"description": "Creating an empty group"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete",
					"description": "",
					"item": [
						{
							"name": "Delete group",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Groups/{{groupid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Groups",
										"{{groupid}}"
									]
								},
								"description": "Delete a Group based on {{id}} already created in IDCS domain."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Membership",
					"description": "See https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups.",
					"item": [
						{
							"name": "Search all groups membership",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Groups?attributes=members,displayName",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Groups"
									],
									"query": [
										{
											"key": "attributes",
											"value": "members,displayName"
										}
									]
								},
								"description": "See https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Remove group members",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\r\n  ],\r\n  \"Operations\": [\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"members[value eq \\\"{{userid}}\\\"]\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Groups/{{groupid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Groups",
										"{{groupid}}"
									]
								},
								"description": "Remove a user from a specific group."
							},
							"response": []
						},
						{
							"name": "Add group members",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\r\n  ],\r\n  \"Operations\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"members\",\r\n      \"value\": [\r\n        {\r\n          \"value\": \"{{userid}}\",\r\n          \"type\": \"User\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Groups/{{groupid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Groups",
										"{{groupid}}"
									]
								},
								"description": "Add a group member(s) to a specific group."
							},
							"response": []
						},
						{
							"name": "Is a specific user a member of a specific group?",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Groups/{{groupid}}?attributes=members[type eq \"User\" and value eq \"{{userid}}\"]",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Groups",
										"{{groupid}}"
									],
									"query": [
										{
											"key": "attributes",
											"value": "members[type eq \"User\" and value eq \"{{userid}}\"]"
										}
									]
								},
								"description": "Search a specific Group for a specific User's membership in that Group.\n\nIn the response, you either see no value (if User isn't a member) or one member value (if the User is a member).\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for group membership (for a specific user)",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Groups?filter=members[type eq \"User\" and value eq \"{{userid}}\"]",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Groups"
									],
									"query": [
										{
											"key": "filter",
											"value": "members[type eq \"User\" and value eq \"{{userid}}\"]"
										}
									]
								},
								"description": "Searches for and displays the Groups that the User belongs to.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for groups and request the display name of each member",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Groups?attributes=members.display&filter=displayName sw \"PCI\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Groups"
									],
									"query": [
										{
											"key": "attributes",
											"value": "members.display"
										},
										{
											"key": "filter",
											"value": "displayName sw \"PCI\""
										}
									]
								},
								"description": "See https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for a user's membership in a specific group",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Groups/{{groupid}}?attributes=members[value eq \"{{userid}}\"].display",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Groups",
										"{{groupid}}"
									],
									"query": [
										{
											"key": "attributes",
											"value": "members[value eq \"{{userid}}\"].display"
										}
									]
								},
								"description": "Searches to see if a specific User belongs to a specific Group showing the user's display name.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "See whether a specific group has membership in a specific approle",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Groups/{{groupid}}?attributes=urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group:appRoles[value eq \"{{approleid}}\"]",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Groups",
										"{{groupid}}"
									],
									"query": [
										{
											"key": "attributes",
											"value": "urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group:appRoles[value eq \"{{approleid}}\"]"
										}
									]
								},
								"description": "Searches to see if a specific Group has membership in a specific AppRole.\n\nThere are at least two ways to query a Group's memberships in AppRoles:\n\nThe best way is to use the appRoles attribute of Group:\n    - For a particular User, request the appRoles attribute and optionally restrict its values\n    - To find Groups who are members of a particular AppRole, search /Users and filter on the appRoles attribute\n         \nThe other way, if you're interested in direct memberships only, is to query /AppRoles, searching on the members attribute.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "See all of a specific group's memberships in approles",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Groups/{{groupid}}?attributes=urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group:appRoles",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Groups",
										"{{groupid}}"
									],
									"query": [
										{
											"key": "attributes",
											"value": "urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group:appRoles"
										}
									]
								},
								"description": "Get a list of a specific Group's memberships in AppRoles.\n\nThere are at least two ways to query a Group's memberships in AppRoles:\n\nThe best way is to use the appRoles attribute of Group:\n    - For a particular User, request the appRoles attribute and optionally restrict its values\n    - To find Groups who are members of a particular AppRole, search /Users and filter on the appRoles attribute\n         \nThe other way, if you're interested in direct memberships only, is to query /AppRoles, searching on the members attribute.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "List the members of a specific group that are users",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Groups/{{groupid}}?attributes=members[type eq \"User\"]",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Groups",
										"{{groupid}}"
									],
									"query": [
										{
											"key": "attributes",
											"value": "members[type eq \"User\"]"
										}
									]
								},
								"description": "List the members of a specific group that are users.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for groups that are members of a specific approle",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Groups?filter=urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group:appRoles.value eq \"{{approleid}}\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Groups"
									],
									"query": [
										{
											"key": "filter",
											"value": "urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group:appRoles.value eq \"{{approleid}}\""
										}
									]
								},
								"description": "Searches for groups that are members of a specific AppRole.\n\nThere are at least two ways to query a Group's memberships in AppRoles:\n\nThe best way is to use the appRoles attribute of Group:\n    - For a particular User, request the appRoles attribute and optionally restrict its values\n    - To find Groups who are members of a particular AppRole, search /Users and filter on the appRoles attribute\n         \nThe other way, if you're interested in direct memberships only, is to query /AppRoles, searching on the members attribute.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for groups of which a specific user is a member",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/scim+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Groups?filter=members[type eq \"User\" and value eq \"{{userid}}\"]",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Groups"
									],
									"query": [
										{
											"key": "filter",
											"value": "members[type eq \"User\" and value eq \"{{userid}}\"]"
										}
									]
								},
								"description": "Searches for and displays the User's Group memberships.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "92fba46c-c85b-41e2-9994-bf94c0c2ebd4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ca349521-d249-41b9-9fe8-28904292549d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Modify",
					"description": "",
					"item": [
						{
							"name": "Search all groups (with search criteria)",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Groups?filter=displayName sw \"Emp\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Groups"
									],
									"query": [
										{
											"key": "filter",
											"value": "displayName sw \"Emp\""
										}
									]
								},
								"description": "filter = add a filter criteria to the search using attributes, values, and operators"
							},
							"response": []
						},
						{
							"name": "Replace a group",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayName\": \"Retired Employees\",\r\n  \"externalId\": \"123456\",\r\n  \"urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group\": {\r\n    \"description\": \"Employees retired from Example\"\r\n  },\r\n  \"members\": [\r\n    {\r\n      \"value\": \"{{userid}}\",\r\n      \"type\": \"User\"\r\n    }\r\n  ],\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:core:2.0:Group\",\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group\",\r\n    \"urn:ietf:params:scim:schemas:extension:custom:2.0:Group\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Groups/{{groupid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Groups",
										"{{groupid}}"
									]
								},
								"description": "Replace a Group {{id}} with all new group name and its members."
							},
							"response": []
						},
						{
							"name": "Update group (replace single attribute)",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\r\n  ],\r\n  \"Operations\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"displayName\",\r\n      \"value\": \"Employees from Example\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Groups/{{groupid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Groups",
										"{{groupid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update group (multiple attributes)",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\r\n  ],\r\n  \"Operations\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"displayName\",\r\n      \"value\": \"Example Contractors\"\r\n    },\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group:description\",\r\n      \"value\": \"Contractors from Example\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Groups/{{groupid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Groups",
										"{{groupid}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Search",
					"description": "",
					"item": [
						{
							"name": "Get a specific group (returning specific attributes)",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Groups/{{groupid}}?attributes=displayName",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Groups",
										"{{groupid}}"
									],
									"query": [
										{
											"key": "attributes",
											"value": "displayName"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search groups with filters using POST",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:SearchRequest\"],\r\n  \"attributes\": [\"displayName\", \"externalId\"],\r\n  \"filter\":\r\n          \"displayName sw \\\"Employee\\\"\",\r\n  \"startIndex\": 1,\r\n  \"count\": 10\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Groups/.search",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Groups",
										".search"
									]
								},
								"description": "Searching the existing groups using the POST method."
							},
							"response": []
						},
						{
							"name": "Get a specific group (returning all default attributes)",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Groups/{{groupid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Groups",
										"{{groupid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search all groups (with search criteria)",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Groups?filter=displayName sw \"Emp\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Groups"
									],
									"query": [
										{
											"key": "filter",
											"value": "displayName sw \"Emp\""
										}
									]
								},
								"description": "filter = add a filter criteria to the search using attributes, values, and operators"
							},
							"response": []
						},
						{
							"name": "List all groups (returning specific attributes)",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Groups?attributes=displayName",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Groups"
									],
									"query": [
										{
											"key": "attributes",
											"value": "displayName"
										}
									]
								},
								"description": "attributes = comma separated list of values retrieved in a search"
							},
							"response": []
						},
						{
							"name": "List all groups (with result pagination)",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayName\": \"Employee\",\r\n  \"externalId\": \"123456\",\r\n  \"urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group\": {\r\n    \"creationMechanism\": \"api\",\r\n    \"description\": \"Employee Group\"\r\n  },\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:core:2.0:Group\",\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group\",\r\n    \"urn:ietf:params:scim:schemas:extension:custom:2.0:Group\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Groups?count=5&startIndex=0",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Groups"
									],
									"query": [
										{
											"key": "count",
											"value": "5"
										},
										{
											"key": "startIndex",
											"value": "0"
										}
									]
								},
								"description": "Searching the existing groups"
							},
							"response": []
						},
						{
							"name": "List all groups",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayName\": \"Employee\",\r\n  \"externalId\": \"123456\",\r\n  \"urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group\": {\r\n    \"creationMechanism\": \"api\",\r\n    \"description\": \"Employee Group\"\r\n  },\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:core:2.0:Group\",\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group\",\r\n    \"urn:ietf:params:scim:schemas:extension:custom:2.0:Group\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Groups",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Groups"
									]
								},
								"description": "Searching the existing groups"
							},
							"response": []
						},
						{
							"name": "Get a specific group returning that group's memberships in approles defined by a specific app",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Groups/{{groupid}}?attributes=urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group:appRoles[appId eq \"{{appid}}\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Groups",
										"{{groupid}}"
									],
									"query": [
										{
											"key": "attributes",
											"value": "urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group:appRoles[appId eq \"{{appid}}\""
										}
									]
								},
								"description": "Get a list of a specific Group's AppRoles for a specific App.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Grants",
					"description": "Granting anything to a Group grants it implicitly (and indirectly) to each User who is a member of that Group.\r\n\r\n    - The system fulfills (enacts) a Grant to a Group by expanding the Grant-to-Group into a Grant-to-User for each User who is a member of that Group.\r\n    - The system also creates (and deletes) Grants-to-User as members are added to (and removed from) the grantee Group.\r\n\r\nNote that the Group itself has no access to an App. Only the Users who are members of that Group can have access.\r\n\r\nA Grant that specifies as grantee a particular Group implies conditional access for each User member of that Group.  We call this an indirect Grant to User, because the direct Grant-to-Group produces and maintains a Grant-to-User per member.\r\n\r\nFulfillment of Grant to Group\r\n\r\nFulfillment of a Grant of a ManagedApp to a Group doesn't require an Identity Connector Framework Connector (ICF).\r\n\r\n- Oracle Identity Cloud Service fulfills a Grant-to-Group by \"expanding\" it into a Grant-to-User for each User who is a member of that Group.\r\n- As members are added to (or removed from) the Group, Oracle Identity Cloud Service creates (or deletes) a Grant-to-User for each member.\r\n\r\nFulfillment of a Grant of an UnmanagedApp to a Group would be handled in the same way (by expanding it to a Grant-to-User for each member), unless that Grant of an UnmanagedApp specifies an AppRole.\r\n\r\nFulfillment of Grant of an AppRole to a Group doesn't expand the Grant-to-Group into a Grant-to-User for each member (although technically fulfillment could do this). Because Oracle Identity Cloud Service maintains internally the members of each AppRole, fulfillment simply adds that Group as a member of the AppRole. \r\n\r\nTechnically, this is far more efficient than adding each member of the Group as a member of the AppRole. If that Group is already a member of that AppRole, this is a NO-OP.\r\n\r\nNote: The values of the appRoles attribute of User are computed so as to indicate that the User has an indirect membership in the AppRole.\r\n\r\nQuerying Grants to Groups\r\n\r\nThere are two ways to query Grants to Groups:\r\n\r\n- Query the /Grants endpoint directly with a filter such as:\r\n\tfilter=grantee.value eq \"<idOfGroup>\", or\r\n\tfilter=grantee[value eq \"<idOfGroup>\" and type eq \"Group\"] (if you distrust the uniqueness of IDs)\r\n- For convenience, each Oracle Identity Cloud Service Group has a grants attribute. \r\n\tGroupManager computes the values of this attribute for a particular Group by querying Grants to that Group.\r\n\tThe grants attribute has the key information about each Grant to that Group, but not all of the information.\r\n\r\n-------\r\nA Grant says that someone (the grantor) says that someone (a grantee) should have something (access to an App, and optionally an entitlement within that App).\r\n\r\n- The grantor is typically an administrator (but could also be some component of the system).\r\n- The grantee is typically a User, but could also be a Group or another App.\r\n- The granted App may be accompanied by an entitlement defined by that App.\r\n\t- In general, an entitlement can be any specific value of any specific attribute of the App-specific identity.\r\n\t(A ManagedApp has its own identity-repository, so it defines the attributes for its own identities.)\r\n\t- One special case of an entitlement is membership in an AppRole defined by the App.\r\n    (Granting an AppRole defined by the App necessarily grants access to the App.)\r\n\r\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups.",
					"item": [
						{
							"name": "Revoke an AppRole from a Group",
							"description": "This is a two-step process:\n\n1. Search for the Grants of the AppRole to the Group.\n2. Revoke an AppRole from the Group.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups.",
							"item": [
								{
									"name": "Step 1: Get all grants of the approle to this group",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"User\",\r\n         \"value\": \"{{userID}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appID}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_USER\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Grants?filter=grantee[type eq \"Group\" and value eq \"{{groupid}}\"] and entitlement[attributeName=\"appRoles\" and attributeValue eq \"{{approleid}}\"]",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Grants"
											],
											"query": [
												{
													"key": "filter",
													"value": "grantee[type eq \"Group\" and value eq \"{{groupid}}\"] and entitlement[attributeName=\"appRoles\" and attributeValue eq \"{{approleid}}\"]"
												}
											]
										},
										"description": "Get all grants of the AppRole to this Group to obtain the Grant IDs that you need to remove."
									},
									"response": []
								},
								{
									"name": "Step 2: Delete each grant",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Grants/{{grantid}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Grants",
												"{{grantid}}"
											]
										},
										"description": "Delete the grant of the AppRole for the Group."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bcd422be-0a48-40dc-a866-e6aeaf0b4bb2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "30f72ac1-c996-4e97-ba7d-600d737712c4",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Revoke an Unmanaged App from a Group",
							"description": "This folder contains the requests required to revoke an Unmanaged App from a Group.\n\n1. Search for the Grants of the approle to the Group.\n2. Revoke an AppRole from the Group.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups.",
							"item": [
								{
									"name": "Step 1: Get the grants of the approle to this group",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"User\",\r\n         \"value\": \"{{userID}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appID}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_USER\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Grants?filter=grantee[value eq \"{{groupid}}\" and type eq \"Group\"]&entitlement[attributeName eq \"appRoles\"&attributeValue eq \"\n{{approlid}}\"]",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Grants"
											],
											"query": [
												{
													"key": "filter",
													"value": "grantee[value eq \"{{groupid}}\" and type eq \"Group\"]"
												},
												{
													"key": "entitlement[attributeName eq \"appRoles\"",
													"value": null
												},
												{
													"key": "attributeValue eq \"\n{{approlid}}\"]",
													"value": null
												}
											]
										},
										"description": "Search for grants of the approle to this group to get the grantID of the grant that you want to revoke for the group."
									},
									"response": []
								},
								{
									"name": "Step 2: Delete each grant",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Grants/{{grantid}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Grants",
												"{{grantid}}"
											]
										},
										"description": "Remove a grant, which removes the Group's access to the unmanaged App."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4de88ea9-c88e-4079-ab77-2dd9fe668d1a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "89614de8-8db8-4256-b604-017e6540aeb0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Revoke a Managed App from a Group",
							"description": "This folder contains the requests required to revoke a Managed App from a Group.\n\n1. Search for Grants of the specified App to this Group.\n2. Delete each matching Grant.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups.",
							"item": [
								{
									"name": "Step 1: Get grants for a group for a specific app",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"User\",\r\n         \"value\": \"{{userID}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appID}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_USER\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Grants?filter=grantee[type eq \"Group\" and value eq \"{{groupid}}\"] and app.value eq \"{{appid}}\"",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Grants"
											],
											"query": [
												{
													"key": "filter",
													"value": "grantee[type eq \"Group\" and value eq \"{{groupid}}\"] and app.value eq \"{{appid}}\""
												}
											]
										},
										"description": "Get grants for a group for a specific app to obtain the IDs for the grants that you want to revoke from the group."
									},
									"response": []
								},
								{
									"name": "Step 2: Delete each grant",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Grants/{{grantid}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Grants",
												"{{grantid}}"
											]
										},
										"description": "Delete access to a managed app for a specific group."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4de88ea9-c88e-4079-ab77-2dd9fe668d1a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "89614de8-8db8-4256-b604-017e6540aeb0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Grant an approle to a group",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"Group\",\r\n         \"value\": \"{{groupid}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appid}}\"\r\n    },\r\n    \"entitlement\" : {\r\n        \"attributeName\": \"appRoles\",\r\n        \"attributeValue\": \"{{approleid}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_GROUP\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									]
								},
								"description": "A Grant of an AppRole specifies as the granted App the App that defines the AppRole, and specifies the AppRole as an entitlement. You must specify the AppRole in the payload after \"app\" when granting an AppRole to a Group.\n\nA Grant that specifies as grantee a particular Group implies conditional access for each User member of that Group. We call this an indirect Grant to User, because the direct Grant-to-Group produces and maintains a Grant-to-User per member.\n\nFulfillment of a Grant of a ManagedApp to a Group doesn't require an Identity Connector Framework Connector (ICF).\n\n    Oracle Identity Cloud Service fulfills a Grant-to-Group by \"expanding\" it into a Grant-to-User for each User who is a member of that Group.\n    As members are added to (or removed from) the Group, Oracle Identity Cloud Service creates (or deletes) a Grant-to-User for each member.\n\nFulfillment of a Grant of an UnmanagedApp to a Group would be handled in the same way (by expanding it to a Grant-to-User for each member), unless that a Grant of an UnmanagedApp specifies an AppRole.\n\nFulfillment of Grant of an AppRole to a Group doesn't expand the Grant-to-Group into a Grant-to-User for each member (although technically fulfillment could do this).  Because Oracle Identity Cloud Service maintains internally the members of each AppRole, fulfillment simply adds that Group as a member of the AppRole. \n\nTechnically, this is far more efficient than adding each member of the Group as a member of the AppRole. If that Group is already a member of that AppRole, this is a NO-OP.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Grant a managed app to a group",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"Group\",\r\n         \"value\": \"{{groupid}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appid}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_GROUP\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									]
								},
								"description": "Groups don't have access to Apps. Groups have GRANTS of Apps.\nUsers who are members of a Group to which an App has been granted have access to the App. \n\nGrants access to a specific App for a specific Group.\n\nFulfillment of a Grant of a ManagedApp to a Group doesn't require an Identity Connector Framework Connector (ICF).\n\n    Oracle Identity Cloud Service fulfills a Grant-to-Group by \"expanding\" it into a Grant-to-User for each User who is a member of that Group.\n    As members are added to (or removed from) the Group, Oracle Identity Cloud Service creates (or deletes) a Grant-to-User for each member.\n\nFulfillment of a Grant of an UnmanagedApp to a Group would be handled in the same way (by expanding it to a Grant-to-User for each member), unless that a Grant of an UnmanagedApp specifies an AppRole.\n\nFulfillment of Grant of an AppRole to a Group doesn't expand the Grant-to-Group into a Grant-to-User for each member (although technically fulfillment could do this).  Because Oracle Identity Cloud Service maintains internally the members of each AppRole, fulfillment simply adds that Group as a member of the AppRole. \n\nTechnically, this is far more efficient than adding each member of the Group as a member of the AppRole. If that Group is already a member of that AppRole, this is a NO-OP.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Grant an unmanaged app to a group",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"Group\",\r\n         \"value\": \"{{groupid}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appid}}\"\r\n    },\r\n    \"entitlement\" : {\r\n        \"attributeName\": \"appRoles\",\r\n        \"attributeValue\": \"{{approleid}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_GROUP\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									]
								},
								"description": "Groups don't have access to Apps. Groups have GRANTS of Apps.\nUsers who are members of a Group to which an App has been granted have access to the App. \n\nFulfillment of a Grant of a ManagedApp to a Group doesn't require an Identity Connector Framework Connector (ICF).\n\n    Oracle Identity Cloud Service fulfills a Grant-to-Group by \"expanding\" it into a Grant-to-User for each User who is a member of that Group.\n    As members are added to (or removed from) the Group, Oracle Identity Cloud Service creates (or deletes) a Grant-to-User for each member.\n\nFulfillment of a Grant of an UnmanagedApp to a Group would be handled in the same way (by expanding it to a Grant-to-User for each member), unless that a Grant of an UnmanagedApp specifies an AppRole.\n\nFulfillment of Grant of an AppRole to a Group doesn't expand the Grant-to-Group into a Grant-to-User for each member (although technically fulfillment could do this).  Because Oracle Identity Cloud Service maintains internally the members of each AppRole, fulfillment simply adds that Group as a member of the AppRole. \n\nTechnically, this is far more efficient than adding each member of the Group as a member of the AppRole. If that Group is already a member of that AppRole, this is a NO-OP.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for grants of a specific app to groups",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants?filter=grantee.type eq \"Group\" and app.value eq \"{{appid}}\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									],
									"query": [
										{
											"key": "filter",
											"value": "grantee.type eq \"Group\" and app.value eq \"{{appid}}\""
										}
									]
								},
								"description": "Groups don't have access to Apps. Groups have GRANTS of Apps.\nUsers who are members of a Group to which an App has been granted have access to the App. \n\nThere are two ways to query Grants to Groups:\n\n- Query the /Grants endpoint directly with a filter such as:\n    - filter=grantee.value eq \"<idOfGroup>\", or\n    - filter=grantee[value eq \"<idOfGroup>\" and type eq \"Group\"] (if you distrust the uniqueness of IDs)\n- For convenience, each Oracle Identity Cloud Service Group has a grants attribute. \n    - GroupManager computes the values of this attribute for a particular Group by querying Grants to that Group.\n    - The grants attribute has the key information about each Grant to that Group, but not all of the information.\n        \nThis request is querying Grants.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Get a specific group returning all the grants to that group",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Groups/{{groupid}}?attributes=urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group:grants",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Groups",
										"{{groupid}}"
									],
									"query": [
										{
											"key": "attributes",
											"value": "urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group:grants"
										}
									]
								},
								"description": "Groups don't have access to Apps. Groups have GRANTS of Apps.\nUsers who are members of a Group to which an App has been granted have access to the App. \n\nSearch for the apps that a specific Group has access. Groups don't have an \"accounts\" attribute. Therefore, you can list the Apps that have been granted to this Group by requesting the \"groups\" attribute.\n\nThere are two ways to query Grants to Groups:\n\n- Query the /Grants endpoint directly with a filter such as:\n    - filter=grantee.value eq \"<idOfGroup>\", or\n    - filter=grantee[value eq \"<idOfGroup>\" and type eq \"Group\"] (if you distrust the uniqueness of IDs)\n- For convenience, each Oracle Identity Cloud Service Group has a grants attribute. \n    - GroupManager computes the values of this attribute for a particular Group by querying Grants to that Group.\n    - The grants attribute has the key information about each Grant to that Group, but not all of the information.\n        \nThis request is querying Grants.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for grants of specific approle to a specific group",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants?filter=grantee[type eq \"Group\" and value eq \"{{groupid}}\"] and entitlement[attributeName eq \"appRoles\" and attributeValue eq \"{{approleid}}\"]",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									],
									"query": [
										{
											"key": "filter",
											"value": "grantee[type eq \"Group\" and value eq \"{{groupid}}\"] and entitlement[attributeName eq \"appRoles\" and attributeValue eq \"{{approleid}}\"]"
										}
									]
								},
								"description": "Searches to see if a specific Group was granted a specific AppRole.\n\nJust like User, Group has a \"grants\" attribute. However, that will not tell you which AppRole was granted. You have to look into each Grant to tell that. Therefore, the best approach in this case is to just search Grants yourself. This provides more grant details.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for a specific group's grants of a specific app and any associated approles",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayName\": \"Employee\",\r\n  \"externalId\": \"123456\",\r\n  \"urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group\": {\r\n    \"creationMechanism\": \"api\",\r\n    \"description\": \"Employee Group\"\r\n  },\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:core:2.0:Group\",\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group\",\r\n    \"urn:ietf:params:scim:schemas:extension:custom:2.0:Group\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants?filter=grantee[value eq \"{{groupid}}\" and type eq \"Group\"] and app.value eq \"{{appid}}\"&attributes=entitlement[attributeName eq \"appRoles\"].attributeValue",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									],
									"query": [
										{
											"key": "filter",
											"value": "grantee[value eq \"{{groupid}}\" and type eq \"Group\"] and app.value eq \"{{appid}}\""
										},
										{
											"key": "attributes",
											"value": "entitlement[attributeName eq \"appRoles\"].attributeValue"
										}
									]
								},
								"description": "Groups don't have access to Apps. Groups have GRANTS of Apps.\r\nUsers who are members of a Group to which an App has been granted have access to the App. \r\n\r\nNote:\r\nIf the App is a ManagedApp, then there may be no AppRole at all.\r\n\r\nIf the App is an UnmanagedApp, then at least one AppRole would have been granted to the Group. The \"grants\" attribute of Group won't show you which AppRole was granted; for that you must query Grants.\r\n\r\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Get a specific group returning the distinct set of apps granted to the group",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Groups/{{groupid}}?attributes=urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group:grants.appId&distinct=true",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Groups",
										"{{groupid}}"
									],
									"query": [
										{
											"key": "attributes",
											"value": "urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group:grants.appId"
										},
										{
											"key": "distinct",
											"value": "true"
										}
									]
								},
								"description": "Groups don't have access to Apps. Groups have GRANTS of Apps.\nUsers who are members of a Group to which an App has been granted have access to the App. \n\nGet a list of the apps that a specific group has access to. Group doesn't have an \"accounts\" attribute. Therefore, you can list the Apps that have been granted to this Group by requesting the \"groups\" attribute.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for all groups that have grants of a specific app",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Groups?attributes=urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group:grants[appId eq \"{{appid}}\"]",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Groups"
									],
									"query": [
										{
											"key": "attributes",
											"value": "urn:ietf:params:scim:schemas:oracle:idcs:extension:group:Group:grants[appId eq \"{{appid}}\"]"
										}
									]
								},
								"description": "See https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ea32a967-5b6c-4d29-9432-af83991fbb63",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a50f8e4e-cb77-4e6b-b8bd-062e60fced59",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a1e2d1d9-65d2-45d3-b3bb-812488de3aa3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "90be72a6-7f48-4314-97d1-fb3147d193d1",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "MFA",
			"description": "Multi-Factor Authentication (MFA) is a method of authentication that requires the use of more than one factor to verify a user’s identity.\r\n\r\nWith MFA enabled in Oracle Identity Cloud Service, when a user signs in to an application, they are prompted for their user name and password, which is the first factor – something that they know. The user is then required to provide a second type of verification. This is called 2-Step Verification. The two factors work together to add an additional layer of security by using either additional information or a second device to verify the user’s identity and complete the login process.\r\n\r\nMFA may include any two of the following:\r\n\r\n-Something that you know, like a password.\r\n\r\n-Something that you have, like a device.\r\n\r\n-Something that you are, like your fingerprint.\r\n\r\nWhy Use MFA?\r\n\r\nUsers are increasingly connected, accessing their accounts and applications from anywhere. As an administrator, when you add MFA on top of the traditional user name and password, that helps you to protect access to data and applications. This also reduces the likelihood of online identity theft and fraud, which secures your business applications even if an account password is compromised.\r\n",
			"item": [
				{
					"name": "Security Questions",
					"description": "",
					"item": [
						{
							"name": "Create",
							"description": "",
							"item": [
								{
									"name": "Create a security question",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"active\": false,\r\n  \"type\": \"custom\",\r\n  \"id\": \"FavDog\",\r\n  \"questionText\": [\r\n    {\r\n      \"locale\": \"en\",\r\n      \"default\": true,\r\n      \"value\": \"What is your favorite dog breed?\"\r\n    }\r\n  ],\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:SecurityQuestion\"\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{HOST}}//admin/v1/SecurityQuestions",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"",
												"admin",
												"v1",
												"SecurityQuestions"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete",
							"description": "",
							"item": [
								{
									"name": "Delete a security question",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}//admin/v1/SecurityQuestions/{{securityquestionId}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"",
												"admin",
												"v1",
												"SecurityQuestions",
												"{{securityquestionId}}"
											]
										},
										"description": "For all internal and default resources, the security question ID for out of the box default security questions is defaulted to text. After you create a new security question, the system generate a numeric ID."
									},
									"response": []
								},
								{
									"name": "Delete a security question - System Generated ID",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}//admin/v1/SecurityQuestions/92bab3dd8d454fadb132b5513b22d6de",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"",
												"admin",
												"v1",
												"SecurityQuestions",
												"92bab3dd8d454fadb132b5513b22d6de"
											]
										},
										"description": "For all internal and default resources, the security question ID for out of the box default security questions is defaulted to text. After you create a new security question, the system generates a numeric ID.\n\nThis example shows a system generated ID as the security question ID."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Search",
							"description": "",
							"item": [
								{
									"name": "Search all security questions",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}//admin/v1/SecurityQuestions",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"",
												"admin",
												"v1",
												"SecurityQuestions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search for a specific security question",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}//admin/v1/SecurityQuestions/{{securityquestionId}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"",
												"admin",
												"v1",
												"SecurityQuestions",
												"{{securityquestionId}}"
											]
										},
										"description": "For all internal and default resources, the security question ID for out of the box default security questions is defaulted to text. After you create a new security question, the system generates a numeric ID."
									},
									"response": []
								},
								{
									"name": "Search all security question settings",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}//admin/v1/SecurityQuestionSettings",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"",
												"admin",
												"v1",
												"SecurityQuestionSettings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search for specific security question settings",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}//admin/v1/SecurityQuestionSettings/{{securityquestionsettingsId}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"",
												"admin",
												"v1",
												"SecurityQuestionSettings",
												"{{securityquestionsettingsId}}"
											]
										},
										"description": "For all internal and default resources, the security question ID for out of the box default security questions is defaulted to text. After you create a new security question, the system generate a numeric ID."
									},
									"response": []
								},
								{
									"name": "Search all security questions (with result pagination)",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {},
										"url": {
											"raw": "{{HOST}}/admin/v1/SecurityQuestions?count=5&startIndex=0&sortBy=type",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"",
												"admin",
												"v1",
												"SecurityQuestions"
											],
											"query": [
												{
													"key": "count",
													"value": "5"
												},
												{
													"key": "startIndex",
													"value": "0"
												},
												{
													"key": "sortBy",
													"value": "type"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search all security questions (with a specific type)",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {},
										"url": {
											"raw": "{{HOST}}/admin/v1/SecurityQuestions?attributes=type,id,value&filter=type co \"default\"",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"SecurityQuestions"
											],
											"query": [
												{
													"key": "attributes",
													"value": "type,id,value"
												},
												{
													"key": "filter",
													"value": "type co \"default\""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search all security questions (with a specific id)",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {},
										"url": {
											"raw": "{{HOST}}/admin/v1/SecurityQuestions?attributes=id,value&filter=id co \"MaidenName\"",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"SecurityQuestions"
											],
											"query": [
												{
													"key": "attributes",
													"value": "id,value"
												},
												{
													"key": "filter",
													"value": "id co \"MaidenName\""
												}
											]
										},
										"description": "For all internal and default resources, the security question ID for out of the box default security questions is defaulted to text. After you create a new security question, the system generates a numeric ID."
									},
									"response": []
								},
								{
									"name": "Search all security questions (with search criteria)",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {},
										"url": {
											"raw": "{{HOST}}/admin/v1/SecurityQuestions?filter=questionText co \"dream\"",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"SecurityQuestions"
											],
											"query": [
												{
													"key": "filter",
													"value": "questionText co \"dream\""
												}
											]
										},
										"description": "For all internal and default resources, the security question ID for out of the box default security questions is defaulted to text. After you create a new security question, the system generates a numeric ID."
									},
									"response": []
								},
								{
									"name": "Search for a specific security question (return question text)",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {},
										"url": {
											"raw": "{{HOST}}/admin/v1/SecurityQuestions/{{securityquestionId}}?attributes=questionText",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"SecurityQuestions",
												"{{securityquestionId}}"
											],
											"query": [
												{
													"key": "attributes",
													"value": "questionText"
												}
											]
										},
										"description": "For all internal and default resources, the security question ID for out of the box default security questions is defaulted to text. After you create a new security question, the system generates a numeric ID."
									},
									"response": []
								},
								{
									"name": "Search for a specific security question (return value)",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {},
										"url": {
											"raw": "{{HOST}}/admin/v1/SecurityQuestions/{{securityquestionId}}?attributes=Value",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"SecurityQuestions",
												"{{securityquestionId}}"
											],
											"query": [
												{
													"key": "attributes",
													"value": "Value"
												}
											]
										},
										"description": "For all internal and default resources, the security question ID for out of the box default security questions is defaulted to text. After you create a new security question, the system generates a numeric ID."
									},
									"response": []
								},
								{
									"name": "Search all security questions (with a specific id) - System Generated ID",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {},
										"url": {
											"raw": "{{HOST}}/admin/v1/SecurityQuestions?attributes=id,value&filter=id co \"92bab3dd8d454fadb132b5513b22d6de\"",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"SecurityQuestions"
											],
											"query": [
												{
													"key": "attributes",
													"value": "id,value"
												},
												{
													"key": "filter",
													"value": "id co \"92bab3dd8d454fadb132b5513b22d6de\""
												}
											]
										},
										"description": "For all internal and default resources, the security question ID for out of the box default security questions is defaulted to text. After you create a new security question, the system generates a numeric ID.\n\nThis example shows a system generated numeric ID as the security question id."
									},
									"response": []
								},
								{
									"name": "Search for a specific security question (return question text) - System Generated ID",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {},
										"url": {
											"raw": "{{HOST}}/admin/v1/SecurityQuestions/92bab3dd8d454fadb132b5513b22d6de?attributes=questionText",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"SecurityQuestions",
												"92bab3dd8d454fadb132b5513b22d6de"
											],
											"query": [
												{
													"key": "attributes",
													"value": "questionText"
												}
											]
										},
										"description": "For all internal and default resources, the security question ID for out of the box default security questions is defaulted to text. After you create a new security question, the system generates a numeric ID.\n\nThis example shows the use of a system generated ID as the security question ID."
									},
									"response": []
								},
								{
									"name": "Search all security questions (with filter of active questions)",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/SecurityQuestions?filter=active eq true",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"",
												"admin",
												"v1",
												"SecurityQuestions"
											],
											"query": [
												{
													"key": "filter",
													"value": "active eq true"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Modify",
							"description": "",
							"item": [
								{
									"name": "Update a security question",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\r\n  ],\r\n  \"Operations\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"active\",\r\n      \"value\": false\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{HOST}}//admin/v1/SecurityQuestions/{{securityquestionId}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"",
												"admin",
												"v1",
												"SecurityQuestions",
												"{{securityquestionId}}"
											]
										},
										"description": "For all internal and default resources, the security question ID for out of the box default security questions is defaulted to text. After you create a new security question, the system generate a numeric ID."
									},
									"response": []
								},
								{
									"name": "Replace security question settings",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:SecurityQuestionSettings\"\r\n  ],\r\n  \"minAnswerLength\": 8,\r\n  \"maxFieldLength\": 40,\r\n  \"numQuestionsToSetup\": 2,\r\n  \"numQuestionsToAns\": 1\r\n}"
										},
										"url": {
											"raw": "{{HOST}}//admin/v1/SecurityQuestionSettings/{{securityquestionsettingsId}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"",
												"admin",
												"v1",
												"SecurityQuestionSettings",
												"{{securityquestionsettingsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update security question settings",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\r\n  ],\r\n  \"Operations\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"minAnswerLength\",\r\n      \"value\": 6\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{HOST}}//admin/v1/SecurityQuestionSettings/{{securityquestionsettingsId}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"",
												"admin",
												"v1",
												"SecurityQuestionSettings",
												"{{securityquestionsettingsId}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Bypass Codes",
					"description": "",
					"item": [
						{
							"name": "Create",
							"description": "",
							"item": [
								{
									"name": "Generate a bypass code for a user",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"user\": {\r\n    \"value\": \"<user ID>\"\r\n  },\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:BypassCode\"\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/BypassCodes",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"BypassCodes"
											]
										},
										"description": "Generate a Bypass Code for a User"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Search",
							"description": "",
							"item": [
								{
									"name": "Search bypass codes using POST",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"sortOrder\": \"ASCENDING\",\r\n  \"pagingCount\": 20,\r\n  \"pagingStartIndex\": 1,\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:api:messages:2.0:SearchRequest\"\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/BypassCodes/.search",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"BypassCodes",
												".search"
											]
										},
										"description": "Search for Bypass Codes using the POST /.search method."
									},
									"response": []
								},
								{
									"name": "Search for a specific bypass code",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"user\": {\r\n    \"value\": \"<user ID>\"\r\n  },\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:BypassCode\"\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/BypassCodes/{{bypasscodeId}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"BypassCodes",
												"{{bypasscodeId}}"
											]
										},
										"description": "Get a Bypass Code Using the Bypass Code ID."
									},
									"response": []
								},
								{
									"name": "Search bypass codes",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"user\": {\r\n    \"value\": \"<user ID>\"\r\n  },\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:BypassCode\"\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/BypassCodes",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"BypassCodes"
											]
										},
										"description": "Search for Bypass Codes"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete",
							"description": "",
							"item": [
								{
									"name": "Delete a bypass code",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/BypassCodes/{{bypasscodeId}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"BypassCodes",
												"{{bypasscodeId}}"
											]
										},
										"description": "Delete a Bypass Code using its ID."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Authentication Factor Settings",
					"description": "",
					"item": [
						{
							"name": "Search",
							"description": "",
							"item": [
								{
									"name": "Search authentication factor settings using POST",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schemas\":\r\n          [\"urn:ietf:params:scim:api:messages:2.0:SearchRequest\"]\r\n  ,\r\n  \"sortOrder\": \"ASCENDING\",\r\n  \"pagingCount\": 20,\r\n  \"pagingStartIndex\": 1\r\n\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/AuthenticationFactorSettings/.search",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"AuthenticationFactorSettings",
												".search"
											]
										},
										"description": "Search Authentication Factor Settings using the POST /.search method."
									},
									"response": []
								},
								{
									"name": "Search for specific authentication factor settings",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"user\": {\r\n    \"value\": \"<user ID>\"\r\n  },\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:BypassCode\"\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/AuthenticationFactorSettings/{{AuthenticationFactorSettingsId}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"AuthenticationFactorSettings",
												"{{AuthenticationFactorSettingsId}}"
											]
										},
										"description": "Get Authentication Factor Settings using the ID."
									},
									"response": []
								},
								{
									"name": "Search authentication factor settings",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"user\": {\r\n    \"value\": \"<user ID>\"\r\n  },\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:BypassCode\"\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/AuthenticationFactorSettings",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"AuthenticationFactorSettings"
											]
										},
										"description": "Search for Authentication Factor Settings"
									},
									"response": []
								},
								{
									"name": "Search authentication factor settings using email attributes",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"user\": {\r\n    \"value\": \"<user ID>\"\r\n  },\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:BypassCode\"\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/AuthenticationFactorSettings/AuthenticationFactorSettings?attributes=emailEnabled,totpSettings.emailOtpValidityDurationInMins,totpSettings.emailPasscodeLength",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"AuthenticationFactorSettings",
												"AuthenticationFactorSettings"
											],
											"query": [
												{
													"key": "attributes",
													"value": "emailEnabled,totpSettings.emailOtpValidityDurationInMins,totpSettings.emailPasscodeLength"
												}
											]
										},
										"description": "Search for Authentication Factor Settings Using Email attributes\n\nUse the OAuth Client App"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Modify",
							"description": "",
							"item": [
								{
									"name": "Replace authentication factor settings",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"bypassCodeEnabled\": true,\r\n  \"bypassCodeSettings\": {\r\n    \"helpDeskCodeExpiryInMins\": 61,\r\n    \"helpDeskGenerationEnabled\": true,\r\n    \"helpDeskMaxUsage\": 5,\r\n    \"length\": 12,\r\n    \"maxActive\": 5,\r\n    \"selfServiceGenerationEnabled\": true\r\n  },\r\n  \"clientAppSettings\": {\r\n    \"deviceProtectionPolicy\": \"NONE\",\r\n    \"initialLockoutPeriodInSecs\": 30,\r\n    \"keyPairLength\": 2048,\r\n    \"lockoutEscalationPattern\": \"Constant\",\r\n    \"maxFailuresBeforeLockout\": 8,\r\n    \"maxFailuresBeforeWarning\": 5,\r\n    \"maxLockoutIntervalInSecs\": 86400,\r\n    \"minPinLength\": 6,\r\n    \"policyUpdateFreqInDays\": 7,\r\n    \"requestSigningAlgo\": \"SHA256withRSA\",\r\n    \"sharedSecretEncoding\": \"Base32\",\r\n    \"unlockAppForEachRequestEnabled\": false,\r\n    \"unlockAppIntervalInSecs\": 300,\r\n    \"unlockOnAppForegroundEnabled\": false,\r\n    \"unlockOnAppStartEnabled\": false\r\n  },\r\n  \"compliancePolicy\": [\r\n    {\r\n      \"action\": \"Allow\",\r\n      \"name\": \"lockScreenRequired\",\r\n      \"value\": \"false\"\r\n    },\r\n    {\r\n      \"action\": \"Allow\",\r\n      \"name\": \"lockScreenRequiredUnknown\",\r\n      \"value\": \"false\"\r\n    },\r\n    {\r\n      \"action\": \"Allow\",\r\n      \"name\": \"jailBrokenDevice\",\r\n      \"value\": \"false\"\r\n    },\r\n    {\r\n      \"action\": \"Allow\",\r\n      \"name\": \"jailBrokenDeviceUnknown\",\r\n      \"value\": \"false\"\r\n    },\r\n    {\r\n      \"action\": \"Allow\",\r\n      \"name\": \"minWindowsVersion\",\r\n      \"value\": \"8.1\"\r\n    },\r\n    {\r\n      \"action\": \"Allow\",\r\n      \"name\": \"minIosVersion\",\r\n      \"value\": \"7.1\"\r\n    },\r\n    {\r\n      \"action\": \"Allow\",\r\n      \"name\": \"minAndroidVersion\",\r\n      \"value\": \"4.1\"\r\n    },\r\n    {\r\n      \"action\": \"Allow\",\r\n      \"name\": \"minIosAppVersion\",\r\n      \"value\": \"4.0\"\r\n    },\r\n    {\r\n      \"action\": \"Allow\",\r\n      \"name\": \"minAndroidAppVersion\",\r\n      \"value\": \"8.0\"\r\n    },\r\n    {\r\n      \"action\": \"Allow\",\r\n      \"name\": \"minWindowsAppVersion\",\r\n      \"value\": \"1.0\"\r\n    }\r\n  ],\r\n  \"endpointRestrictions\": {\r\n    \"maxEndpointTrustDurationInDays\": 15,\r\n    \"maxEnrolledDevices\": 5,\r\n    \"maxTrustedEndpoints\": 5,\r\n    \"trustedEndpointsEnabled\": true,\r\n    \"maxIncorrectAttempts\": 8\r\n  },\r\n  \"id\": \"AuthenticationFactorSettings\",\r\n  \"mfaEnrollmentType\": \"Required\",\r\n  \"pushEnabled\": true,\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:AuthenticationFactorSettings\"\r\n  ],\r\n  \"securityQuestionsEnabled\": false,\r\n  \"smsEnabled\": false,\r\n  \"totpEnabled\": true,\r\n  \"totpSettings\": {\r\n    \"hashingAlgorithm\": \"SHA1\",\r\n    \"jwtValidityDurationInSecs\": 300,\r\n    \"keyRefreshIntervalInDays\": 60,\r\n    \"passcodeLength\": 6,\r\n    \"smsOtpValidityDurationInMins\": 10,\r\n    \"smsPasscodeLength\": 6,\r\n    \"timeStepInSecs\": 30,\r\n    \"timeStepTolerance\": 3\r\n  }\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/AuthenticationFactorSettings/{{AuthenticationFactorSettingsId}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"AuthenticationFactorSettings",
												"{{AuthenticationFactorSettingsId}}"
											]
										},
										"description": "Replace Authentication Factor Settings"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Self Service",
					"description": "",
					"item": [
						{
							"name": "Enrolling in MFA Using the Email Factor",
							"description": "",
							"item": [
								{
									"name": "Step 1: Initiate Email Enrollment",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:AuthenticationFactorEnroller\"\r\n  ],\r\n  \"user\": {\r\n    \"value\": \"{{userid}}\"\r\n  },\r\n  \"authnFactors\": [\r\n    \"EMAIL\"\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/MyAuthenticationFactorEnroller",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"MyAuthenticationFactorEnroller"
											]
										},
										"description": "Note that the payload does not have the email id. The primary email is fetched from the user's profile."
									},
									"response": []
								},
								{
									"name": "Step 2: Request OTP Through Email",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:AuthenticationFactorInitiator\"\r\n  ],\r\n  \"deviceId\": \"<deviceid>\",\r\n  \"requestId\": \"<requestid>\",\r\n  \"userName\": \"<username>\",\r\n  \"authFactor\": \"EMAIL\"\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/MyAuthenticationFactorInitiator",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"MyAuthenticationFactorInitiator"
											]
										}
									},
									"response": []
								},
								{
									"name": "Step 3: Valdiate the OTP",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:AuthenticationFactorValidator\"\r\n  ],\r\n  \"deviceId\": \"<deviceid>\",\r\n  \"requestId\": \"<requestid>\",\r\n  \"otpCode\": \"<otpCode>\",\r\n  \"authFactor\": \"EMAIL\",\r\n  \"scenario\": \"ENROLLMENT\"\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/MyAuthenticationFactorValidator",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"MyAuthenticationFactorValidator"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Security Self Service",
							"description": "",
							"item": [
								{
									"name": "Validate my security questions and answers",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userName\": \"{{userName}}\",\r\n  \"securityQuestions\": [\r\n    {\r\n      \"questionId\": \"{{questionId}\",\r\n      \"securityAnswer\": \"{{securityAnswer}}\"\r\n    }\r\n  ],\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:MeSecurityQuestionAnswerValidator\"\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/MeSecurityQuestionAnswerValidator",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"MeSecurityQuestionAnswerValidator"
											]
										},
										"description": "The questionIds for the default security questions that come with Oracle Identity Cloud Service are:\n\nFavoriteFood\nFavoriteToy\nChildhoodHero\nFavoriteTeam\nFirstPet\nFirstManager\nMaidenName\nFavoriteTeacher\nFavoriteBook\nFirstMovie\nFirstTimeOnPlane\nDreamJob\nFirstCar\nFavoriteMovie\nFavoriteSportsPerson\n\nUse the OAuth Client App"
									},
									"response": []
								},
								{
									"name": "Retrieve my security questions",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userName\": \"{{userName}}\",\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:MeSecurityQuestionsRetriever\"\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/MeSecurityQuestionsRetriever",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"MeSecurityQuestionsRetriever"
											]
										},
										"description": "Use the OAuth Client App"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Bypass Codes Self Service",
							"description": "",
							"item": [
								{
									"name": "Create Bypass Code",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"user\": {\r\n    \"value\": \"{{userId}}\"\r\n  },\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:BypassCode\"\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/MyBypassCodes",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"MyBypassCodes"
											]
										},
										"description": "Use the OAuth Client App"
									},
									"response": []
								},
								{
									"name": "Get a Bypass Code",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"user\": {\r\n    \"value\": \"{{userId}}\"\r\n  },\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:BypassCode\"\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/MyBypassCodes/{{BypassCodeID}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"MyBypassCodes",
												"{{BypassCodeID}}"
											]
										},
										"description": "Use the OAuth Client App"
									},
									"response": []
								},
								{
									"name": "Search for Bypass Codes",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"user\": {\r\n    \"value\": \"{{userId}}\"\r\n  },\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:BypassCode\"\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/MyBypassCodes",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"MyBypassCodes"
											]
										},
										"description": "Use the OAuth Client App"
									},
									"response": []
								},
								{
									"name": "Search for Bypass Codes Using POST",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:SearchRequest\"]\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/MyBypassCodes/.search",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"MyBypassCodes",
												".search"
											]
										},
										"description": "Use the OAuth Client App"
									},
									"response": []
								},
								{
									"name": "Delete a Bypass Code",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/MyBypassCodes/{{BypassCodeId}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"MyBypassCodes",
												"{{BypassCodeId}}"
											]
										},
										"description": "Use the OAuth Client App"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Devices Self Service",
							"description": "",
							"item": [
								{
									"name": "Search for devices",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/MyDevices",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"MyDevices"
											]
										},
										"description": "Use the OAuth Client App"
									},
									"response": []
								},
								{
									"name": "Get a device",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/MyDevices/{{deviceId}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"MyDevices",
												"{{deviceId}}"
											]
										},
										"description": "Use the OAuth Client App"
									},
									"response": []
								},
								{
									"name": "Update my device",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Operations\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"status\",\r\n      \"value\": \"{{Attribute to be Replaced, such as INPROGRESS}}\"\r\n    }\r\n  ],\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/MyDevices/{{DeviceId}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"MyDevices",
												"{{DeviceId}}"
											]
										},
										"description": "Each patch operation object MUST have exactly one \"op\" member, whose value indicates the operation to perform and MAY be one of \"add\", \"remove\", or \"replace\". \n\nUse the OAuth Client App"
									},
									"response": []
								},
								{
									"name": "Delete a device",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {},
										"url": {
											"raw": "{{HOST}}/admin/v1/MyDevices/{{deviceId}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"MyDevices",
												"{{deviceId}}"
											]
										},
										"description": "Use the OAuth Client App"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Trusted User Agents Self Service",
							"description": "",
							"item": [
								{
									"name": "Get my trusted user agents",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/MyTrustedUserAgents",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"MyTrustedUserAgents"
											]
										},
										"description": "Use the OAuth Client App"
									},
									"response": []
								},
								{
									"name": "Get a trusted user agent",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/MyTrustedUserAgents/{{TrustedDeviceId}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"MyTrustedUserAgents",
												"{{TrustedDeviceId}}"
											]
										},
										"description": "Use the OAuth Client App"
									},
									"response": []
								},
								{
									"name": "Delete a trusted user agent",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {},
										"url": {
											"raw": "{{HOST}}/admin/v1/MyTrustedUserAgents/{{TrustedUserAgentID}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"MyTrustedUserAgents",
												"{{TrustedUserAgentID}}"
											]
										},
										"description": "Use the OAuth Client App"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Get my information",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Me",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Me"
									]
								},
								"description": "This endpoint can be used by a user to fetch details their profile. For MFA factor enrollment, the user can look at the  \"urn:ietf:params:scim:schemas:oracle:idcs:extension:mfa:User\" schema extension to get MFA-related attribute details. The  sample shows the response sent when a user who has enrolled for the Email factor queries for their profile.\n\nIn the Response:\n\nThe attribute mfaStatus:\"ENROLLED\" indicates that the user has enrolled in MFA.\n\nThe preferredAuthenticationFactor attribute indicates the factor that the user has set as their \"preferred\" method. In this case, it is EMAIL.\n\nUse the testMe app."
							},
							"response": []
						},
						{
							"name": "Change my default method",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\r\n  ],\r\n  \"Operations\": [\r\n    {  \r\n      \"op\": \"replace\",\r\n      \"path\": \"urn:ietf:params:scim:schemas:oracle:idcs:extension:mfa:User:preferredAuthenticationFactor\",\r\n      \"value\": \"{{desired default method type, such as TOTP}}\"\r\n    },\r\n    {  \r\n      \"op\": \"replace\",\r\n      \"path\": \"urn:ietf:params:scim:schemas:oracle:idcs:extension:mfa:User:preferredDevice\",\r\n      \"value\": {  \r\n        \"value\": \"{{deviceId for desired default method>}}\"\r\n      }\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Me",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Me"
									]
								},
								"description": "The user needs to provide the device id of the new device/method that they want to set as the default. For example: The user in the example request had email as the default, and now wants to set TOTP as the preferred factor.\n\nNote: The preferredDevice.value is the deviceId enrolled for TOTP factor."
							},
							"response": []
						},
						{
							"name": "Remove all of my authentication factors",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"user\": {\r\n    \"value\": \"{{userId}}\"\r\n  },\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:AuthenticationFactorsRemover\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/MyAuthenticationFactorsRemover",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"MyAuthenticationFactorsRemover"
									]
								},
								"description": "use the oauth app client"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Remove all authentication factors for a user",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"user\": {\r\n    \"value\": \"{{userid}}>\"\r\n  },\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:AuthenticationFactorsRemover\"\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{HOST}}/admin/v1/AuthenticationFactorsRemover",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"admin",
								"v1",
								"AuthenticationFactorsRemover"
							]
						},
						"description": "Remove all authentication factor channels for a user. Deleting all of the enrolled MFA channels includes a user's registered devices, bypass codes created for or by the user, any trusted devices for the user, and any security questions registered for the user.\n\nUse the OAuth Client App"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2d5fb4ba-1c06-48ee-9188-c0cb8839cd36",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "47f8b744-6c01-4af2-9fbf-798bbea59082",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "OAuth",
			"description": "",
			"item": [
				{
					"name": "Tokens",
					"description": "",
					"item": [
						{
							"name": "Validate access_token (introspect)",
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{CLIENT_ID}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{CLIENT_SECRET}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{HOST}}/oauth2/v1/introspect",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"oauth2",
										"v1",
										"introspect"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtain access_token (client credentials)",
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{CLIENT_ID}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{CLIENT_SECRET}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic OWNlMjkwODZmNDQ0NGI3OWE1YzUxOWQ0ZGI3Mjk0ZDg6M2YxNGRkYTgtMDhkOS00MWVkLThmYTctOWQ2NmI3ODgzZDc1"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "urn:opc:idm:__myscopes__",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{HOST}}/oauth2/v1/token",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"oauth2",
										"v1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtain access_token (resource owner)",
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{CLIENT_ID}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{CLIENT_SECRET}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "urn:opc:idm:__myscopes__",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{USER_LOGIN}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{USER_PW}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{HOST}}/oauth2/v1/token",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"oauth2",
										"v1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtain access_token (client credentials) for ME",
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{CLIENT_ID}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{CLIENT_SECRET}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic OWNlMjkwODZmNDQ0NGI3OWE1YzUxOWQ0ZGI3Mjk0ZDg6M2YxNGRkYTgtMDhkOS00MWVkLThmYTctOWQ2NmI3ODgzZDc1"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "urn:opc:idm:__myscopes__",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{HOST}}/oauth2/v1/token",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"oauth2",
										"v1",
										"token"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Configuration",
					"description": "",
					"item": [
						{
							"name": "Search",
							"description": "",
							"item": [
								{
									"name": "Search all OAuth configurations",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/OAuthConfig",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"OAuthConfig"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search default OAuth configuration (OAuthConfig)",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/OAuthConfig/{{OAuthConfigId}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"OAuthConfig",
												"{{OAuthConfigId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search for OAuth configs using POST",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/scim+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:SearchRequest\"],\r\n  \"attributes\": [\"accessTokenExpirySeconds\", \"refreshTokenExpirySeconds\", \"maxAllowedScopesPerResource\", \"clockSkewSeconds\"],\r\n  \"sortOrder\": \"ASCENDING\"\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/OAuthConfig/.search",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"OAuthConfig",
												".search"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search default OAuth configuration (OAuthConfig) (get token timeouts)",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/OAuthConfig/{{OAuthConfigId}}?attributes=accessTokenExpirySeconds,refreshTokenExpirySeconds",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"OAuthConfig",
												"{{OAuthConfigId}}"
											],
											"query": [
												{
													"key": "attributes",
													"value": "accessTokenExpirySeconds,refreshTokenExpirySeconds"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search all OAuth configurations (get token timeouts)",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/OAuthConfig?attributes=accessTokenExpirySeconds,refreshTokenExpirySeconds",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"OAuthConfig"
											],
											"query": [
												{
													"key": "attributes",
													"value": "accessTokenExpirySeconds,refreshTokenExpirySeconds"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Modify",
							"description": "",
							"item": [
								{
									"name": "Replace OAuthConfig (token expiration) (DENIED)",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"schemas\": [\n    \"urn:ietf:params:scim:schemas:oracle:idcs:OAuthConfig\"\n  ],\n  \"id\": \"OAuthConfig\",\n  \"accessTokenExpirySeconds\": 36000,\n  \"refreshTokenExpirySeconds\": 6048000,\n  \"maxAllowedScopesPerResource\": 100,\n  \"clockSkewSeconds\": 60,\n  \"oidcUserAttributesMapping\": \"{ \\\"sub\\\":\\\"userName\\\", \\\"name\\\":\\\"name.formatted\\\", \\\"given_name\\\":\\\"name.givenName\\\", \\\"family_name\\\":\\\"name.familyName\\\", \\\"middle_name\\\":\\\"name.middleName\\\", \\\"nickname\\\":\\\"nickName\\\", \\\"preferred_username\\\":\\\"userName\\\", \\\"profile\\\":\\\"profileUrl\\\", \\\"picture\\\":\\\"photos.value\\\", \\\"website\\\":\\\"\\\", \\\"email\\\":\\\"emails.value\\\", \\\"email_verified\\\":\\\"\\\", \\\"gender\\\":\\\"\\\", \\\"birthdate\\\":\\\"\\\", \\\"zoneinfo\\\":\\\"timezone\\\", \\\"locale\\\":\\\"locale\\\", \\\"phone_number\\\":\\\"phoneNumbers.value\\\", \\\"phone_number_verified\\\":\\\"\\\", \\\"address\\\":\\\"addresses\\\", \\\"updated_at\\\":\\\"lastModified\\\"}\"\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/OAuthConfig/OAuthConfig",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"OAuthConfig",
												"OAuthConfig"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update OAuthConfig (token expiration) (DENIED)",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"schemas\": [\n    \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\n  ],\n  \"Operations\": [\n    {\n      \"op\": \"replace\",\n      \"path\": \"accessTokenExpirySeconds\",\n      \"value\": 36000\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/OAuthConfig/{{OAuthConfigId}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"OAuthConfig",
												"{{OAuthConfigId}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Keys",
					"description": "",
					"item": [
						{
							"name": "Search",
							"description": "",
							"item": [
								{
									"name": "Search for Oracle Identity Cloud Service encryption keys (DENIED)",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/EncryptionKeys",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"EncryptionKeys"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search for a Oracle Identity Cloud Service signing key (JWK)",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/SigningCert/jwk",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"SigningCert",
												"jwk"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Reports",
			"description": "",
			"item": [
				{
					"name": "PDF and CSV",
					"description": "",
					"item": [
						{
							"name": "Get diagnostics data (CSV)",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\"urn:ietf:params:scim:schemas:oracle:idcs:Report\"],\r\n  \"outputFormat\": \"csv\",\r\n  \"reports\": [{\r\n      \"name\": \"diagnostics\",\r\n      \"type\": \"detail\",\r\n      \"correlationId\": \"diagnosticsReport\",\r\n      \"attributesToGet\": \"timestamp,ecid,serviceName,userid,message\",\r\n      \"resourceType\": \"DiagnosticRecord\",\r\n      \"sortBy\": \"timestamp\"\r\n    }]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/report/v1/Reports",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"report",
										"v1",
										"Reports"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate unsuccessful login attempts report (PDF)",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\"urn:ietf:params:scim:schemas:oracle:idcs:Report\"],\r\n  \"outputFormat\": \"pdf\",\r\n  \"reports\": [{\r\n      \"name\": \"suspiciousEvents\",\r\n      \"type\": \"detail\",\r\n      \"correlationId\": \"suspiciousEventsReport\",\r\n      \"attributesToGet\": \"actorName,timestamp,message\"\r\n    }]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/report/v1/Reports",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"report",
										"v1",
										"Reports"
									]
								}
							},
							"response": []
						},
						{
							"name": "Download report/diagnostic files",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/storage/v1/Files?fileName={{filename}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"storage",
										"v1",
										"Files"
									],
									"query": [
										{
											"key": "fileName",
											"value": "{{filename}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Get diagnostics data (JSON)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"schemas\": [\"urn:ietf:params:scim:schemas:oracle:idcs:Report\"],\r\n  \"outputFormat\": \"json\",\r\n  \"reports\": [{\r\n      \"name\": \"diagnostics\",\r\n      \"type\": \"detail\",\r\n      \"correlationId\": \"diagnosticsReport\",\r\n      \"attributesToGet\": \"timestamp,ecid,serviceName,userid,message\",\r\n      \"resourceType\": \"DiagnosticRecord\",\r\n      \"sortBy\": \"timestamp\"\r\n    }]\r\n}"
						},
						"url": {
							"raw": "{{HOST}}/report/v1/Reports",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"report",
								"v1",
								"Reports"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate application role privileges report (JSON)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"schemas\": [\"urn:ietf:params:scim:schemas:oracle:idcs:Report\"],\r\n  \"outputFormat\": \"json\",\r\n  \"reports\": [{\r\n      \"name\": \"appRoleAssignment\",\r\n      \"type\": \"detail\",\r\n      \"correlationId\": \"appRoleAssignmentReport\",\r\n      \"attributesToGet\": \"adminResourceName,adminAppRoleAppName,message,adminRefResourceType,adminRefResourceName,actorDisplayName,timestamp\"\r\n    }]\r\n}"
						},
						"url": {
							"raw": "{{HOST}}/report/v1/Reports",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"report",
								"v1",
								"Reports"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate application access report (JSON)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"schemas\": [\"urn:ietf:params:scim:schemas:oracle:idcs:Report\"],\r\n  \"outputFormat\": \"json\",\r\n  \"reports\": [{\r\n      \"name\": \"applicationAccess\",\r\n      \"type\": \"detail\",\r\n      \"correlationId\": \"applicationAccessReport\",\r\n      \"attributesToGet\": \"actorDisplayName,actorName, timestamp, ssoRp, message\"\r\n    }]\r\n}"
						},
						"url": {
							"raw": "{{HOST}}/report/v1/Reports",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"report",
								"v1",
								"Reports"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate unsuccessful login attempts report (JSON)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"schemas\": [\"urn:ietf:params:scim:schemas:oracle:idcs:Report\"],\r\n  \"outputFormat\": \"json\",\r\n  \"reports\": [{\r\n      \"name\": \"suspiciousEvents\",\r\n      \"type\": \"detail\",\r\n      \"correlationId\": \"suspiciousEventsReport\",\r\n      \"attributesToGet\": \"actorName,timestamp,message\"\r\n    }]\r\n}"
						},
						"url": {
							"raw": "{{HOST}}/report/v1/Reports",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"report",
								"v1",
								"Reports"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate successful login attempts report (JSON)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"schemas\": [\"urn:ietf:params:scim:schemas:oracle:idcs:Report\"],\r\n  \"outputFormat\": \"json\",\r\n  \"reports\": [{\r\n      \"name\": \"userLogin\",\r\n      \"type\": \"detail\",\r\n      \"correlationId\": \"userLoginReport\",\r\n      \"attributesToGet\": \"actorName, timestamp, ssoIdentityProvider\"\r\n    }]\r\n}"
						},
						"url": {
							"raw": "{{HOST}}/report/v1/Reports",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"report",
								"v1",
								"Reports"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get nultiple reports (details)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"schemas\": [\"urn:ietf:params:scim:schemas:oracle:idcs:Report\"],\r\n  \"outputFormat\": \"json\",\r\n  \"reports\": [{\r\n      \"name\": \"userLogin\",\r\n      \"type\": \"detail\",\r\n      \"correlationId\": \"userLoginReport\",\r\n      \"attributesToGet\": \"actorName, timestamp, ssoIdentityProvider\"\r\n    },\r\n    {\r\n      \"name\": \"appRoleAssignment\",\r\n      \"type\": \"detail\",\r\n      \"correlationId\": \"appRoleAssignmentReport\",\r\n      \"attributesToGet\": \"adminResourceName,adminAppRoleAppName,message,adminRefResourceType,adminRefResourceName,actorDisplayName,timestamp\"\r\n    },\r\n    {\r\n      \"name\": \"diagnostics\",\r\n      \"type\": \"detail\",\r\n      \"correlationId\": \"diagnosticsReport\",\r\n      \"attributesToGet\": \"timestamp,ecid,serviceName,userid,message\",\r\n      \"resourceType\": \"DiagnosticRecord\",\r\n      \"sortBy\": \"timestamp\"\r\n    },\r\n    {\r\n      \"name\": \"suspiciousEvents\",\r\n      \"type\": \"detail\",\r\n      \"correlationId\": \"suspiciousEventsReport\",\r\n      \"attributesToGet\": \"actorName,timestamp,message\"\r\n    },\r\n    {\r\n      \"name\": \"dashboard\",\r\n      \"type\": \"count\",\r\n      \"resourceType\": \"AuditEvent\",\r\n      \"correlationId\": \"dashboardReport\"\r\n    },\r\n    {\r\n      \"name\": \"applicationAccess\",\r\n      \"type\": \"detail\",\r\n      \"correlationId\": \"applicationAccessReport\",\r\n      \"attributesToGet\": \"actorDisplayName,actorName, timestamp, ssoRp, message\"\r\n    }]\r\n}"
						},
						"url": {
							"raw": "{{HOST}}/report/v1/Reports",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"report",
								"v1",
								"Reports"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get multiple reports (count)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"schemas\": [\"urn:ietf:params:scim:schemas:oracle:idcs:Report\"],\r\n  \"outputFormat\": \"json\",\r\n  \"reports\": [{\r\n      \"name\": \"userLogin\",\r\n      \"type\": \"count\",\r\n      \"correlationId\": \"userLoginReport\"\r\n    },{\r\n      \"name\": \"suspiciousEvents\",\r\n      \"type\": \"count\",\r\n      \"correlationId\": \"suspiciousEventsReport\"\r\n    },{\r\n      \"name\": \"applicationAccess\",\r\n      \"type\": \"count\",\r\n      \"correlationId\": \"applicationAccessReport\"\r\n    },{\r\n      \"name\": \"appRoleAssignment\",\r\n      \"type\": \"count\",\r\n      \"correlationId\": \"appRoleAssignmentReport\"\r\n    }]\r\n}"
						},
						"url": {
							"raw": "{{HOST}}/report/v1/Reports",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"report",
								"v1",
								"Reports"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "SAML",
			"description": "",
			"item": [
				{
					"name": "Service Provider",
					"description": "",
					"item": [
						{
							"name": "Search",
							"description": "",
							"item": [
								{
									"name": "Search all service providers",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/ServiceProviders",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"ServiceProviders"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Create",
							"description": "",
							"item": [
								{
									"name": "Create a service provider",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:ServiceProvider\"\r\n  ],\r\n  \"partnerProviderId\": \"http://host2.us.oracle.com:7499/fed/sp\",\r\n  \"assertionConsumerUrl\": \"http://host2.us.oracle.com/fed/sp/authnResponse20\",\r\n  \"logoutRequestUrl\": \"http://host2.us.oracle.com/fed/sp/samlv20\",\r\n  \"partnerName\": \"serviceProviderPartner1\",\r\n  \"enabled\": false,\r\n  \"nameIdFormat\": \"saml-emailaddress\",\r\n  \"nameIdUserstoreAttribute\": \"emails.primary\"\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/ServiceProviders",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"ServiceProviders"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Identity Provider",
					"description": "",
					"item": [
						{
							"name": "Search",
							"description": "",
							"item": [
								{
									"name": "Search for a specific identity provider (idp metadata)",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/IdentityProviders/{{idpid}}?attributes=metadata",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"IdentityProviders",
												"{{idpid}}"
											],
											"query": [
												{
													"key": "attributes",
													"value": "metadata"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search for a specific identity provider",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/IdentityProviders/{{idpid}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"IdentityProviders",
												"{{idpid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search for a specific identity provider (return specific attributes)",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/IdentityProviders/{{idpid}}?attributes=partnerName,partnerProviderId",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"IdentityProviders",
												"{{idpid}}"
											],
											"query": [
												{
													"key": "attributes",
													"value": "partnerName,partnerProviderId"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search all identity providers (return specific attributes)",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/IdentityProviders?attributes=partnerName,partnerProviderId",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"IdentityProviders"
											],
											"query": [
												{
													"key": "attributes",
													"value": "partnerName,partnerProviderId"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search all identity providers",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/IdentityProviders",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"IdentityProviders"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Modify",
							"description": "",
							"item": [
								{
									"name": "Update identity provider name and description",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\r\n  ],\r\n  \"Operations\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"partnerName\",\r\n      \"value\": \"Intranet\"\r\n    },{\r\n      \"op\": \"replace\",\r\n      \"path\": \"description\",\r\n      \"value\": \"Login with your intranet credentials\"\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/IdentityProviders/{{idpid}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"IdentityProviders",
												"{{idpid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Enable identity provider",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\r\n  ],\r\n  \"Operations\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"enabled\",\r\n      \"value\": true\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/IdentityProviders/{{idpid}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"IdentityProviders",
												"{{idpid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Disable identity provider",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\r\n  ],\r\n  \"Operations\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"enabled\",\r\n      \"value\": false\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/IdentityProviders/{{idpid}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"IdentityProviders",
												"{{idpid}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Self Service",
			"description": "",
			"item": [
				{
					"name": "Update Account Information",
					"description": "",
					"item": [
						{
							"name": "Replace Me",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"schemas\": [\n    \"urn:ietf:params:scim:schemas:core:2.0:User\"\n  ],\n  \"urn:ietf:params:scim:schemas:oracle:idcs:extension:me:User:currentPassword\": \"Welcome1\",\n  \"name\": {\n\t\"givenName\": \"John\",\n\t\"familyName\": \"Saladna\"\n  },\n  \"userName\": \"jsaladna@example.com\",\n  \"emails\": [\n\t{\n\t  \"value\": \"jsaladna@example.com\",\n\t  \"type\": \"work\",\n\t  \"primary\": true\n\t},\n\t{\n\t  \"value\": \"jsaladna@example.com\",\n\t  \"primary\": false,\n\t  \"type\": \"recovery\"\n\t}\n  ]\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Me",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Me (add a single attribute)",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\r\n  ],\r\n  \"Operations\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"phoneNumbers\",\r\n      \"value\": [\r\n        {\r\n          \"value\": \"555-555-1111\",\r\n          \"type\": \"home\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Me",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Me (replace single attribute)",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\r\n  ],\r\n  \"Operations\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"phoneNumbers\",\r\n      \"value\": [\r\n        {\r\n          \"value\": \"666-666-1111\",\r\n          \"type\": \"home\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Me",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Me (multiple attributes)",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\r\n  ],\r\n  \"Operations\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"addresses[type eq \\\"work\\\"]\",\r\n      \"value\": [\r\n        {\r\n          \"type\": \"work\",\r\n\t      \"country\": \"US\",\r\n\t      \"postalCode\": \"94065\",\r\n\t      \"streetAddress\": \"200 Oracle Parkway\",\r\n\t      \"locality\": \"Redwood Shores\",\r\n\t      \"region\": \"CA\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Me",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Me"
									]
								},
								"description": "Modify the user address and phone"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Change Password",
					"description": "",
					"item": [
						{
							"name": "Self-service password change",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"oldPassword\": \"{{old password}}\",\r\n  \"password\": \"{{new password}}\",\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:MePasswordChanger\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/MePasswordChanger",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"MePasswordChanger"
									]
								},
								"description": "Use the testMe application."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Email Verification",
					"description": "",
					"item": [
						{
							"name": "Step 1: User makes a change to their info",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\r\n  ],\r\n  \"Operations\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"urn:ietf:params:scim:schemas:oracle:idcs:extension:me:User:currentPassword\",\r\n      \"value\": \"{{password}}\"\r\n    },\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"emails\",\r\n      \"value\": [\r\n        {\r\n          \"type\": \"{{email type work or home}}\",\r\n          \"primary\": {{true or false}},\r\n          \"value\": \"{{email}}\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Me",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Me"
									]
								},
								"description": "Update Me (replace your recovery email)\nUse the testMe application"
							},
							"response": []
						},
						{
							"name": "Step 2: User initiates self-service email verification",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{email to verify}}\",\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:MeEmailVerifier\"\r\n  ],\r\n  \"id\": \"{{userId}}\"\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/MeEmailVerifier",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"MeEmailVerifier"
									]
								},
								"description": "Use the testMe application"
							},
							"response": []
						},
						{
							"name": "Step 3: Obtain user token",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/UserTokens?filter=userId co \"{{userId}}\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"UserTokens"
									],
									"query": [
										{
											"key": "filter",
											"value": "userId co \"{{userId}}\""
										}
									]
								},
								"description": "FYI - Must use the OAuth Client App to obtain this information, not the ME App used to test some self-service endpoints.\n\nAfter step 2, an email is sent to the user with a link. The user clicks the link (sending the user token) and the UI invokes the /MeEmailVerified endpoint using that user token.\n\nUse Step 3 to get the user token (since Postman can't access emails)."
							},
							"response": []
						},
						{
							"name": "Step 4: Self-verify email address",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"token\": \"{{user token}}\",\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:MeEmailVerified\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/MeEmailVerified",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"MeEmailVerified"
									]
								},
								"description": "Use the testMe application"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Password Reset",
					"description": "",
					"item": [
						{
							"name": "Step 1: Retrieve password recovery options to get masked email value",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userName\": \"{{userName}}\",\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:MePasswordRecoveryOptionRetriever\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/MePasswordRecoveryOptionRetriever",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"MePasswordRecoveryOptionRetriever"
									]
								},
								"description": "Use the OAuth Client App access token with the following approles assigned:\n\nIdentity Domain Administrator\nMe\nVerify Email\nForgot Password\n\nThe masked email option is found in the options section of the response:\n\n{\n    \"options\": [\n        {\n            \"type\": \"email\",\n            \"value\": \"****@example.com\"\n        }\n    ],"
							},
							"response": []
						},
						{
							"name": "Step 2: Self-service password reset requestor",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userName\": \"{{userName}}\",\r\n  \"notificationType\": \"email\",\r\n  \"notificationEmailAddress\": \"{{masked email here ****@example.com}}\",\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:MePasswordResetRequestor\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/MePasswordResetRequestor",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"MePasswordResetRequestor"
									]
								},
								"description": "Use the OAuth Client app"
							},
							"response": []
						},
						{
							"name": "Step 3: Obtain user token",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/UserTokens?filter=userId co \"{{userId}}\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"UserTokens"
									],
									"query": [
										{
											"key": "filter",
											"value": "userId co \"{{userId}}\""
										}
									]
								},
								"description": "FYI - Must use the OAuth Client App to obtain this information, not the ME App used to test some self-service endpoints.\n\nAfter step 2, an email is sent to the user with a link. The user clicks the link (sending the user token) and the UI invokes the /MePasswordRest endpoint using that user token.\n\nUse Step 3 to get the user token (since Postman can't access emails)."
							},
							"response": []
						},
						{
							"name": "Step 4: Self-service password reset",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"token\": \"{{tokenId}}}\",\r\n  \"password\": \"{{new password}}\",\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:MePasswordResetter\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/MePasswordResetter",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"MePasswordResetter"
									]
								},
								"description": "Use the OAuth Client App"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Favorite or Unfavorite an App",
					"description": "",
					"item": [
						{
							"name": "Step 1: My apps",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"token\": \"MNrZtvBw3H+23Vnmq685ZhPGEvi4IbZ3qjkJ5I9NNW4=\",\r\n  \"password\": \"welcome4\",\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:MePasswordResetter\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/MyApps",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"MyApps"
									]
								},
								"description": "Get the ID of an app that you have access to.\nUse the testMe app."
							},
							"response": []
						},
						{
							"name": "Step 2: Favorite or unfavorite an app",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"favorite\": true,\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:MyAppFavoriteSetter\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/MyAppFavoriteSetter/{{appID}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"MyAppFavoriteSetter",
										"{{appID}}"
									]
								},
								"description": "Use the testMe app"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Get my information",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{HOST}}/admin/v1/Me",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"admin",
								"v1",
								"Me"
							]
						},
						"description": "Use the testMe app"
					},
					"response": []
				},
				{
					"name": "Retrieve password recovery options",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userName\": \"{{userName}}\",\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:MePasswordRecoveryOptionRetriever\"\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{HOST}}/admin/v1/MePasswordRecoveryOptionRetriever",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"admin",
								"v1",
								"MePasswordRecoveryOptionRetriever"
							]
						},
						"description": "Use the OAuth Client App access token with the following approles assigned:\n\nIdentity Domain Administrator\nMe\nVerify Email\nForgot Password\n"
					},
					"response": []
				},
				{
					"name": "Retrieve my accesses",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"token\": \"MNrZtvBw3H+23Vnmq685ZhPGEvi4IbZ3qjkJ5I9NNW4=\",\r\n  \"password\": \"welcome4\",\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:MePasswordResetter\"\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{HOST}}/admin/v1/MyAccesses",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"admin",
								"v1",
								"MyAccesses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve my apps",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"token\": \"MNrZtvBw3H+23Vnmq685ZhPGEvi4IbZ3qjkJ5I9NNW4=\",\r\n  \"password\": \"welcome4\",\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:MePasswordResetter\"\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{HOST}}/admin/v1/MyApps",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"admin",
								"v1",
								"MyApps"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"description": "A user account represents a user in Oracle Identity Cloud Service, and enables the user to access the Oracle Cloud service to which they belong. In Oracle Identity Cloud Service, there is a one-to-one relationship between a user and a user account.\r\n\r\nBy default, all users can use their accounts to perform self-service capabilities in Oracle Identity Cloud Service. Users can update their profiles, reset their passwords, unlock their accounts, and change their email preferences.\r\n\r\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups.",
			"item": [
				{
					"name": "Search",
					"description": "",
					"item": [
						{
							"name": "List all users",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Users",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Users"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all users (with result pagination)",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Users?count=5&startIndex=0",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Users"
									],
									"query": [
										{
											"key": "count",
											"value": "5"
										},
										{
											"key": "startIndex",
											"value": "0"
										}
									]
								},
								"description": "count = number of entries retrieved\nstartIndex = index for search result"
							},
							"response": []
						},
						{
							"name": "Search all users (return specific attributes)",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Users?attributes=userName",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Users"
									],
									"query": [
										{
											"key": "attributes",
											"value": "userName"
										}
									]
								},
								"description": "attributes = comma separated list of values retrieved in a search"
							},
							"response": []
						},
						{
							"name": "Search all users (with search criteria)",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Users?filter=userName sw \"csaladna\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Users"
									],
									"query": [
										{
											"key": "filter",
											"value": "userName sw \"csaladna\""
										}
									]
								},
								"description": "filter = add a filter criteria to the search using attributes, values, and operators"
							},
							"response": []
						},
						{
							"name": "Get a specific user",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Users/{{userid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Users",
										"{{userid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a specific user (returning specific attributes)",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Users/{{userid}}?attributes=userName",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Users",
										"{{userid}}"
									],
									"query": [
										{
											"key": "attributes",
											"value": "userName"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search for users via POST",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:SearchRequest\"],\r\n  \"attributes\": [\"displayName\", \"userName\"],\r\n  \"filter\":\r\n          \"userName sw \\\"c\\\"\",\r\n  \"startIndex\": 1,\r\n  \"count\": 10\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Users/.search",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Users",
										".search"
									]
								},
								"description": "Search for users with filters using POST method.\nThis type of search is considered safer than the search using GET method."
							},
							"response": []
						},
						{
							"name": "Does a specific user have access to a specific app?",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Users/{{userid}}?attributes=urn:ietf:params:scim:schemas:oracle:idcs:extension:user:User:accounts[appId+eq+\"{{appid}}\"]",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Users",
										"{{userid}}"
									],
									"query": [
										{
											"key": "attributes",
											"value": "urn:ietf:params:scim:schemas:oracle:idcs:extension:user:User:accounts[appId+eq+\"{{appid}}\"]"
										}
									]
								},
								"description": "Search for a specific User with access to a specific App.\n\nThe easiest way to do this is to look at the \"accounts\" attribute of the User. To check for access to a particular App, you need to restrict the values of the attribute.\n\nIf the \"accounts\" attribute in the response has at least one value, then the User has access to that App.\n\n----\nThe system fulfills (enacts) a Grant to a User by creating an AccountMgmtInfo resource that records the User's access to that App. \n\nIf the Grant specifies an AppRole, then fulfillment also adds the grantee User as a member of the specified AppRole (unless that User is already a member of that AppRole).\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "List the apps that a specific user has access to",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Users/{{userid}}?attributes=urn:ietf:params:scim:schemas:oracle:idcs:extension:user:User:accounts",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Users",
										"{{userid}}"
									],
									"query": [
										{
											"key": "attributes",
											"value": "urn:ietf:params:scim:schemas:oracle:idcs:extension:user:User:accounts"
										}
									]
								},
								"description": "Get a list of the Apps that a specific User has access to.\n\nLook at the \"accounts\" attribute of the User. This lists every account to which the User has access. 'appId' is a sub-attribute in each value.\n\n------\nThe system fulfills (enacts) a Grant to a User by creating an AccountMgmtInfo resource that records the User's access to that App. \n\nIf the Grant specifies an AppRole, then fulfillment also adds the grantee User as a member of the specified AppRole (unless that User is already a member of that AppRole).\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Password",
					"description": "",
					"item": [
						{
							"name": "Check user password",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"mappingAttribute\": \"userName\",\r\n  \"mappingAttributeValue\": \"csaladna@example.com\",\r\n  \"password\": \"Welcome1\",\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:PasswordAuthenticator\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/PasswordAuthenticator",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"PasswordAuthenticator"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate password against password policy",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userName\": \"jdoe@example.com\",\r\n  \"givenName\": \"John\",\r\n  \"familyName\": \"Doe\",\r\n  \"password\": \"John\",\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:UserPasswordValidator\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/UserPasswordValidator",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"UserPasswordValidator"
									]
								},
								"description": "Validate password against the password policy.\nInform the username, first, and last name. This information will be used to validate the policy."
							},
							"response": []
						},
						{
							"name": "Validate password against password policy (specific user)",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"clarence\",\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:UserPasswordValidator\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/UserPasswordValidator/{{userid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"UserPasswordValidator",
										"{{userid}}"
									]
								},
								"description": "Validate a user password by submitting a PUT request."
							},
							"response": []
						},
						{
							"name": "Generate a password (suggestion for specific user)",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:UserPasswordGenerator\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/UserPasswordGenerator/{{userid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"UserPasswordGenerator",
										"{{userid}}"
									]
								},
								"description": "Generate a password for {{userid}} compliant with the password policy"
							},
							"response": []
						},
						{
							"name": "Reset user's password (random value)",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:UserPasswordResetter\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/UserPasswordResetter/{{userid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"UserPasswordResetter",
										"{{userid}}"
									]
								},
								"description": "Reset the {{userid}} password to random value"
							},
							"response": []
						},
						{
							"name": "Reset user's password (known value)",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"Welcome123\",\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:UserPasswordChanger\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/UserPasswordChanger/{{userid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"UserPasswordChanger",
										"{{userid}}"
									]
								},
								"description": "Reset {{userid}} password to a known value Welcome123"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Modify",
					"description": "",
					"item": [
						{
							"name": "Replace a user",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:core:2.0:User\"\r\n  ],\r\n  \"name\": {\r\n    \"givenName\": \"Barbara\",\r\n    \"familyName\": \"Jensen\"\r\n  },\r\n  \"userName\": \"bjensen@example.com\",\r\n  \"active\": true,\r\n  \"emails\": [\r\n    {\r\n      \"value\": \"bjensen@example.com\",\r\n      \"primary\": true,\r\n      \"type\": \"home\",\r\n      \"verified\": true\r\n    },\r\n    {\r\n      \"value\": \"bjensen@example.org\",\r\n      \"type\": \"work\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Users/{{userid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Users",
										"{{userid}}"
									]
								},
								"description": "Replace the entire user register.\n(attributes not informed are blanked out)"
							},
							"response": []
						},
						{
							"name": "Update user (add a single attribute)",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\r\n  ],\r\n  \"Operations\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"phoneNumbers\",\r\n      \"value\": [\r\n        {\r\n          \"value\": \"555-555-1111\",\r\n          \"type\": \"home\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Users/{{userid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Users",
										"{{userid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user (replace single attribute)",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\r\n  ],\r\n  \"Operations\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"phoneNumbers\",\r\n      \"value\": [\r\n        {\r\n          \"value\": \"666-666-1111\",\r\n          \"type\": \"home\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Users/{{userid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Users",
										"{{userid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user (multiple attributes)",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\r\n  ],\r\n  \"Operations\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"addresses[type eq \\\"other\\\"]\",\r\n      \"value\": [\r\n        {\r\n          \"type\": \"other\",\r\n          \"streetAddress\": \"911 Universal City Plaza\",\r\n          \"locality\": \"Hollywood\",\r\n          \"region\": \"CA\",\r\n          \"postalCode\": \"91608\",\r\n          \"country\": \"US\",\r\n          \"formatted\": \"911 Universal City Plaza\\nHollywood, CA 91608 US\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"ims[type eq \\\"xmpp\\\" and value ew \\\"gmail.com\\\"]\"\r\n    },\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"phoneNumbers\",\r\n      \"value\": [\r\n        {\r\n          \"value\": \"555-555-1111\",\r\n          \"type\": \"home\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Users/{{userid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Users",
										"{{userid}}"
									]
								},
								"description": "Modify the user recovery e-mail, address, and title in a single request"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Lifecycle",
					"description": "",
					"item": [
						{
							"name": "Assert user",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"mappingAttribute\": \"userName\",\r\n  \"mappingAttributeValue\": \"csaladna@example.com\",\r\n  \"includeMemberships\": true,\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Asserter\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Asserter",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Asserter"
									]
								},
								"description": "Search for a user, his details, and membership using the Asserter endpoint."
							},
							"response": []
						},
						{
							"name": "Start user activation (invite user)",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:UserActivationInitiator\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/UserActivationInitiator/{{userid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"UserActivationInitiator",
										"{{userid}}"
									]
								},
								"description": "Initiate User Activation by sending an activation email to a user who has not yet been activated in the system."
							},
							"response": []
						},
						{
							"name": "Activate user",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"active\": true,\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:UserStatusChanger\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/UserStatusChanger/{{userid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"UserStatusChanger",
										"{{userid}}"
									]
								},
								"description": "Changing the {{userid}} status by setting the active attribute to true."
							},
							"response": []
						},
						{
							"name": "Deactivate user",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"active\": false,\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:UserStatusChanger\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/UserStatusChanger/{{userid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"UserStatusChanger",
										"{{userid}}"
									]
								},
								"description": "Changing the {{userid}} status by setting the active attribute to false."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete",
					"description": "",
					"item": [
						{
							"name": "Delete user",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Users/{{userid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Users",
										"{{userid}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Create",
					"description": "",
					"item": [
						{
							"name": "Create a user",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"schemas\": [\n    \"urn:ietf:params:scim:schemas:core:2.0:User\"\n  ],\n  \"name\": {\n\t\"givenName\": \"Clarence\",\n\t\"familyName\": \"Saladna\"\n  },\n  \"userName\": \"csaladna@example.com\",\n  \"emails\": [\n\t{\n\t  \"value\": \"csaladna@example.com\",\n\t  \"type\": \"work\",\n\t  \"primary\": true\n\t},\n\t{\n\t  \"value\": \"csaladna@example.com\",\n\t  \"primary\": false,\n\t  \"type\": \"recovery\"\n\t}\n  ]\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Users",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate a unique username",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"csaladna@example.com\",\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:UserNameGenerator\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/UserNameGenerator",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"UserNameGenerator"
									]
								},
								"description": "Used for getting a unique username before user creation."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Membership",
					"description": "A User has memberships in any number of Groups. A User also has memberships in AppRoles that were granted directly and indirectly. A user also has grants of AppRoles.\n\nAn App (and optionally any of the AppRoles it defines) can be granted to a User in two ways:\n\n- Directly - when the Grant specifies as grantee a particular User\n- Indirectly - when a Grant specifies as grantee a praticular Group (of which the User is or becomes a member)\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups.",
					"item": [
						{
							"name": "Verify a user's membership in an approle",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Users/{{userid}}?filter=appRoles.value+eq+{{approleid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Users",
										"{{userid}}"
									],
									"query": [
										{
											"key": "filter",
											"value": "appRoles.value+eq+{{approleid}}"
										}
									]
								},
								"description": "Verify that a specific User is a member of a specific AppRole.\n\nFulfillment of a Grant of an AppRole to a User doesn't require an Identity Connector Framework Connector (ICF). Because Oracle Identity Cloud Service maintains internally the members of each AppRole, fulfillment simply adds that User as a member of the AppRole. If that User is already a member of that AppRole, this is a NO-OP.\n\nRemember:\nIf the App is a ManagedApp, there may be no AppRole at all.\nIf the App is an UnmanagedApp, then the User must be a member of at least one AppRole defined by that App.\n\n-----\nThe system fulfills (enacts) a Grant to a User by creating an AccountMgmtInfo resource that records the User's access to that App. \n\nIf the Grant specifies an AppRole, then fulfillment also adds the grantee User as a member of the specified AppRole (unless that User is already a member of that AppRole).\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for a user's approle memberships defined by a specific app",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/scim+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Users/{{userid}}?attributes=urn:ietf:params:scim:schemas:oracle:idcs:extension:user:User:appRoles[appId+eq+\"{{appid}}\"]",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Users",
										"{{userid}}"
									],
									"query": [
										{
											"key": "attributes",
											"value": "urn:ietf:params:scim:schemas:oracle:idcs:extension:user:User:appRoles[appId+eq+\"{{appid}}\"]"
										}
									]
								},
								"description": "Searches for and displays the AppRole memberships defined by a specific App that a User is assigned.\n\nFulfillment of a Grant of an AppRole to a User doesn't require an Identity Connector Framework Connector (ICF). Because Oracle Identity Cloud Service maintains internally the members of each AppRole, fulfillment simply adds that User as a member of the AppRole. If that User is already a member of that AppRole, this is a NO-OP.\n\nRemember:\nIf the App is a ManagedApp, there may be no AppRole at all.\nIf the App is an UnmanagedApp, then the User must be a member of at least one AppRole defined by that App.\n\n----\nThe system fulfills (enacts) a Grant to a User by creating an AccountMgmtInfo resource that records the User's access to that App. \n\nIf the Grant specifies an AppRole, then fulfillment also adds the grantee User as a member of the specified AppRole (unless that User is already a member of that AppRole).\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "List all of a user's granted approles",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Users/{{userid}}?attributes=urn:ietf:params:scim:schemas:oracle:idcs:extension:user:User:appRoles",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Users",
										"{{userid}}"
									],
									"query": [
										{
											"key": "attributes",
											"value": "urn:ietf:params:scim:schemas:oracle:idcs:extension:user:User:appRoles"
										}
									]
								},
								"description": "Get all AppRoles assigned to a specific User. An App (and optionally any of the AppRoles it defines) can be granted to a User in two ways:\n\n- Directly, when the Grant specifies as grantee a particular User\n- Indirectly, when a Grant specifies as grantee a particular Group (of which the User is or becomes a member)\n\nFulfillment of a Grant of an AppRole to a User doesn't require an Identity Connector Framework Connector (ICF). Because Oracle Identity Cloud Service maintains internally the members of each AppRole, fulfillment simply adds that User as a member of the AppRole.  If that User is already a member of that AppRole, this is a NO-OP.\n\n-------\nThe system fulfills (enacts) a Grant to a User by creating an AccountMgmtInfo resource that records the User's access to that App. \n\nIf the Grant specifies an AppRole, then fulfillment also adds the grantee User as a member of the specified AppRole (unless that User is already a member of that AppRole).\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search all users who have been granted a specific approle",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Users?filter=urn:ietf:params:scim:schemas:oracle:idcs:extension:user:User:appRoles.value eq \"{{approleid}}\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Users"
									],
									"query": [
										{
											"key": "filter",
											"value": "urn:ietf:params:scim:schemas:oracle:idcs:extension:user:User:appRoles.value eq \"{{approleid}}\""
										}
									]
								},
								"description": "Search for all Users who are assigned to a specific AppRole. Search /Users and filter on the 'appRoles' attribute.\n\nThe system fulfills (enacts) a Grant to a User by creating an AccountMgmtInfo resource that records the User's access to that App. \n\nIf the Grant specifies an AppRole, then fulfillment also adds the grantee User as a member of the specified AppRole (unless that User is already a member of that AppRole).\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search all users who have been directly granted a specific approle",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Users?filter=urn:ietf:params:scim:schemas:oracle:idcs:extension:user:User:appRoles[value eq \"{{approleid}}\" and type eq \"direct\"]",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Users"
									],
									"query": [
										{
											"key": "filter",
											"value": "urn:ietf:params:scim:schemas:oracle:idcs:extension:user:User:appRoles[value eq \"{{approleid}}\" and type eq \"direct\"]"
										}
									]
								},
								"description": "Search for all Users who are members of a specific AppRole directly. Search /Users and filter on the 'appRoles' attribute and its subattribute 'type'.\n\nThe system fulfills (enacts) a Grant to a User by creating an AccountMgmtInfo resource that records the User's access to that App. \n\nIf the Grant specifies an AppRole, then fulfillment also adds the grantee User as a member of the specified AppRole (unless that User is already a member of that AppRole).\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search all users who are members of a specific group",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Users?filter=groups.value eq \"{{groupid}}\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Users"
									],
									"query": [
										{
											"key": "filter",
											"value": "groups.value eq \"{{groupid}}\""
										}
									]
								},
								"description": "See https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9b7ee9f6-6f3d-43ad-8205-08277cecafba",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "aa7f73ed-49ac-4eb2-aa03-ff4c61d0ba79",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Grants",
					"description": "There are two ways to query Grants to Users:\n- Query the /Grants endpoint directly with a filter:\n    filter=grantee.value eq \"<idOfUser>\", or\n    filter=grantee[value eq \"<idOfUser>\" and type eq \"User\"] (if you distrust the uniqueness of IDs)\n\n- Use the grants attribute for the Oracle Identity Cloud Service User\n    - UserManager computes the values of this attribute for a particular User by querying Grants to that User.\n    - The grants attribute has the key information about each Grant to that User, but not all of the information.\n\nIf you want to query only direct Grants to Users, then your search should filter out any Grants with the grantMechanism of \"GROUP_MEMBERSHIP\":\n\n\tfilter=grantee.value eq \"<idOfUser>\" and grantMechanism ne \"GROUP_MEMBERSHIP\", or\n\tfilter=grantee[value eq \"<idOfUser>\" and type eq \"User\"] and grantMechanism ne \"GROUP_MEMBERSHIP\"\n\nAn App (and optionally any of the AppRoles that it defines) can be granted to a User in two ways:\n\n- Directly: When the Grant specifies as grantee a particular User\n- Indirectly: When a Grant specifies as grantee a particular Group (of which the User is or becomes a member)\n\nGrants to Users Directly - When the Grant specifies as grantee a particular User, that Grant doesn't depend on a User's group memberships. The system fulfills (enacts) a Grant to a User by creating an AccountMgmtInfo resource that records the User's access to that App.\n\nIf the Grant specifies an AppRole, then fulfillment also adds the grantee-User as a member of the specified AppRole (unless that User is already a member of that AppRole).\n\nOracle Identity Cloud Service records that User as having access:\n\n- As soon as the first Grant of an App is fulfilled\n  and\n- As long as at least one Grant of that App to that User exists\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups.",
					"item": [
						{
							"name": "Revoke an AppRole from a User",
							"description": "Revoking direct grants is easy, but a user could also have indirect grants (by virtue of the User being a member of a Group to which the AppRole has been granted). \r\n\r\nIn such cases, you must decide whether to:\r\n\r\n1. Remove the User from the Group (which could revoke from that User other Apps granted to that Group)\r\n or\r\n2. Revoke the App from the Group (which would affect other members of that Group).\r\n\r\nRevoking direct grants of a specified AppRole from a specific User usually requires two steps:\r\n\r\n1. Find all direct Grants of that AppRole to that User.\r\n\r\n2. Delete each direct Grant.\r\n\r\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups.",
							"item": [
								{
									"name": "Step 1: Get all direct grants for a user",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"User\",\r\n         \"value\": \"{{userID}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appID}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_USER\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Grants?filter=grantee.value eq \"{{userid}}\" and entitlement[attributeName eq \"appRoles\" and attributeValue eq \"{{approleid}}\"]",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Grants"
											],
											"query": [
												{
													"key": "filter",
													"value": "grantee.value eq \"{{userid}}\" and entitlement[attributeName eq \"appRoles\" and attributeValue eq \"{{approleid}}\"]"
												}
											]
										},
										"description": "Get all direct Grants for a User to obtain the IDs for the Grants that you want to revoke from the User.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
									},
									"response": []
								},
								{
									"name": "Step 2: Delete a grant",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Grants/{{grantid}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Grants",
												"{{grantid}}"
											]
										},
										"description": "Caution: Deleting Grants is easy, but if the User obtained access to the App indirectly (via Grant-to-Group), then you must decide whether to:\r\n\r\nA) Revoke the App from each Group\r\n\r\nB) Remove the User from each Group\r\n\r\nEither approach has side effects:\r\n\r\nRevoking the App from a Group affects other members of that Group.\r\n\r\nRemoving the User from a Group revokes any other Apps that the User may have as a result of that Group membership.\r\n\r\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "08407b55-e75a-4ca0-8600-72ba4b50d1fe",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9af3c2b3-6af2-4e93-bb49-3e5ad17f13e0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Revoke a Managed App from a User",
							"description": "This folder contains the requests required to revoke a Managed App from a User.\n\nCaution: Deleting Grants is easy, but if the User obtained access to the App indirectly (via Grant-to-Group), then you must decide whether to:\n\nA) Revoke the App from each Group\n\nB) Remove the User from each Group\n\nEither approach has side effects:\n\nRevoking the App from a Group affects other members of that Group.\n\nRemoving the User from a Group revokes any other Apps that the User may have as a result of that Group membership.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups.",
							"item": [
								{
									"name": "Step 1: Get direct grants for a user for a specific app",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"User\",\r\n         \"value\": \"{{userID}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appID}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_USER\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Grants?filter=grantee[type eq \"User\" and value eq \"{{userid}}\"] and app eq \"{{appid}}\"",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Grants"
											],
											"query": [
												{
													"key": "filter",
													"value": "grantee[type eq \"User\" and value eq \"{{userid}}\"] and app eq \"{{appid}}\""
												}
											]
										},
										"description": "Get direct Grants for a User for a specific App to obtain the IDs for the Grants that you want to revoke from the User.\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
									},
									"response": []
								},
								{
									"name": "Step 2: Delete a grant",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/admin/v1/Grants/{{grantid}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"admin",
												"v1",
												"Grants",
												"{{grantid}}"
											]
										},
										"description": "Caution: Deleting Grants is easy, but if the User obtained access to the App indirectly (via Grant-to-Group), then you must decide whether to:\r\n\r\nA) Revoke the App from each Group\r\n\r\nB) Remove the User from each Group\r\n\r\nEither approach has side effects:\r\n\r\nRevoking the App from a Group affects other members of that Group.\r\n\r\nRemoving the User from a Group revokes any other Apps that the User may have as a result of that Group membership.\r\n\r\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4de88ea9-c88e-4079-ab77-2dd9fe668d1a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "89614de8-8db8-4256-b604-017e6540aeb0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Grant a managed app to a user",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"User\",\r\n         \"value\": \"{{userid}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appid}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_USER\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									]
								},
								"description": "Grants access to a specific Managed App for a specific User.\n\nFulfillment of a Grant of a ManagedApp to a User uses an Identity Connector Framework Connector (ICF) to create an account in the identity repository of the ManagedApp.\n\nOnce the account is created, fulfillment fulfillment of a Grant-to-User records in /AccountMgmtInfos (AMI) the fact that a particular User has access to a particular App:\n\n- For an UnmanagedApp, which accepts the Oracle Identity Cloud Service User as a login identity, the AMI-entry has only \"shallow\" information, such as:\n        -a reference to the App\n        -a reference to the User\n        -whether that App is a favorite of that User\n- For a ManagedApp, which has its own identity-repository, the AMI-entry also has a \"deeper\" link:\n        -a reference to the dynamic resource that represents that User's account in that App\n        -the dynamic resource may also persist values of the attributes of that account, some of which may represent entitlements.\n\nOracle Identity Cloud Service maintains /AccountMgmtInfos internally. An external requester can't query /AccountMgmtInfos directly, but Oracle Identity Cloud Service offers several convenience views into AccountMgmtInfos:\n\n- Each App resource has an \"accounts\" attribute that queries AccountMgmtInfos for that particular App.\n- Each User resource has an \"accounts\" attribute that queries AccountMgmtInfos for that particular User.\n\n------\nA Grant says that someone (the grantor) says that someone (a grantee) should have something (access to an App, and optionally an entitlement within that App).\n\n- The grantor is typically an administrator (but could also be some component of the system).\n- The grantee is typically a User, but could also be a Group or another App.\n- The granted App may be accompanied by an entitlement defined by that App.\n\t- In general, an entitlement can be any specific value of any specific attribute of the App-specific identity.\n\t(A ManagedApp has its own identity-repository, so it defines the attributes for its own identities.)\n\t- One special case of an entitlement is membership in an AppRole defined by the App.\n    (Granting an AppRole defined by the App necessarily grants access to the App.)\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Grant an unmanaged app to a user",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"User\",\r\n         \"value\": \"{{userid}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appid}}\"\r\n    },\r\n    \"entitlement\" : {\r\n        \"attributeName\": \"appRoles\",\r\n        \"attributeValue\": \"{{approleid}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_USER\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									]
								},
								"description": "Grants access to a specific Managed App for a specific User.\n\nFulfillment of a Grant of a ManagedApp to a User uses an Identity Connector Framework Connector (ICF) to create an account in the identity repository of the ManagedApp.\n\nOnce the account is created, fulfillment fulfillment of a Grant-to-User records in /AccountMgmtInfos (AMI) the fact that a particular User has access to a particular App:\n\n- For an UnmanagedApp, which accepts the Oracle Identity Cloud Service User as a login identity, the AMI-entry has only \"shallow\" information, such as:\n        -a reference to the App\n        -a reference to the User\n        -whether that App is a favorite of that User\n- For a ManagedApp, which has its own identity-repository, the AMI-entry also has a \"deeper\" link:\n        -a reference to the dynamic resource that represents that User's account in that App\n        -the dynamic resource may also persist values of the attributes of that account, some of which may represent entitlements.\n\nOracle Identity Cloud Service maintains /AccountMgmtInfos internally. An external requester can't query /AccountMgmtInfos directly, but Oracle Identity Cloud Service offers several convenience views into AccountMgmtInfos:\n\n- Each App resource has an \"accounts\" attribute that queries AccountMgmtInfos for that particular App.\n- Each User resource has an \"accounts\" attribute that queries AccountMgmtInfos for that particular User.\n\n--------\nA Grant says that someone (the grantor) says that someone (a grantee) should have something (access to an App, and optionally an entitlement within that App).\n\n- The grantor is typically an administrator (but could also be some component of the system).\n- The grantee is typically a User, but could also be a Group or another App.\n- The granted App may be accompanied by an entitlement defined by that App.\n\t- In general, an entitlement can be any specific value of any specific attribute of the App-specific identity.\n\t(A ManagedApp has its own identity-repository, so it defines the attributes for its own identities.)\n\t- One special case of an entitlement is membership in an AppRole defined by the App.\n    (Granting an AppRole defined by the App necessarily grants access to the App.)\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Grant an approle to a user",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"User\",\r\n         \"value\": \"{{userid}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appid}}\"\r\n    },\r\n    \"entitlement\" : {\r\n        \"attributeName\": \"appRoles\",\r\n        \"attributeValue\": \"{{approleid}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_USER\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									]
								},
								"description": "A Grant of an AppRole specifies as the granted App the App that defines the AppRole, and specifies the AppRole as an entitlement. You must specify the AppRole in the payload after \"app\" when granting an AppRole to a user\n\nFulfillment of a Grant of an AppRole to a User doesn't require an Identity Connector Framework Connector (ICF). Because Oracle Identity Cloud Service maintains internally the members of each AppRole, fulfillment simply adds that User as a member of the AppRole. If that User is already a member of that AppRole, this is a NO-OP.\n\n--------\nA Grant says that someone (the grantor) says that someone (a grantee) should have something (access to an App, and optionally an entitlement within that App).\n\n- The grantor is typically an administrator (but could also be some component of the system).\n- The grantee is typically a User, but could also be a Group or another App.\n- The granted App may be accompanied by an entitlement defined by that App.\n\t- In general, an entitlement can be any specific value of any specific attribute of the App-specific identity.\n\t(A ManagedApp has its own identity-repository, so it defines the attributes for its own identities.)\n\t- One special case of an entitlement is membership in an AppRole defined by the App.\n    (Granting an AppRole defined by the App necessarily grants access to the App.)\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search grants to a specific user",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"User\",\r\n         \"value\": \"{{userID}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appID}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_USER\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants?filter=grantee[value eq \"{{userid}}\" and type eq \"User\"]",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									],
									"query": [
										{
											"key": "filter",
											"value": "grantee[value eq \"{{userid}}\" and type eq \"User\"]"
										}
									]
								},
								"description": "Brings back more details about each Grant, such as who created the grant or when the grant was created.\n\nThere are two ways to query Grants to Users:\n\n    Query the /Grants endpoint directly with a filter such as:\n        filter=grantee.value eq \"<idOfUser>\", or\n        filter=grantee[value eq \"<idOfUser>\" and type eq \"User\"] (if you distrust the uniqueness of IDs)\n    For convenience, each Oracle Identity Cloud Service User has a grants attribute: \n        UserManager computes the values of this attribute for a particular User by querying Grants to that User.\n        The grants attribute has the key information about each Grant to that User, but not all of the information.\n\nNOTE: If you want to query only direct Grants to Users, then your search should filter out any Grant with grantMechanism of \"GROUP_MEMBERSHIP\"\n\n    filter=grantee.value eq \"<idOfUser>\" and grantMechanism ne \"GROUP_MEMBERSHIP\", or\n    filter=grantee[value eq \"<idOfUser>\" and type eq \"User\"] and grantMechanism ne \"GROUP_MEMBERSHIP\"\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for grants of a specific app to a specific user",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"User\",\r\n         \"value\": \"{{userID}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appID}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_USER\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants?filter=grantee[type eq \"User\" and value eq \"{{userid}}\"] and app eq \"{{appid}}\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									],
									"query": [
										{
											"key": "filter",
											"value": "grantee[type eq \"User\" and value eq \"{{userid}}\"] and app eq \"{{appid}}\""
										}
									]
								},
								"description": "Brings back more details about each Grant, such as who created the grant or when the grant was created.\n\nThere are two ways to query Grants to Users:\n\n    Query the /Grants endpoint directly with a filter such as:\n        filter=grantee.value eq \"<idOfUser>\", or\n        filter=grantee[value eq \"<idOfUser>\" and type eq \"User\"] (if you distrust the uniqueness of IDs)\n    For convenience, each Oracle Identity Cloud Service User has a grants attribute: \n        UserManager computes the values of this attribute for a particular User by querying Grants to that User.\n        The grants attribute has the key information about each Grant to that User, but not all of the information.\n\nNOTE: If you want to query only direct Grants to Users, then your search should filter out any Grant with grantMechanism of \"GROUP_MEMBERSHIP\"\n\n    filter=grantee.value eq \"<idOfUser>\" and grantMechanism ne \"GROUP_MEMBERSHIP\", or\n    filter=grantee[value eq \"<idOfUser>\" and type eq \"User\"] and grantMechanism ne \"GROUP_MEMBERSHIP\"\n    \n------ \nA Grant says that someone (the grantor) says that someone (a grantee) should have something (access to an App, and optionally an entitlement within that App).\n\n- The grantor is typically an administrator (but could also be some component of the system).\n- The grantee is typically a User, but could also be a Group or another App.\n- The granted App may be accompanied by an entitlement defined by that App.\n\t- In general, an entitlement can be any specific value of any specific attribute of the App-specific identity.\n\t(A ManagedApp has its own identity-repository, so it defines the attributes for its own identities.)\n\t- One special case of an entitlement is membership in an AppRole defined by the App.\n    (Granting an AppRole defined by the App necessarily grants access to the App.)\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for all direct grants of a specific approle to a specific user",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"User\",\r\n         \"value\": \"{{userID}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appID}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_USER\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants?filter=grantee[value eq \"{{userid}}\" and type eq \"User\"] and entitlement[attributeName eq \"appRoles\" and attributeValue eq \"{{approleid}}\"]",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									],
									"query": [
										{
											"key": "filter",
											"value": "grantee[value eq \"{{userid}}\" and type eq \"User\"] and entitlement[attributeName eq \"appRoles\" and attributeValue eq \"{{approleid}}\"]"
										}
									]
								},
								"description": "List the direct Grants of a specific AppRole to a specific User.\n\nThere are two ways to query Grants to Users:\n\n    Query the /Grants endpoint directly with a filter such as:\n        filter=grantee.value eq \"<idOfUser>\", or\n        filter=grantee[value eq \"<idOfUser>\" and type eq \"User\"] (if you distrust the uniqueness of IDs)\n    For convenience, each Oracle Identity Cloud Service User has a grants attribute: \n        UserManager computes the values of this attribute for a particular User by querying Grants to that User.\n        The grants attribute has the key information about each Grant to that User, but not all of the information.\n\nNOTE: If you want to query only direct Grants to Users, then your search should filter out any Grant with grantMechanism of \"GROUP_MEMBERSHIP\"\n\n    filter=grantee.value eq \"<idOfUser>\" and grantMechanism ne \"GROUP_MEMBERSHIP\", or\n    filter=grantee[value eq \"<idOfUser>\" and type eq \"User\"] and grantMechanism ne \"GROUP_MEMBERSHIP\"\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for all direct grants of a specific app to any user",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants?filter=app.value eq \"{{appid}}\" and grantee.type eq \"User\" and grantMechanism ne \"GROUP_MEMBERSHIP\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									],
									"query": [
										{
											"key": "filter",
											"value": "app.value eq \"{{appid}}\" and grantee.type eq \"User\" and grantMechanism ne \"GROUP_MEMBERSHIP\""
										}
									]
								},
								"description": "There are two ways to query Grants to Users:\n\n    Query the /Grants endpoint directly with a filter such as:\n        filter=grantee.value eq \"<idOfUser>\", or\n        filter=grantee[value eq \"<idOfUser>\" and type eq \"User\"] (if you distrust the uniqueness of IDs)\n    For convenience, each Oracle Identity Cloud Service User has a grants attribute: \n        UserManager computes the values of this attribute for a particular User by querying Grants to that User.\n        The grants attribute has the key information about each Grant to that User, but not all of the information.\n\nNOTE: If you want to query only direct Grants to Users, then your search should filter out any Grant with grantMechanism of \"GROUP_MEMBERSHIP\"\n\n    filter=grantee.value eq \"<idOfUser>\" and grantMechanism ne \"GROUP_MEMBERSHIP\", or\n    filter=grantee[value eq \"<idOfUser>\" and type eq \"User\"] and grantMechanism ne \"GROUP_MEMBERSHIP\"\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "Search for all indirect grants of a specific app to any user",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Grants?filter=app.value eq \"{{appid}}\" and grantee.type eq \"User\" and grantMechanism eq \"GROUP_MEMBERSHIP\"",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Grants"
									],
									"query": [
										{
											"key": "filter",
											"value": "app.value eq \"{{appid}}\" and grantee.type eq \"User\" and grantMechanism eq \"GROUP_MEMBERSHIP\""
										}
									]
								},
								"description": "There are two ways to query Grants to Users:\n\n    Query the /Grants endpoint directly with a filter such as:\n        filter=grantee.value eq \"<idOfUser>\", or\n        filter=grantee[value eq \"<idOfUser>\" and type eq \"User\"] (if you distrust the uniqueness of IDs)\n    For convenience, each Oracle Identity Cloud Service User has a grants attribute: \n        UserManager computes the values of this attribute for a particular User by querying Grants to that User.\n        The grants attribute has the key information about each Grant to that User, but not all of the information.\n\nNOTE: If you want to query only direct Grants to Users, then your search should filter out any Grant with grantMechanism of \"GROUP_MEMBERSHIP\"\n\n    filter=grantee.value eq \"<idOfUser>\" and grantMechanism ne \"GROUP_MEMBERSHIP\", or\n    filter=grantee[value eq \"<idOfUser>\" and type eq \"User\"] and grantMechanism ne \"GROUP_MEMBERSHIP\"\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "List all grants for a specific user",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"User\",\r\n         \"value\": \"{{userID}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appID}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_USER\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Users/{{userid}}?attributes=urn:ietf:params:scim:schemas:oracle:idcs:extension:user:User:grants",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Users",
										"{{userid}}"
									],
									"query": [
										{
											"key": "attributes",
											"value": "urn:ietf:params:scim:schemas:oracle:idcs:extension:user:User:grants"
										}
									]
								},
								"description": "Get all Apps that a specific User has access to and for how many different reasons (grants) does the user have access to each.\n\nNote: To obtain additional details about each Grant (such as who created them or when), query /Grants. See the Grants Search folder for examples.\n\nA Grant says that someone (the grantor) says that someone (a grantee) should have something (access to an App, and optionally an entitlement within that App).\n\n- The grantor is typically an administrator (but could also be some component of the system).\n- The grantee is typically a User, but could also be a Group or another App.\n- The granted App may be accompanied by an entitlement defined by that App.\n\t- In general, an entitlement can be any specific value of any specific attribute of the App-specific identity.\n\t(A ManagedApp has its own identity-repository, so it defines the attributes for its own identities.)\n\t- One special case of an entitlement is membership in an AppRole defined by the App.\n    (Granting an AppRole defined by the App necessarily grants access to the App.)\n\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						},
						{
							"name": "List all grants of a specific app for a specific user",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"grantee\": {\r\n        \"type\": \"User\",\r\n         \"value\": \"{{userID}}\"\r\n    },\r\n    \"app\": {\r\n        \"value\": \"{{appID}}\"\r\n    },\r\n    \"grantMechanism\" : \"ADMINISTRATOR_TO_USER\",\r\n    \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:oracle:idcs:Grant\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/admin/v1/Users/{{userid}}?attributes=urn:ietf:params:scim:schemas:oracle:idcs:extension:user:User:grants[appId eq \"{{appid}}\"]",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"v1",
										"Users",
										"{{userid}}"
									],
									"query": [
										{
											"key": "attributes",
											"value": "urn:ietf:params:scim:schemas:oracle:idcs:extension:user:User:grants[appId eq \"{{appid}}\"]"
										}
									]
								},
								"description": "The system fulfills (enacts) a Grant to a User by creating an AccountMgmtInfo resource that records the User's access to that App. \r\n\r\nIf the Grant specifies an AppRole, then fulfillment also adds the grantee User as a member of the specified AppRole (unless that User is already a member of that AppRole).\r\n\r\n-------\r\nA Grant says that someone (the grantor) says that someone (a grantee) should have something (access to an App, and optionally an entitlement within that App).\r\n\r\n- The grantor is typically an administrator (but could also be some component of the system).\r\n- The grantee is typically a User, but could also be a Group or another App.\r\n- The granted App may be accompanied by an entitlement defined by that App.\r\n\t- In general, an entitlement can be any specific value of any specific attribute of the App-specific identity.\r\n\t(A ManagedApp has its own identity-repository, so it defines the attributes for its own identities.)\r\n\t- One special case of an entitlement is membership in an AppRole defined by the App.\r\n    (Granting an AppRole defined by the App necessarily grants access to the App.)\r\n\r\nSee https://docs.oracle.com/en/cloud/paas/identity-cloud/rest-api/appmgmtrelationships.html for more information on understanding application management relationships between Apps, AppRoles, Users, and Groups."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c10e3fc2-fee5-4f95-a986-75cd836a955f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c6e1b502-63bb-44a7-95ac-fd758def58a5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "66588be4-1f77-44da-b4b1-00cec6700903",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4911c14b-d6f1-419f-be97-997739a56fa1",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}